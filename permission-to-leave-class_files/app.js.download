Locale.use("en-AU"),
Locale.define("en-AU", "general", {
    all: "all",
    accessYourDocument: "Click here to access your document.",
    cancel: "Cancel",
    chooseColour: "Click on a colour to select it.",
    close: "Close",
    colour: "Choose a colour",
    colourSelection: "Select colour",
    configureFields: "Configure fields",
    confirm: "Confirm",
    delete: "Delete",
    date: "Date",
    discard: "Discard",
    documentReady: "Done!",
    done: "Done",
    email: "Email",
    emailSupport: "If you continue to experience difficulty, or believe you have found a bug, please click the &lsquo;Email&rsquo; button below.",
    empty: "There are no records to display",
    errT: "An error has occurred",
    errSaving: "An error occurred whilst attempting to save. Please try again. If this problem persists, seek technical assistance. (Error code bjs03)",
    errUploadingFile: "An error occurred whilst uploading your file. Please try again. Note that file size restrictions are in place. If this problem persists, seek technical assistance. (Error code bjs05)",
    errServerCommunication: "An error occurred whilst communicating with the server. Please check your network connection. If this problem persists, seek technical assistance. (Error code bjs06)",
    exportData: "Export",
    exportToSpreadsheet: "Export to spreadsheet",
    fuzzyNumber: function(a, b) {
        var c = function(a, c, d) {
            return b ? a + " " + b + (d ? "s" : "") : c
        };
        return a && a.toInt && (a = a.toInt()),
        0 === a ? c("no", "none", !0) : 1 === a ? c("one", "one", !1) : 2 === a ? c("two", "two", !0) : 3 === a ? c("three", "three", !0) : 4 === a ? c("four", "four", !0) : 5 === a ? c("five", "five", !0) : 6 === a ? c("six", "six", !0) : 7 === a ? c("seven", "seven", !0) : 8 === a ? c("eight", "eight", !0) : 9 === a ? c("nine", "nine", !0) : 10 === a ? c("ten", "ten", !0) : 100 >= a ? c("tens of", "tens", !0) : 1e3 >= a ? c("hundreds of", "hundreds", !0) : 1e4 >= a ? c("thousands of", "thousands", !0) : 1e4 < a ? c("an awful lot of", "an awful lot", !0) : "" + a
    },
    help: "Help",
    import: "Import",
    incompleteData: "Please ensure that you have filled out all of the required values, then try again. If this problem persists, seek technical assistance.",
    incompleteDataT: "Incomplete data",
    load: "Open",
    loading: "Loading...",
    loginError: "The user name or password you entered was incorrect. Please try again.",
    loginSession: "You have been logged out due to prolonged inactivity. Please enter your password to continue.",
    loginWelcome: "Please enter your user name and password to log in.",
    logOn: "Log in",
    logout: "Log out",
    masqueradeBanner: "You ({m}) are currently masquerading as {u}. Your actions will be logged.",
    next: "Next",
    new: "New",
    newVersion: function() {
        return 'SEQTA has been updated, and needs to be reloaded. Would you like to do this now? Choose "no" if you have any unsaved changes; you will be prompted again in a few minutes.'
    },
    newVersionT: function() {
        return "SEQTA has been updated"
    },
    no: "No",
    noFileSelectedT: "No file selected",
    noFileSelected: "You have not selected a file to upload.",
    noResults: "No results were found.",
    nullValue: "Unspecified (null)",
    ok: "OK",
    password: "Password",
    pleaseWait: "Working&hellip;",
    pleaseWaitA: "Still going&hellip;",
    pleaseWaitB: "Nearly done&hellip;",
    previous: "Previous",
    print: "Print",
    readMore: "Read more",
    readLess: "Read less",
    reallyCloseDialog: "Do you really want to close this dialog? You will lose any unsaved data.",
    reallyCloseDialogT: "Really close?",
    reallyLogout: "Do you really want to log out?",
    reallyLogoutT: "Log out?",
    reallyContinue: "Do you really want to continue?",
    reallyContinueT: "Really continue?",
    save: "Save",
    saveAndReset: "Save and reset",
    saveAs: "Save As",
    saveCopy: "Save a copy",
    saving: "Saving...",
    saved: "Saved.",
    search: "Search...",
    send: "Send",
    selectColour: "Select a colour",
    randomColour: "Random",
    selectAll: "All",
    selectDate: "Select date",
    selectNone: "None",
    selected: "Selected",
    selectedUpload: "Selected &ldquo;{description}&rdquo; with the following parameters:",
    selectFile: "Select file&hellip;",
    sessionExpired: "Timed out",
    storageFull: "The SEQTA server's disk is becoming full. Please contact your IT department to ensure the ability to upload files remains uninterrupted for all users.",
    storageFullT: "Storage space full",
    summary: "Summary",
    time: "Time",
    unsavedChangesT: "Unsaved changes",
    unsavedChanges: "Your changes have not yet been saved. Do you want to save your changes and continue?",
    upload: "Upload file",
    userName: "User name",
    viewCourseOutline: "Course outline",
    warnServerCommunicationT: "The system is having trouble communicating with the server.",
    warnServerCommunication: "Please check your network connection.",
    yourDocumentIsReady: "Your document is ready.",
    yourDocumentWasReady: "Your document was ready.",
    yes: "Yes",
    "dialog-ok": "OK",
    "dialog-cancel": "Cancel",
    "dialog-yes": "Yes",
    "dialog-no": "No",
    "dialog-print": "Print",
    "dialog-email": "Email",
    "dialog-about": "About",
    ordinalSuffix: function(a) {
        var b = a % 100;
        return 11 == b || 12 == b || 13 == b ? "th" : 1 == (b = a % 10) ? "st" : 2 == b ? "nd" : 3 == b ? "rd" : "th"
    },
    numberToWord: function(a) {
        return 0 === a || "0" === a ? "zero" : 1 === a || "1" === a ? "one" : 2 === a || "2" === a ? "two" : 3 === a || "3" === a ? "three" : 4 === a || "4" === a ? "four" : 5 === a || "5" === a ? "five" : 6 === a || "6" === a ? "six" : 7 === a || "7" === a ? "seven" : 8 === a || "8" === a ? "eight" : 9 === a || "9" === a ? "nine" : 10 === a || "10" === a ? "ten" : a
    },
    clear: "Clear",
    selectStudent: "Select student",
    selectStudentGroup: "Select group",
    selectStaff: "Select staff",
    selectTutor: "Select tutor",
    selectContact: "Select guardian",
    selectCount: function(a, b, c, d) {
        let e = "";
        return 0 < a && (e += a + " stu" + (1 < a ? "s" : ""),
        (0 < b || 0 < c || 0 < d) && (e += ", ")),
        0 < b && (e += b + " stf",
        (0 < c || 0 < d) && (e += ", ")),
        0 < c && (e += c + " ttr" + (1 < c ? "s" : ""),
        0 < d && (e += ", ")),
        0 < d && (e += d + " grd" + (1 < d ? "s" : "")),
        e
    },
    coordinatorOf: function(a) {
        return a + " coordinator"
    },
    numberStudents: function(a) {
        return 0 >= a ? "no students" : a + (1 < a ? " students" : "student")
    }
}),
Locale.define("en-AU", "browser", {
    oldBrowser: function(a, b) {
        let c;
        switch (c = "ie" === a ? "Uh-oh &ndash; you are using a &#34;legacy browser&#34;. It will remain supported for the remainder of 2018 but will be unsupported from 2019 on. " : "Uh-oh &ndash; your browser isn&rsquo;t supported. :( You can continue, but things might run slowly, and you may encounter bugs. ",
        a) {
        case "ie":
            c += "If possible, use Microsoft Edge, or install Firefox or Chrome.";
            break;
        case "safari":
            c += "ios" === b ? "You&rsquo;ll need to upgrade your device&rsquo;s operating system to get a newer version of Safari." : "If possible, upgrade to the latest version of Safari, or install Firefox or Chrome.";
            break;
        case "firefox":
            c += "Please upgrade to the latest version of Firefox, and ensure your auto-update facility is enabled.";
            break;
        case "chrome":
            c += "Please upgrade to the latest version of Chrome, and ensure your auto-update facility is enabled.";
            break;
        default:
            c += "Please use the latest version of Firefox, Chrome, Edge, or Safari."
        }
        return c
    },
    acknowledge: "Continue anyway"
}),
Locale.define("en-AU", "serverErrors", {
    "http-202": "Your request has been accepted for processing. You’ll be notified when it’s done.",
    "http-202-title": "Processing",
    "http-400": "An error occurred communicating with the server. Reload the page and try again.",
    "http-401": "You aren’t authorised to perform this action. Contact your SEQTA administrator to check your permissions.",
    "http-403": "You aren’t authorised to perform this action. Contact your SEQTA administrator to check your permissions.",
    "http-404": "An error occurred communicating with the server. Reload the page and try again.",
    "http-405": "An error occured communicating with the server. Reload the page and try again.",
    "http-406": a=>`The file you’re uploading is the wrong type. ${a && a.acceptMimes ? "Acceptable types: " + a.acceptMimes.join(", ") : ""}`,
    "http-408": "Your request is taking too long to process. Reload the page and try again.",
    "http-413": "The file you’re uploading is too large.",
    "http-500": "An error occurred on the SEQTA server. Reload the page and try again.",
    "http-503": "The SEQTA server is temporarily unavailable. Wait five minutes, then reload the page and try again.",
    "http-507-title": "Insufficient space",
    "http-507": "There is insufficient space on the SEQTA server for your upload. Please contact your IT department.",
    "http-550": "Your update would violate a database constraint, and could not be completed.",
    "http-551": "Your update would violate a database constraint, and could not be completed.",
    "http-560": "No data matching your criteria could be found. Try expanding your parameters.",
    "http-570": "You are not allowed to post to this forum.",
    "http-581": "Your request could not be processed. Reload the page and try again.",
    "http-582": "The requested student group no longer exists.",
    "http-583": "Your request could not be processed. Reload the page and try again.",
    "http-1102": "Your request could not be processed. Reload the page and try again."
}),
Locale.define("en-AU", "mime", {
    "image/jpeg": "JPEG",
    "image/gif": "GIF",
    "image/png": "PNG",
    "image/tif": "TIFF",
    "image/bmp": "Bitmap",
    "image/svg+xml": "SVG",
    "video/mp4": "MPEG-4 video",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "Text document",
    "application/vnd.oasis.opendocument.text": "Text document",
    "application/msword": "Text document",
    "application/vnd.ms-word.document.macroEnabled.12": "Text document",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": "Text document template",
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": "Presentation",
    "application/mspowerpoint": "Presentation",
    "application/pdf": "PDF",
    "application/octet-stream": "Binary file",
    "audio/x-wav": "WAVE audio",
    "audio/mp4a-latm": "MPEG-4 audio",
    "audio/mpeg": "MPEG audio",
    "application/vnd.ms-excel": "Spreadsheet",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.document": "Spreadsheet",
    "text/comma-separated-values": "CSV",
    "application/postscript": "Postscript",
    "application/x-shockwave-flash": "Flash",
    "text/xml": "XML",
    "text/html": "HTML",
    "text/plain": "Text",
    "text/rtf": "Text"
}),
Locale.define("en-AU", "forum", {
    ascending: "Most recent last",
    descending: "Most recent first",
    sendComment: "Send",
    sendMessage: "Send",
    addResource: "Add resource",
    addResourceT: "Add resource",
    addResourceExplanation: "Select the file you would like to add to your message.",
    deleteMessage: "Delete message",
    undeleteMessage: "Restore message",
    deleteComment: "Delete comment",
    restoreComment: "Restore comment",
    banParticipant: "Ban this participant",
    list: "My forums",
    newResourceCount: "Attached {n} resources.",
    participantCount: "{n} participants",
    unreadCount: "{n} unread messages",
    messageCount: "{n} total messages",
    muteToggle: "Suppress notifications",
    deletedComments: function(a) {
        return 1 === a ? "Show deleted comment&hellip;" : "Show " + a + " deleted comments&hellip;"
    },
    deletedMessages: function(a) {
        return 1 === a ? "Show deleted thread&hellip;" : "Show " + a + " deleted threads&hellip;"
    },
    readComments: function(a) {
        return 1 === a ? "Show read comment&hellip;" : "Show " + a + " read comments&hellip;"
    },
    moreComments: function(a) {
        return 0 === a ? "View 1 more comment..." : "View " + a + " more comments..."
    },
    newComment: "Type here to add a new comment...",
    reopenForum: "Reopen forum",
    closeForum: "Close",
    editForum: "Edit",
    closedForums: "Show {n} closed forums",
    title: "Title",
    reallyDeleteT: "Delete message?",
    reallyDelete: "Do you really want to delete this message?",
    reallyDeleteCommentT: "Delete comment?",
    reallyDeleteComment: "Do you really want to delete this comment?",
    reallyRestoreT: "Restore deleted message?",
    reallyRestore: "Are you sure you want to restore this message?",
    reallyRestoreCommentT: "Restore deleted comment?",
    reallyRestoreComment: "Are you sure you want to restore this comment?",
    reallyBanT: "Ban participant?",
    reallyBan: "Please enter the reason for this ban.",
    recordBanPastoral: "Also record this as a pastoral care entry",
    deleteBannedMessages: "Also delete all messages posted by this participant",
    printAssessment: "Print assessment coversheet",
    unsentMessagesT: "Unsent messages",
    unsentMessages: "Your messages have not yet been sent. Are you sure you want to discard the messages and continue?"
}),
Locale.define("en-AU", "conversation", {
    author: function(a, b) {
        return (b ? "You " : a.escapeHTML()) + " said..."
    },
    newReplyPlaceholder: "Reply…",
    newMessagePlaceholder: "New message…",
    reply: "Reply",
    send: "Send",
    tooSoonT: "Slow down!",
    tooSoon: "You can’t post so soon after your previous post. Please wait a few seconds first.",
    undo: "Restore message",
    delete: "Delete message",
    deleted: "This message has been deleted.",
    timer: function(a) {
        return "Automatically sending in " + Math.round(a / 1e3) + " seconds&hellip;"
    }
}),
Locale.define("en-AU", "lightbox", {
    next: "&raquo;",
    prev: "&laquo;"
}),
Locale.define("en-AU", "mangle", {
    preview: "Test this rule: ",
    now: "",
    today: "",
    monday: "Soonest",
    tuesday: "Soonest",
    wednesday: "Soonest",
    thursday: "Soonest",
    friday: "Soonest",
    saturday: "Soonest",
    sunday: "Soonest",
    upcoming: "If past, + 1d",
    weekday: "Soonest",
    "+": "Add",
    "-": "Subtract",
    "<=": "Assign",
    y: "Years",
    z: "Months",
    w: "Weeks",
    d: "Days",
    h: "Hours",
    m: "Minutes"
}),
Locale.define("en-AU", "direqtmessage", {
    abbreviation: "DM",
    globalNewMessage: "New message [ alt + m ]",
    newMessage: "New message",
    linkButton: {
        shortTitle: "Msg",
        title: "Direqt message",
        student: "Student",
        students: "Students",
        contacts: "Guardians",
        bothSingleStudent: "Student &amp; guardians",
        both: "Students &amp; guardians"
    },
    abbrevRecipients: function(a, b, c, d) {
        var e = [];
        return a && e.push(a + " st"),
        d && e.push(d + " gd"),
        b && e.push(b + " sf"),
        c && e.push(c + " tt"),
        e.join(", ")
    },
    view: {
        blindWarning: "Due to the number of recipients, the recipient list must be kept private."
    },
    compose: {
        title: "Compose message",
        replySubjectPrefix: "Re: ",
        replySubjectSuffix: "",
        forwardSubjectPrefix: "Fwd: ",
        forwardSubjectSuffix: "",
        forwardBody: function(a, b, c) {
            return '<br/><br/><blockquote class="forward"><div class="preamble"><div class="title">Forwarded message</div><div class="date"><span class="label">Sent: </span><span class="value">' + a.toDate().print() + '</span></div><div class="sender"><span class="label">Sender: </span><span class="value">' + b + '</span></div></div><div class="body">' + c + "</div></blockquote>"
        },
        replyBody: function(a, b, c) {
            return '<br/><blockquote class="forward"><div class="preamble"><div class="title">Original message</div><div class="date"><span class="label">Sent: </span><span class="value">' + a.toDate().print() + '</span></div><div class="sender"><span class="label">Sender: </span><span class="value">' + b + '</span></div></div><div class="body">' + c + "</div></blockquote>"
        },
        subjectPlaceholder: "Subject…",
        attachmentsOnlySubject: function(a) {
            return 1 === a ? a + " file" : (a || 0) + " files"
        },
        blind: "Keep recipient list private (BCC)",
        sentT: function(a) {
            return "“" + ((a = a || {}).subject || "(no subject)").escapeHTML() + "” sent."
        },
        sent: function(a) {
            var b = "Your message was successfully sent to ";
            return (a = a || {}).recipients ? 1 < a.recipients ? b + a.recipients + " recipients." : b + "one recipient." : b + "no-one."
        },
        tab: {
            content: "Content",
            recipients: a=>`Recipients (${a})`
        }
    }
}),
Locale.define("en-AU", "studentselect", {
    addBulkT: "Add many students",
    addBulkExpl: "Select the students (or classes) that you wish to add to the list.",
    addBulk: "Add many&hellip;",
    year: "Schoolyear",
    roll: "Roll group",
    house: "House",
    class: "Class",
    campus: "Campus",
    boarder: "Boarder",
    indigenous: "Indigenous/Gender",
    group: "Group",
    code: "Code"
}),
Locale.define("en-AU", "anyoneSelect", {
    addManyStudents: "Add students",
    addManyContacts: "Add guardians for students",
    addManyStaff: "Add staff",
    staffSelect: {
        coordinator: "Coordinator",
        department: "Department",
        campus: "Campus",
        class: "Class"
    }
}),
Locale.define("en-AU", "feedback", {
    giveFeedback: "Feedback",
    explanation: function() {
        return "If you have a suggestion, idea, or comment about SEQTA, you can send that feedback through to us. Although we can’t respond to all the feedback we receive, we do read it all – and it helps us to make better products."
    },
    messageStart: "",
    sentT: "Thanks!",
    sent: "Your feedback has been sent!",
    messagePrefix: "Comment: ",
    messageLength: a=>`${a} characters remaining`,
    noMessage: "No written feedback.",
    moods: {
        leader: "Hi SEQTA, ",
        happy: "Happy",
        sad: "Sad",
        surprised: "Surprised",
        inspired: "Inspired"
    }
}),
Locale.define("en-AU", "dailycalendar", {
    addDay: "Add day"
}),
Locale.define("en-AU", "timetable", {
    dayMode: "Day view",
    fullMode: "Week view",
    email: "Email",
    dayTitle: function(a, b) {
        var c = '<div class="name">';
        return c += a,
        b && b.length && (c += " (",
        c += b,
        c += ")"),
        c += "</div>"
    },
    currentRoom: function(a, b) {
        var c = "";
        return b ? (c = b,
        a && (c = c + " (was " + a + ")")) : a && (c = a),
        c
    },
    noData: "No data found",
    messageEmpty: "There are no timetabled classes to print for this week"
}),
Locale.define("en-AU", "fileHandler", {
    label: function(a) {
        return a ? "Add files" : "Add a file"
    },
    droppable: function(a) {
        return a ? "Drop files here to upload them" : "Drop a file here to upload it"
    },
    browse: function(a) {
        return a ? "Where are the files?" : "Where&rsquo;s the file?"
    },
    local: {
        browse: "My device"
    },
    seqta: {
        browse: "In SEQTA"
    },
    dropbox: {
        browse: "Dropbox",
        navigatedErrorT: "Could not link Dropbox files",
        navigatedError: "The upload succeeded, but the original page that initiated the upload has been closed."
    },
    googleDrive: {
        browse: "Google Drive"
    },
    oneDrive: {
        browse: "OneDrive",
        error: "OneDrive error",
        errorMsg: "Unable to load OneDrive. If popups are blocked, make sure they are allowed and this page will need to be reloaded. Please contact your IT department if this problem persists."
    },
    error: "The following file(s) were not able to be uploaded:",
    almostFullWarning: "The SEQTA server's disk is becoming full. Please contact your IT department to ensure the ability to upload files remains uninterrupted."
}),
Locale.define("en-AU", "fileList", {
    backfile: function(a) {
        return "Uploaded by " + a
    },
    error: "Error processing media",
    errorTitle: "There was an error when processing this media file. Please seek technical assistance for more information.",
    late: "Late submission",
    post: "Post submission",
    marked: "Marked",
    meta: "{type} added {date}",
    pending: "Media processing&hellip;",
    pendingTitle: "The media for this file is still being processed. Check back in a few minutes.",
    sortFilesByDate: "Sort by date",
    sortFilesByName: "Sort by name",
    sortFilesByType: "Sort by type",
    showDeleted: "Show deleted"
}),
Locale.define("en-AU", "mediaPlayer", {
    title: "Media player [{filename}]",
    notMediaFile: "This file is not an appropriate media type and cannot be played.",
    noMediaSupport: "Your browser does not support HTML5 video or audio."
}),
Locale.define("en-AU", "resourceBrowser", {
    title: "Resource browser",
    more: "Load more results&hellip;",
    search: "Search",
    removeFilter: "Remove this constraint",
    source: "Source"
}),
Locale.define("en-AU", "dashlet", {
    motd: {
        title: "Message of the day"
    },
    sentence: {
        title: "Sentence generator"
    },
    notes: {
        title: "Notes",
        delete: "Delete note",
        cancel: "Cancel",
        done: "Done"
    },
    pastoral: {
        title: function(a) {
            var b = "Pastoral care details";
            return a && (b += ' for <span class="name">' + a.escapeHTML() + "</span>"),
            b
        },
        noneFound: "No pastoral care details available",
        details: "Details",
        date: "Date",
        oneMonth: "One month",
        threeMonth: "Last three months",
        lastYear: "Last year",
        allTime: "All time"
    },
    profile: {
        title: "Preferences",
        details: "Your details",
        preferences: "Preferences",
        save: "Save",
        auth: {
            desired: "Desired password",
            confirm: "Confirm desired password",
            previous: "Current password",
            msg: "Please enter your desired password:"
        },
        usernameLabel: "Username",
        emailLabel: "Email",
        phoneLabel: "Mobile number",
        phoneSavedT: "Mobile number saved",
        phoneSaved: "Your mobile number was successfully updated.",
        audioLabel: "Audio alerts",
        audioToggle: {
            enabled: "Active",
            disabled: "Muted"
        },
        audioSavedT: "Audio alerts saved",
        audioSaved: "Your audio alert preference has been updated.",
        colourLabel: "Background colour",
        accentLabel: "Accent colour",
        themeLabel: "Theme",
        themeWarning: "Dark mode is currently in beta, so some colours might not display the way they should.",
        backgroundLabel: "Background image",
        backgroundNone: "None",
        tourLabel: a=>`${a} tour`,
        on: "On",
        off: "Off",
        themeToggle: {
            light: "Light",
            dark: "Dark (beta!)"
        },
        themeModeSavedT: "Theme updated",
        themeModeSaved: "Your theme preference has been set.",
        themeColourSavedT: "Colour updated",
        themeColourSaved: "Your background colour preference has been set.",
        themeAccentSavedT: "Accent updated",
        themeAccentSaved: "Your accent colour preference has been set.",
        tourSavedT: "Tour updated",
        tourSaved: a=>`The ${a} tour preference has been set.`,
        oldPassword: "Old password",
        newPassword: "New password",
        passwordUpdate: "Authentication",
        changePassword: "Change password",
        missingOldPasswordT: "Enter your old password",
        missingOldPassword: "You haven't entered your old password.",
        missingNewPasswordT: "Enter a new password",
        missingNewPassword: "You haven't entered a new password.",
        noPasswordUpdateT: "Couldn't update your password",
        noPasswordUpdate: "Check your current password and try again.",
        passwordSavedT: "Password updated",
        passwordSaved: "Your password has been successfully updated."
    },
    "summary-pastoral": {
        title: function(a) {
            var b = "Pastoral care";
            return a && (b += ' for <span class="name">' + a.escapeHTML() + "</span>"),
            b
        },
        noneFound: "No pastoral care records",
        showCount: "Show count",
        showPoints: "Show points",
        total: "Total",
        totalShort: "&Sigma;",
        stepLevel: function(a, b) {
            var c = [];
            return (a || 0 === a) && c.push("step " + a),
            (b || 0 === b) && c.push("level " + b),
            "Currently on " + c.join(" and ") + "."
        }
    },
    "summary-absence": {
        title: function(a) {
            var b = "Unresolved absences";
            return a && (b += ' for <span class="name">' + a.escapeHTML() + "</span>"),
            b
        },
        date: "Date",
        periods: "Periods",
        noneFound: "No unresolved absences!"
    },
    "summary-homework": {
        title: function(a) {
            var b = "Homework";
            return a && (b += ' for <span class="name">' + a.escapeHTML() + "</span>"),
            b
        },
        noneFound: "No homework!",
        todo: "&rarr; Add to my to-do list"
    },
    tasks: {
        title: "Task list",
        showCompleted: "Show done",
        hideCompleted: "Hide done",
        delete: "Delete task"
    },
    timetable: {
        title: function(a) {
            var b = "Timetable";
            return a && (b += ' for <span class="name">' + a.escapeHTML() + "</span>"),
            b
        }
    },
    links: {
        title: "Links"
    }
}),
Locale.define("en-AU", "folios", {
    toggleNavigator: "List&hellip;",
    viewer: {
        filters: {
            search: "Search folios",
            tags: "Hint: Tap/click on tags in a folio to find similarly-tagged folios",
            author: function(a) {
                return "Only folios written by " + a
            }
        }
    }
}),
Locale.define("en-AU", "programme", {
    lessonHasWisp: "This lesson has an associated online lesson",
    lessonHasResource: "This lesson has an associated resource",
    cover: "Cover page",
    onenoteLabel: "OneNote",
    myed: {
        label: "myEdOnline",
        connect: "Connect to myEdOnline",
        library: "Create quests",
        libraryT: "Create myEdOnline quests"
    },
    turnitin: {
        label: "Turnitin"
    }
}),
Locale.define("en-AU", "calendar", {
    adhocEntry: "This is a calendar class — click to access the quickbar",
    eventEntry: "This is an event — click to access the quickbar",
    appointmentEntry: "Tap or click to view appointment details",
    editEntry: "Edit entry…",
    newEntry: "New entry",
    privateEvent: "Private event",
    cloneEntry: "Clone instances of this entry",
    deleteSingle: "Delete this instance only",
    deleteFuture: "Delete this and all future instances",
    message: {
        title: "Direqt message recipients",
        all: "All recipients",
        owner: "Owner only",
        staff: "Staff invitees only",
        student: "Student invitees only",
        contact: "Guardian invitees only"
    },
    deleteInstancesT: function(a) {
        return "Delete " + a.escapeHTML() + " entries?"
    },
    clone: {
        title: function(a) {
            return "Clone instances of " + a.escapeHTML()
        },
        from: "Source range",
        fromDescription: "The date range that will act as the template, from which entries will be copied",
        to: "Target range",
        toDescription: "Entries from the source range will be repeated to fill the target range",
        deleteExisting: "Clear existing",
        deleteDescription: "Delete pre-existing entries from the target range prior to copying.",
        rangeError: 'The "source" and "target" ranges cannot overlap.',
        rangeExcess: 'The "target" date range is too large.',
        cloneSuccessfullT: "Successfully cloned",
        cloneSuccessfull: "Your events have been successfully cloned.",
        cloneUnSuccessfullT: "Cloning unsuccessful",
        cloneUnSuccessfull: (a,b)=>"Attempted to create " + a + " instances, but the maximum number of instances allowed is " + b
    },
    class: {
        datetime: "From",
        room: "Room",
        staff: "Teacher",
        subject: "Subject",
        term: "Timetable period",
        attendance: "Allow attendance",
        number: "Class number"
    },
    event: {
        appointment: "Appointment",
        addBooking: "Add item booking",
        datetime: "From",
        details: "Event details",
        createT: function() {
            return window.user && "staff" === user.type ? "Create a new appointment or event" : "Create a new appointment"
        },
        editT: function() {
            return window.user && "staff" === user.type ? "Edit appointment or event" : "Edit appointment"
        },
        editBooking: "Manage item booking",
        event: "Event",
        staff: "Organiser",
        notes: "Notes",
        privacy: "Private",
        room: "Room",
        selectRoom: "Select a room where the event occurs",
        selectType: "Select an event type",
        titlePlaceholder: "Title…",
        type: "Type",
        descriptions: {
            type: "Appointments give the opportunity for invitees to reply, events are mandatory for attendees",
            privacy: "The details of private events are only visible to admins and invitees"
        },
        attending: function(a, b) {
            var c, d, e = [];
            return a ? (e.push("This person"),
            c = "is",
            d = "has") : (e.push("You"),
            c = "are",
            d = "have"),
            e.push({
                confirmed: c,
                maybe: "may be",
                declined: c,
                default: d
            }[b || "default"]),
            e.push({
                confirmed: "attending",
                maybe: "attending",
                declined: "not attending",
                default: "not responded"
            }[b || "default"]),
            e.join(" ")
        },
        reply: {
            confirmAll: "Attending this and all future occurrences",
            confirmed: "Attending",
            maybe: "Maybe",
            declineAll: "Not attending this or any future occurrences",
            declined: "Not attending",
            default: "Not responded"
        },
        replyT: "Will you be attending this appointment?",
        replyFuture: "Apply to following",
        maxInvitees: "You have reached the maximum number of invitees allowed ({n})",
        invitees: {
            appointment: function(a) {
                var b = [];
                return a && a.attending && b.push(a.attending + " attending"),
                a && a.maybe && b.push(a.maybe + " maybe"),
                a && a.declined && b.push(a.declined + " declined"),
                a && a.unresponded && b.push(a.unresponded + " unresponded"),
                b.join(", ")
            },
            event: function(a) {
                return a ? 1 === a ? "One invitee" : a + " invitees" : "No invitees"
            }
        }
    }
}),
Locale.define("en-AU", "filterBar", {
    selectPersons: function(a) {
        var b = "";
        return a ? (1 === a ? b += "One staff" : 1 < a && (b += a + " staff"),
        b) : "All staff"
    }
}),
window.user = {},
function() {
    if (window.addEventListener) {
        var a = function(a) {
            a.preventDefault()
        };
        window.addEventListener("dragover", a, !1),
        window.addEventListener("drop", a, !1)
    }
}(),
window.seqta = window.seqta || {},
seqta.base = seqta.base || {},
seqta.base.auth = seqta.base.auth || {},
seqta.base.Authentication = new Class({
    Implements: Options,
    Binds: ["_parseQueryParameters", "_getModeFromLocation", "logout", "_doLogout", "_bootstrap", "_attemptB", "_submit", "_reset", "_submitB", "_processAuth", "_showLoginUI", "_showProvisionUI", "_processAuthB", "googleLoginCallback", "showLoginBox", "check", "checkAny", "checkAll"],
    _attempts: 0,
    _attemptsB: 0,
    _opQueue: null,
    _reauthDlg: null,
    _loginUI: null,
    _personType: null,
    _lastLoginResponse: null,
    _modes: {
        normal: "normal",
        token: "token"
    },
    _mode: null,
    _query: null,
    options: {
        posters: [],
        productImage: "",
        urls: {
            login: "login",
            logout: "logout",
            recover: "recover"
        }
    },
    initialize: function(a) {
        this.setOptions(a),
        this._query = this._parseQueryParameters(location.search),
        this._mode = this._getModeFromLocation(this._query),
        this._opQueue = [],
    },
    _parseQueryParameters: function(a) {
        return a && a.startsWith("?") && 1 < a.length ? a.substring(1).parseQueryString() : null
    },
    _getModeFromLocation: function(a) {
        return a && a.response_type ? this._modes.token : this._modes.normal
    },
    logout: function() {
        var b = seqta.chrome || {};
        b._currentPageInstance && b._currentPageInstance.isDirty && b._currentPageInstance.isDirty() ? new seqta.ui.SlidePane({
            compact: !0,
            onDiscard: this._doLogout
        }).showConfirm(Locale.get("general.reallyLogoutT"), Locale.get("general.reallyLogout"), ["discard", "cancel"]) : this._doLogout()
    },
    _doLogout: function() {
        global.clear(),
        window.onbeforeunload = null,
        window.zE && window.zE.logout && window.zE(()=>window.zE.logout()),
        this._lastLoginResponse && this._lastLoginResponse.saml && 1 === this._lastLoginResponse.saml.length && this._lastLoginResponse.saml[0].slo ? window.location.href = "/saml2?logout" : ajax.send(this.options.urls.logout, {}, function() {
            $wait(),
            window.location.reload()
        })
    },
    _bootstrap: function() {
        if (this._query && this._query.saml_error ? (this._showLoginUI({
            back: !0
        }),
        this._loginUI.invalidate(1, this._query.saml_error, this._query.username)) : this._attempt(),
        this._query && window.history.replaceState) {
            let a = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.hash;
            window.history.replaceState({
                path: a
            }, "", a)
        }
    },
    _attempt: function() {
        var a = {};
        if (a.mode = this._mode,
        a.query = this._query,
        a.redirect_url = window.location.href,
        this._attempts = 0,
        !a.query || "true" !== a.query.force && !0 !== a.query.force)
            ajax.send(this.options.urls.login, a, this._processAuth);
        else {
            const b = new XMLHttpRequest;
            b.open("POST", Configuration.baseURL + this.options.urls.logout),
            b.setRequestHeader("Content-type", "application/json; charset=utf-8"),
            b.send("{}"),
            b.onload = (()=>ajax.send(this.options.urls.login, a, this._processAuth)),
            b.onerror = (()=>ajax.send(this.options.urls.login, a, this._processAuth))
        }
    },
    _attemptB: function() {
        ajax.send(this.options.urls.login, {}, this._processAuthB)
    },
    _submit: function(a, b) {
        if (a && b) {
            var c = {
                username: a,
                password: b
            };
            c.mode = this._mode,
            c.query = this._query,
            this._attempts += 1,
            ajax.send(this.options.urls.login, c, this._processAuth)
        }
    },
    _reset: function(a) {
        a && ajax.send(this.options.urls.recover, {
            mode: "request",
            email: a
        })
    },
    _submitB: function() {
        this._attemptsB += 1;
        var a = this.inputUserName.getValue()
          , b = this.inputPassword.getValue();
        this._reauthDlg.hide(),
        this.inputUserName = null,
        this.inputPassword = null,
        ajax.send(this.options.urls.login, {
            username: a,
            password: b
        }, this._processAuthB)
    },
    _processAuth: function(a) {
        if ($(document.body).addClass(a.type),
        this._personType = a.type,
        a.id)
            return msg.send("login.authenticated"),
            this._permissions = a.permissions || [],
            this._lastLoginResponse = a,
            user.loadUser(a),
            void (this._mode === this._modes.normal ? ((seqta.bootstrap || SEQTATeachModules.chrome.bootstrap)(this.logout),
            this._loginUI && this._loginUI.toElement().dispose(),
            tools.isOldBrowser && $alertFixed(Locale.get("browser.oldBrowser", [Browser.name, Browser.platform])),
            dataStore.retrieve("storage", function(a) {
                var c;
                "staff" === user.type && (c = this.check("data.edit"),
                ("WARNING" === a.component.userfiles && c || "DANGER" === a.component.userfiles || "CRITICAL" === a.component.userfiles) && $alertFixed(Locale.get("general.storageFullT"), Locale.get("general.storageFull")))
            }
            .bind(this)),
            user.masqueradeUserDesc && $alertFixed(Locale.get("general.masqueradeBanner").replace("{m}", user.masqueradeUserDesc).replace("{u}", user.userDesc))) : this._mode === this._modes.token && (!this._loginUI && this._showLoginUI(a),
            this._loginUI.requestToken(this._query, a.app, a.scopes)));
        if (0 === this._attempts) {
            this._showLoginUI(a);
            var b = location.hash.startsWith("#") ? location.hash.substr(1) : location.hash
              , c = b.indexOf("?")
              , d = (b.substr(c + 1) || "").parseQueryString();
            return d.recovery && this._showProvisionUI(d),
            void ("403" === a.status && this._loginUI.invalidate(this._attempts, a.status, a.username))
        }
        this._loginUI && this._loginUI.invalidate(this._attempts, a.status, a.username)
    },
    _showLoginUI: function(a) {
        var b = a.reset_link || a.basic && a.reset && "tutor" !== a.type;
        this._loginUI = new seqta.base.auth.Login({
            productImage: this.options.productImage,
            defaultBackground: this.options.defaultBackground,
            files: a.files,
            logo: a.logo,
            message: a.message,
            basic: {
                enabled: !!a.basic,
                reset: b
            },
            resetLink: a.reset_link,
            google: {
                enabled: !!a.google,
                parameters: a.google,
                callback: "seqta.auth.googleLoginCallback"
            },
            back: a.back,
            saml: a.saml || [],
            siteName: a["site.name"],
            onLogin: this._submit,
            onReset: this._reset
        }),
        document.body.grab(this._loginUI)
    },
    _showProvisionUI: function(a) {
        this._loginUI.provision(a.recovery, this._submit, this._reset)
    },
    _processAuthB: function(a) {
        if (a.id) {
            for (msg.send("login.authenticated"),
            this._permissions = a.permissions || [],
            user.loadUser(a); 0 < this._opQueue.length; ) {
                var b = this._opQueue.shift();
                b.f ? ajax.uploadDroppedFile(b.u, b.f, b.c, null, null, b.e) : ajax.send(b.u, b.m, b.c)
            }
            (seqta.bootstrap || SEQTATeachModules.chrome.bootstrap)(this.logout),
            this._loginUI && this._loginUI.toElement().dispose(),
            this.inputUserName = null,
            this.inputPassword = null
        } else
            this.showLoginBox()
    },
    googleLoginCallback: function(a) {
        if (a) {
            let b = {};
            this._attempts += 1,
            b.googleToken = a.credential,
            ajax.send(this.options.urls.login, b, function(a) {
                a.id ? window.location.reload() : this._processAuth(a)
            }
            .bind(this))
        }
    },
    showLoginBox: function(a, b, c, d, e) {
        var f;
        if (!this.inputUserName && !this.inputPassword) {
            f = "",
            f += 1 < this._attempts ? '<p class="err">' + Locale.get("general.loginError") + "</p>" : "<p>" + Locale.get("general.loginSession") + "</p>";
            var g = new Element("form",{
                id: "login-form",
                events: {
                    submit: function(a) {
                        a.preventDefault(),
                        a.stopPropagation(),
                        this._submitB()
                    }
                    .bind(this)
                },
                html: f,
                class: "loginBox"
            });
            1 < this._attempts && audio.play("error"),
            this.inputUserName = new seqta.ui.ShortText({
                defaultValue: user.userName
            }),
            g.grab(this.inputUserName),
            this.inputUserName.disable(),
            this.inputPassword = new seqta.ui.ShortText({
                defaultValue: "",
                type: "password"
            }),
            g.grab(this.inputPassword);
            var h = new seqta.ui.Button({
                title: Locale.get("general.logOn"),
                defaultValue: Locale.get("general.logOn"),
                type: "submit"
            });
            g.grab(h);
            var i = Locale.get("general.sessionExpired");
            this._reauthDlg = new seqta.ui.SlidePane({
                compact: !0,
                disposable: !1
            }),
            this._reauthDlg.show(i, g, !1),
            $(this.inputPassword).focus()
        }
        if (a) {
            var j = {};
            j.u = a,
            j.m = b,
            j.c = c,
            j.f = d,
            j.e = e,
            this._opQueue.push(j)
        }
    },
    check: function(a) {
        return this._permissions.contains(a)
    },
    checkAny: function(a) {
        a = Array.convert(a);
        for (var b = 0; b < a.length; b++)
            if (this._permissions.contains(a[b]))
                return !0;
        return !1
    },
    checkAll: function(a) {
        a = Array.convert(a);
        for (var b = 0; b < a.length; b++)
            if (!this._permissions.contains(a[b]))
                return !1;
        return !0
    }
}),
seqta.base.part.coneqtMessage = {},
seqta.base.part.SIP = {},
Locale.define("en-AU", "authentication", {
    brand: "SEQTA",
    login: "Log in",
    reset: {
        label: "Forgot your password?",
        process: "Reset my password",
        title: "Forgot your password?",
        prose: "Enter your email address and if we can find an account with those details, you’ll receive an email with further instructions.",
        back: "Cancel",
        sent: {
            title: "Email sent",
            prose: "To access your account, follow the instructions in the email sent to the address you specified.",
            addendum: "Didn’t receive the password reset email? Make sure you entered the correct email address, and check your spam folder.",
            back: "Log in now"
        }
    },
    provision: {
        title: {
            account: "Set up your account",
            password: "Set your new password",
            invalid: "Invalid link",
            expired: "Expired link"
        },
        prose: {
            account: "Enter the username and password you want to use to access SEQTA.",
            password: "Enter the new password for your account. Passwords must be 8 to 64 characters in length.",
            invalid: "This password reset link is invalid.",
            expired: "This password reset link has expired. Please resubmit your request using the link below.",
            expiredLink: "Obtain a new password reset link",
            sent: "Email has been sent. If you do not see this email, please contact your school’s IT department."
        },
        username: "Desired username",
        usernameTaken: 'Sorry, the username "{username}" is unavailable.',
        newPassword: "Desired password",
        confirmPassword: "Confirm password",
        passwordStrengthLabel: "Password strength",
        passwordWarningLabel: "Password warnings",
        passwordSuggestionsLabel: "Password suggestions",
        passwordComplexity: "Passwords must be 8-64 characters in length.",
        passwordComplexityLabel: "Password requirements",
        process: {
            account: "Log in",
            password: "Reset my password and login"
        },
        mismatch: "Those passwords don’t match. Try entering them again."
    },
    username: "User name",
    email: "Email address",
    password: "Password",
    backToLogin: "Return to log in screen",
    badRequest: "An error has occurred handling your request. Please try again or contact your school’s IT department.",
    invalidCredentials: "The user name or password you entered doesn’t match our records.",
    redirecting: "Please wait, you will be automatically redirected.",
    unassignedUsername: function(a) {
        return "The username " + a.escapeHTML() + " is valid, but it doesn’t match our records. Please contact your school’s IT department."
    },
    scopes: {
        allow: "Allow",
        deny: "Deny",
        preCaption: "Grant ",
        postCaption: " access to:",
        scopeTitle: function(a, b, c) {
            var d = "";
            return a || b ? (a ? (d += "View",
            b && (d += " and edit")) : b && (d += "Edit"),
            d + " " + c) : null
        },
        peopleAppendix: "person details",
        peopleSubtitle: "General information about staff and students",
        curriculumAppendix: "curriculum details",
        curriculumSubtitle: "Programmes, lessons, assessments and marksbook",
        success: function(a) {
            return "You have granted authorisation to " + a
        },
        fail: function(a) {
            return "Unable to grant authorisation to " + a
        },
        badApp: function(a) {
            return "The specified application ID is not valid or has been deactivated; " + a
        },
        badResponseType: function(a) {
            return "The response type requested by application ID " + a + " is not valid or currently supported"
        },
        denied: function(a) {
            return "You have denied authorisation to " + a
        }
    }
}),
window.seqta = window.seqta || {},
seqta.base = seqta.base || {},
seqta.base.auth = seqta.base.auth || {},
seqta.base.auth.Login = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "invalidate", "_initUI", "_setBackdrop", "_setLogo", "_drawHeader", "_drawLoginBox", "_drawReset", "_getPoster", "_submit", "_reset", "provision", "requestToken", "_processReset", "_initGoogleAuth", "_getGoogleAuthUI", "_drawOldBrowserWarning"],
    options: {
        files: [],
        defaultBackground: "none",
        productImage: "",
        resetLink: null,
        message: null,
        basic: {
            enabled: !0,
            reset: !0
        },
        google: {
            enabled: !1,
            callback: null,
            parameters: null,
            clientjs: "https://accounts.google.com/gsi/client"
        },
        brandingURL: "branding?file=",
        siteName: "",
        saml: []
    },
    _element: null,
    _elements: null,
    _resetUI: null,
    _provisionUI: null,
    initialize: function(a) {
        this.setOptions(a),
        this._initUI()
    },
    toElement: function() {
        return this._element
    },
    invalidate: function(a, b, c) {
        this._elements.loginBox && this._elements.loginBox.username && this._elements.loginBox.username.set(""),
        this._elements.loginBox && this._elements.loginBox.password && this._elements.loginBox.password.set(""),
        this._elements.invalidCredentials && ("400" === b ? (this._elements.invalidCredentials.set("html", Locale.get("authentication.badRequest")),
        this._elements.invalidCredentials.addClass("shown")) : "403" === b ? (this._elements.invalidCredentials.set("html", Locale.get("authentication.unassignedUsername", c || "[undefined]")),
        this._elements.invalidCredentials.addClass("shown")) : a && (this._elements.invalidCredentials.set("html", Locale.get("authentication.invalidCredentials")),
        this._elements.invalidCredentials.addClass("shown"),
        1 < a && this._elements.reset && this._elements.reset.resetLink && $(this._elements.reset.resetLink).addClass("emphasised").highlight())),
        this._elements.loginBox && this._elements.loginBox.username && $(this._elements.loginBox.username).focus()
    },
    _initUI: function() {
        if (this._element = new Element("div",{
            class: "login"
        }),
        this._elements = {
            auth: new Element("div",{
                class: "auth"
            }),
            loginBox: this._drawLoginBox(this.options),
            invalidCredentials: new Element("div",{
                class: "invalidCredentials"
            }),
            backButton: this._drawBackButton(this.options),
            reset: this._drawReset(this.options),
            siteName: new Element("div",{
                class: "siteName",
                text: this.options.siteName || ""
            }),
            message: new Element("div",{
                class: "message",
                text: this.options.message || ""
            }),
            alternatives: new Element("div",{
                class: "alternatives"
            }),
            googleAuth: this._drawGoogleAuth(this.options),
            oldBrowserWarning: tools.isOldBrowser ? this._drawOldBrowserWarning() : null,
            saml: this.options.saml.map(this._drawSAMLAuth)
        },
        this._setBackdrop(this.options),
        this._setLogo(this.options),
        1 !== this.options.saml.length || this.options.google.enabled || this.options.basic.enabled) {
            for (var a = 0; a < this.options.saml.length; a++)
                if (this.options.saml[a].autologin)
                    return void this._autosubmitSAML(this.options.saml[a]);
            this._elements.alternatives.adopt(this._elements.googleAuth && this._elements.googleAuth.container, this._elements.saml),
            this._elements.googleAuth && document.head.adopt(this._elements.googleAuth.scriptGoogleAuthCallback, this._elements.googleAuth.scriptGoogleAuthClientJS),
            this._element.adopt(this._elements.backdrop, new Element("div",{
                class: "branding"
            }).adopt(tools.getCommonImage("seqta-reverse.svg", Locale.get("authentication.brand"), !0, "seqta"), new Element("img",{
                class: "productLogo",
                src: this.options.productImage
            })), this._elements.logo, this._elements.auth.adopt(this._elements.loginBox && this._elements.loginBox.container, this._elements.invalidCredentials, this._elements.backButton && this._elements.backButton.container, this._elements.siteName, this._elements.message, this._elements.reset && this._elements.reset.container, this._elements.alternatives), this._elements.oldBrowserWarning)
        } else
            this._autosubmitSAML(this.options.saml[0])
    },
    _setBackdrop: function(a) {
        let b = a.defaultBackground
          , c = !1;
        if (a.files && a.files.length && (c = !0,
        b = Configuration.baseURL + a.brandingURL + a.files.getRandom()),
        this._elements.backdrop = new Element("div",{
            class: "backdrop",
            styles: {
                "background-image": c ? "url(" + b + ")" : b
            }
        }),
        c) {
            let a = new Element("img",{
                src: b
            });
            a.addEventListener("load", function() {
                (1024 > a.width || 768 > a.height) && this._elements.backdrop.addClass("blurred")
            }
            .bind(this))
        }
    },
    _setLogo: function(a) {
        a.logo && (this._elements.logo = new Element("img",{
            class: "logo",
            src: Configuration.baseURL + a.brandingURL + a.logo
        }))
    },
    _drawLoginBox: function(a) {
        if (a.basic.enabled) {
            var b = {
                container: new Element("div",{
                    class: "loginBox"
                }),
                form: new Element("form"),
                username: new seqta.ui.ShortText({
                    className: "username",
                    required: !0,
                    size: 10
                }),
                password: new seqta.ui.ShortText({
                    className: "password",
                    type: "password",
                    required: !0,
                    size: 10
                }),
                submit: new seqta.ui.Button({
                    type: "submit",
                    defaultValue: Locale.get("authentication.login") + '<svg width="24" height="24" viewBox="0 0 24 24"><path fill="#000" d="M8.578 16.359l4.594-4.594-4.594-4.594 1.406-1.406 6 6-6 6z"></path></svg>',
                    onClick: this._submit
                })
            };
            return b.form.adopt(new Element("label").adopt(new Element("span",{
                html: Locale.get("authentication.username")
            }), b.username), new Element("label").adopt(new Element("span",{
                html: Locale.get("authentication.password")
            }), b.password), b.submit),
            b.container.grab(b.form),
            $(b.username).focus(),
            b
        }
    },
    _drawBackButton: function(a) {
        if (a.back)
            return {
                container: new Element("a",{
                    href: "/",
                    text: Locale.get("authentication.backToLogin")
                })
            }
    },
    _drawReset: function(a) {
        if (a.resetLink || a.basic.enabled && a.basic.reset) {
            var b = {
                container: new Element("div",{
                    class: "reset"
                })
            };
            return b.resetLink = this.options.resetLink ? new Element("a",{
                html: Locale.get("authentication.reset.label"),
                target: "_blank",
                href: a.resetLink
            }) : new seqta.ui.Button({
                extraClass: "forgot",
                defaultValue: Locale.get("authentication.reset.label"),
                onClick: this._reset
            }),
            b.container.adopt(b.resetLink),
            b
        }
    },
    _drawGoogleAuth: function(a) {
        if (a.google.enabled && a.google.callback && a.google.clientjs) {
            var b = a.google.parameters
              , c = {
                container: new Element("div",{
                    class: "googleLogin"
                }),
                g_id_onload: new Element("div",{
                    id: "g_id_onload",
                    "data-client_id": b.client_id,
                    "data-callback": "_googleAuthSuccess",
                    "data-auto_prompt": !1
                }),
                g_id_signin: new Element("div",{
                    class: "g_id_signin",
                    "data-type": "standard"
                }),
                scriptGoogleAuthCallback: new Element("script",{
                    type: "text/javascript",
                    html: "window._googleAuthSuccess = window._googleAuthFailure = function(response) { " + a.google.callback + "(response); }"
                }),
                scriptGoogleAuthClientJS: new Element("script",{
                    type: "text/javascript",
                    src: a.google.clientjs
                })
            };
            return c.container.adopt(c.g_id_onload, c.g_id_signin),
            c
        }
    },
    _submit: function(a) {
        a && a.stop && a.stop();
        var b = this._elements.loginBox && this._elements.loginBox.username.get()
          , c = this._elements.loginBox && this._elements.loginBox.password.get();
        b && c && this.fireEvent("login", [b, c])
    },
    _hideUI: function() {
        this._elements.loginBox && this._elements.loginBox.container.hide(),
        this._elements.invalidCredentials && this._elements.invalidCredentials.hide(),
        this._elements.reset && this._elements.reset.container.hide(),
        this._elements.alternatives && this._elements.alternatives.hide(),
        this._elements.oldBrowserWarning && this._elements.oldBrowserWarning.hide(),
        this._elements.siteName && this._elements.siteName.hide(),
        this._elements.message && this._elements.message.hide()
    },
    _reset: function() {
        this._elements.loginBox && (this._elements.loginBox.container.empty(),
        this._provisionUI && this._provisionUI.toElement().hide(),
        this._resetUI = new seqta.base.auth.Reset({
            onSubmit: this._processReset
        }),
        this._hideUI(),
        this._elements.auth.grab(this._resetUI))
    },
    provision: function(a, b) {
        this._provisionUI = new seqta.base.auth.Provision({
            key: a,
            onProvisioned: b,
            onResubmit: this._reset
        }),
        this._hideUI(),
        this._elements.auth.grab(this._provisionUI)
    },
    requestToken: function(a, b, c) {
        this._hideUI(),
        this._element.grab(new seqta.base.auth.Token({},a,b,c))
    },
    _processReset: function(a) {
        a && this.fireEvent("reset", a)
    },
    _drawSAMLAuth: function(a) {
        var b = new Element("form",{
            method: a.method,
            action: a.url
        });
        b.adopt(new Element("input",{
            type: "hidden",
            name: "SAMLRequest",
            value: a.request
        })),
        a.relaystate && b.adopt(new Element("input",{
            type: "hidden",
            name: "RelayState",
            value: decodeURIComponent(a.relaystate)
        })),
        b.adopt(new Element("input",{
            type: "hidden",
            name: "SigAlg",
            value: a.sigalg
        })),
        b.adopt(new Element("input",{
            type: "hidden",
            name: "Signature",
            value: a.signature
        }));
        var c = new seqta.ui.Button({
            defaultValue: a.label || Locale.get("authentication.login"),
            type: "submit"
        });
        return b.grab(c),
        b
    },
    _autosubmitSAML: function(a) {
        var b = this._drawSAMLAuth(a);
        this._element.adopt(this._elements.backdrop, new Element("div",{
            class: "branding"
        }).adopt(tools.getCommonImage("seqta-reverse.svg", Locale.get("authentication.brand"), !0, "seqta"), new Element("img",{
            class: "productLogo",
            src: this.options.productImage
        })), this._elements.auth.adopt(this._elements.invalidCredentials, this._elements.siteName, this._elements.message, b), this._elements.oldBrowserWarning),
        this._elements.invalidCredentials.set("html", Locale.get("authentication.redirecting")),
        this._elements.invalidCredentials.addClass("shown"),
        setTimeout(function() {
            b.submit()
        }, 100)
    },
    _drawOldBrowserWarning: function() {
        return new Element("div",{
            class: "browserWarning"
        }).adopt(new Element("div",{
            class: "title",
            html: Locale.get("browser.oldBrowserT")
        }), new Element("div",{
            class: "prose",
            html: Locale.get("browser.oldBrowser", [Browser.name, Browser.platform])
        }))
    }
}),
window.seqta = window.seqta || {},
seqta.base = seqta.base || {},
seqta.base.auth = seqta.base.auth || {},
seqta.base.auth.Provision = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "_initUI", "_receiveInfo", "_showProvisionUI", "_showInvalidCodeMessage", "_submit", "_submitted", "_reset", "displaySentMessage"],
    options: {
        key: null,
        urls: {
            provision: "recover"
        }
    },
    _element: null,
    _usernameInput: null,
    _usernameTaken: null,
    _passwordInput: null,
    _confirmPasswordInput: null,
    _submitButton: null,
    _resubmitButton: null,
    _sentMessage: null,
    initialize: function(a) {
        this.setOptions(a),
        this._initUI(),
        ajax.send(this.options.urls.provision, {
            mode: "info",
            recovery: this.options.key
        }, this._receiveInfo)
    },
    toElement: function() {
        return this._element
    },
    _initUI: function() {
        this._element = new Element("form",{
            class: "provision"
        })
    },
    _receiveInfo: function(a) {
        a.status && "304" !== a.status ? this._showInvalidCodeMessage(a) : this._showProvisionUI(a)
    },
    _showProvisionUI: function(a) {
        var b = !a.username;
        b && (this._usernameInput = new seqta.ui.ShortText({
            className: "username"
        }),
        this._usernameTaken = new Element("div",{
            class: "usernameTaken"
        }).hide());
        var c = new Element("div",{
            class: "mismatch",
            html: Locale.get("authentication.provision.mismatch")
        }).hide();
        this._passwordInput = new seqta.ui.ShortText({
            className: "password",
            type: "password",
            required: !0
        }),
        this._confirmPasswordInput = new seqta.ui.ShortText({
            className: "password-confirm",
            type: "password",
            required: !0,
            onPause: function(a) {
                var b = this._passwordInput.get();
                a && b && (a === b ? c.hide() : c.show())
            }
            .bind(this)
        }),
        this._submitButton = new seqta.ui.Button({
            type: "submit",
            defaultValue: Locale.get("authentication.provision.process." + (b ? "account" : "password")),
            onClick: this._submit.bind(null, a.username)
        }),
        this._element.adopt(new Element("div",{
            class: "title",
            html: Locale.get("authentication.provision.title." + (b ? "account" : "password"))
        }), new Element("div",{
            class: "prose",
            text: Locale.get("authentication.provision.prose." + (b ? "account" : "password")).substitute({
                username: a.username ? a.username.escapeHTML() : null
            })
        }), new Element("div",{
            class: "loginBox"
        }).adopt(this._usernameInput ? new Element("label").adopt(new Element("span",{
            text: Locale.get("authentication.provision.username")
        }), this._usernameInput) : null, new Element("label").adopt(new Element("span",{
            text: Locale.get("authentication.provision.newPassword")
        }), this._passwordInput), new Element("label").adopt(new Element("span",{
            text: Locale.get("authentication.provision.confirmPassword")
        }), this._confirmPasswordInput), this._usernameTaken, c, new Element("div",{
            class: "field passwordComplexityError",
            text: Locale.get("authentication.provision.passwordComplexity")
        }), new Element("label",{
            class: "field passwordWarning"
        }).adopt(new Element("span",{
            text: Locale.get("authentication.provision.passwordWarningLabel")
        }), new Element("div",{
            class: "passwordWarningText"
        })), new Element("label",{
            class: "field passwordSuggestions"
        }).adopt(new Element("span",{
            text: Locale.get("authentication.provision.passwordSuggestionsLabel")
        }), new Element("div",{
            class: "passwordSuggestionsText"
        })), this._submitButton)),
        this._element.getElement("input.password").addEventListener("keyup", tools.newPasswordComplexityListener)
    },
    _showInvalidCodeMessage: function(a) {
        "403" === a.status ? (this._sentMessage = new Element("div",{
            class: "sent",
            text: Locale.get("authentication.provision.prose.sent")
        }),
        this._resubmitButton = new seqta.ui.Button({
            extraClass: "resetButton",
            defaultValue: Locale.get("authentication.provision.prose.expiredLink"),
            onClick: this._reset
        }),
        this._element.adopt(new Element("div",{
            class: "title",
            text: Locale.get("authentication.provision.title.expired")
        }), new Element("div",{
            class: "prose",
            text: Locale.get("authentication.provision.prose.expired")
        }), this._resubmitButton, this._sentMessage).addClass("invalid"),
        this._sentMessage.hide()) : this._element.adopt(new Element("div",{
            class: "title",
            text: Locale.get("authentication.provision.title.invalid")
        }), new Element("div",{
            class: "prose",
            text: Locale.get("authentication.provision.prose.invalid")
        })).addClass("invalid")
    },
    _submit: function(a, b) {
        b && b.stop && b.stop(),
        a = this._usernameInput ? this._usernameInput.get().trim() : a;
        var c = this._passwordInput.get();
        c === this._confirmPasswordInput.get() && c && (this.options.defaultUsername || a) && !(8 > c.length) && !(64 < c.length) && ajax.send(this.options.urls.provision, {
            mode: "recover",
            blacklist: !0,
            recovery: this.options.key,
            username: a,
            password: c
        }, this._submitted.bind(null, a))
    },
    _submitted: function(a, b) {
        return "403" === b.status ? void (this._usernameTaken && this._usernameInput && (this._usernameTaken.set("html", Locale.get("authentication.provision.usernameTaken").substitute({
            username: a
        })).show(),
        this._usernameInput.set(""))) : (location.hash = "",
        void this.fireEvent("provisioned", [a, this._passwordInput.get()]))
    },
    _reset: function() {
        window.location.hash = "",
        this.fireEvent("resubmit")
    },
    displaySentMessage: function() {
        this._sentMessage && this._sentMessage.show(),
        this._resubmitButton && this._resubmitButton.disable()
    }
}),
window.seqta = window.seqta || {},
seqta.base = seqta.base || {},
seqta.base.auth = seqta.base.auth || {},
seqta.base.auth.Reset = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "_initUI", "_submit", "_showResetMessage"],
    options: {},
    _element: null,
    _emailInput: null,
    _submitButton: null,
    initialize: function(a) {
        this.setOptions(a),
        this._initUI()
    },
    toElement: function() {
        return this._element
    },
    _initUI: function() {
        this._element = new Element("form",{
            class: "reset"
        }),
        this._emailInput = new seqta.ui.ShortText({
            className: "email",
            type: "email",
            required: !0
        }),
        this._submitButton = new seqta.ui.Button({
            type: "submit",
            defaultValue: Locale.get("authentication.reset.process"),
            onClick: this._submit
        }),
        this._element.adopt(new Element("div",{
            class: "title",
            html: Locale.get("authentication.reset.title")
        }), new Element("div",{
            class: "prose",
            html: Locale.get("authentication.reset.prose")
        }), new Element("div",{
            class: "loginBox"
        }).adopt(new Element("label").adopt(new Element("span",{
            html: Locale.get("authentication.email")
        }), this._emailInput), this._submitButton, new seqta.ui.Button({
            extraClass: "back",
            defaultValue: Locale.get("authentication.reset.back"),
            onClick: function() {
                window.location.reload()
            }
        }))),
        $(this._emailInput).focus()
    },
    _submit: function(a) {
        a.preventDefault(),
        a.stop();
        var b = this._emailInput.get().trim();
        b && (this.fireEvent("submit", b),
        this._showResetMessage())
    },
    _showResetMessage: function() {
        this._element.empty().adopt(new Element("div",{
            class: "title",
            html: Locale.get("authentication.reset.sent.title")
        }), new Element("div",{
            class: "prose",
            html: Locale.get("authentication.reset.sent.prose")
        }), new Element("div",{
            class: "addendum",
            html: Locale.get("authentication.reset.sent.addendum")
        }), new seqta.ui.Button({
            extraClass: "back",
            defaultValue: Locale.get("authentication.reset.sent.back"),
            onClick: function() {
                window.location.reload()
            }
        }))
    }
}),
window.seqta = window.seqta || {},
seqta.base = seqta.base || {},
seqta.base.auth = seqta.base.auth || {},
seqta.base.auth.Token = new Class({
    Implements: [Options, Events],
    Binds: ["_areScopesGranted", "toElement", "_initPrompt", "_createCaption", "_createTable", "_createActions", "_getScopesMetadata", "_requestToken", "_tokenReceived", "_badApplication", "_badResponseType", "_deny", "_error", "_redirect", "_getRedirectUri", "_parseAbsoluteURI"],
    options: {
        type: null,
        key: null,
        urls: {
            token: "token"
        },
        defaultScope: "people:read,curriculum:read",
        allowedScopes: ["people", "curriculum"]
    },
    _element: null,
    _query: null,
    _app: null,
    _scopes: null,
    initialize: function(a, b, c, d) {
        this.setOptions(a),
        this._query = b,
        this._app = c,
        this._element = new Element("div",{
            class: "scopes"
        });
        var e = b.scope || this.options.defaultScope;
        this._scopes = e.split(","),
        this._verifyRequest(d)
    },
    _verifyRequest: function(a) {
        return this._query && "token" === this._query.response_type ? this._app ? void (this._areScopesGranted(this._scopes, a) ? this._requestToken(this._query, this._app) : this._initPrompt()) : void this._badApplication(this._query, null) : void this._badResponseType(this._query, null)
    },
    _areScopesGranted: function(a, b) {
        return !(!b || !a.every(function(a) {
            return b.contains(a)
        }))
    },
    toElement: function() {
        return this._element
    },
    _initPrompt: function() {
        this._elements = {
            caption: this._createCaption(this.options, this._query, this._app),
            table: this._createTable(this.options, this._query, this._scopes),
            actions: this._createActions(this._requestToken.bind(null, this._query, this._app), this._deny.bind(null, this._query, this._app))
        },
        this._element.adopt(this._elements.caption, this._elements.table, this._elements.actions)
    },
    _createCaption: function(a, b, c) {
        var d, e = new Element("span",{
            class: "application",
            text: c.name
        });
        return c.imageUrl && (e.hide(),
        d = new Element("img",{
            class: "application",
            src: c.imageUrl,
            events: {
                error: function() {
                    e.show("inline-block"),
                    d.hide()
                }
            }
        })),
        new Element("div",{
            class: "caption"
        }).adopt(new Element("span",{
            class: "preamble",
            text: Locale.get("authentication.scopes.preCaption")
        }), d, e, new Element("span",{
            class: "postamble",
            text: Locale.get("authentication.scopes.postCaption")
        }))
    },
    _createTable: function(a, b, c) {
        var d = this._getScopesMetadata(c);
        return Element("ul").adopt(tools.func.entries(d).map(function(b) {
            if (!a.allowedScopes.contains(b.key))
                return null;
            var c = Locale.get("authentication.scopes." + b.key + "Appendix")
              , d = Locale.get("authentication.scopes." + b.key + "Subtitle");
            return new Element("li").adopt(new Element("div",{
                class: "title",
                html: Locale.get("authentication.scopes.scopeTitle", [b.value.read, b.value.write, c])
            }), new Element("div",{
                class: "subtitle",
                html: d
            }))
        }))
    },
    _createActions: function(a, b) {
        return new Element("div",{
            class: "actions"
        }).adopt(new seqta.ui.Button({
            extraClass: "allow",
            type: "submit",
            defaultValue: Locale.get("authentication.scopes.allow"),
            onClick: a
        }), new seqta.ui.Button({
            extraClass: "deny",
            type: "submit",
            defaultValue: Locale.get("authentication.scopes.deny"),
            onClick: b
        }))
    },
    _getScopesMetadata: function(a) {
        return Object.map(tools.func.groupBy(a, function(a) {
            return a.split(":")[0]
        }), function(a) {
            return !a.first(function(a) {
                return a.contains(":")
            }) || {
                read: !!a.first(function(a) {
                    return a.contains(":read")
                }),
                write: !!a.first(function(a) {
                    return a.contains(":write")
                })
            }
        })
    },
    _requestToken: function(a, b) {
        this._element.empty();
        var c = this._tokenReceived.bind(null, a, b);
        ajax.send(this.options.urls.token, a, c, void 0, void 0, c, !0)
    },
    _tokenReceived: function(a, b, c) {
        var d = new Element("div",{
            class: "message"
        });
        if (c.token) {
            d.set("html", Locale.get("authentication.scopes.success", b.name));
            var e = {
                access_token: c.token,
                token_type: "bearer",
                expires_in: c.expiresIn
            };
            a.scope && (e.scope = a.scope),
            a.state && (e.state = a.state),
            this._redirect(a.redirect_uri, b, e)
        } else
            d.set("html", Locale.get("authentication.scopes.fail", b.name)),
            this._redirect(a.redirect_uri, b, {
                error: "server_error",
                state: a.state || void 0
            });
        this._element.grab(d)
    },
    _badApplication: function(a, b) {
        this._error(a, b, "unauthorized_client", Locale.get("authentication.scopes.badApp", a.client_id))
    },
    _badResponseType: function(a, b) {
        this._error(a, b, "unsupported_response_type", Locale.get("authentication.scopes.badResponseType", a.client_id))
    },
    _deny: function(a, b) {
        this._error(a, b, "access_denied", Locale.get("authentication.scopes.denied", b.name))
    },
    _error: function(a, b, c, d) {
        var e = new Element("div",{
            class: "message"
        });
        e.set("html", d),
        this._redirect(a.redirect_uri, b, {
            error: c,
            state: a.state || void 0
        }),
        this._element.empty(),
        this._element.grab(e)
    },
    _redirect: function(a, b, c) {
        !a && b && b.configs && b.configs.url && (a = b.configs.url.value);
        var d = this._getRedirectUri(a, c);
        d && window.location.assign(d)
    },
    _getRedirectUri: function(a, b) {
        if (!(a = this._parseAbsoluteURI(a)))
            return null;
        var c = a.get("query");
        c = c && c.parseQueryString();
        var d = Object.merge({}, c || {}, b);
        return a.set("query", Object.toQueryString(d)).toString()
    },
    _parseAbsoluteURI: function(a) {
        return a && a.match(/^[A-Za-z]([A-Za-z]|\\d|\\.|\\+|-)*:/g) ? new URI(a) : null
    }
}),
seqta.base.Dashlet = new Class({
    Implements: [Options, Events],
    options: {
        title: "Dashlet",
        icon: null
    },
    _elDashlet: null,
    _elMain: null,
    initialize: function(a) {
        this.setOptions(a),
        this._elDashlet = new Element("div",{
            class: "dashlet " + (this.options.extraClass || "")
        }),
        this._drawDashlet()
    },
    clear: function() {
        this._elMain.empty()
    },
    _drawDashlet: function() {
        this._elMain = new Element("div",{
            class: "content"
        }),
        this._elDashlet.adopt(new Element("div",{
            class: "header"
        }).adopt(new Element("div",{
            class: "title"
        }).adopt(null, new Element("span",{
            html: this.options.title
        })), new Element("div",{
            class: "options"
        }).adopt(this.getToolbar())), this._elMain)
    },
    getToolbar: function() {},
    adopt: function() {
        this._elMain.adopt(arguments)
    },
    toElement: function() {
        return this._elDashlet
    },
    getMain: function() {
        return this._elMain
    }
}),
seqta.base.dashlet.MOTD = new Class({
    Implements: [Options, Events],
    options: {
        urls: {
            load: "dashlet/motd"
        }
    },
    Binds: ["toElement", "getTitle", "_draw", "_receiveData", "_mark", "_isFavourable"],
    _data: null,
    _element: null,
    _message: null,
    _favour: null,
    _favourGraph: null,
    _favourGraphUn: null,
    _marked: null,
    initialize: function(a) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "dashlet-motd"
        }),
        this._draw()
    },
    toElement: function() {
        return this._element
    },
    getTitle: function() {
        return Locale.get("dashlet.motd.title")
    },
    _draw: function() {
        this._message = new Element("div",{
            class: "message"
        }),
        this._favourGraph = new Element("div",{
            class: "graph"
        }),
        this._favourGraphUn = new Element("div",{
            class: "unfavourable"
        }).inject(this._favourGraph),
        this._favour = new Element("div",{
            class: "favour"
        }),
        this._likeButton = new seqta.ui.Button({
            onClick: this._mark.pass(!0),
            extraClass: "favourable",
            defaultValue: tools.getIcon("thumb_up")
        }),
        this._dislikeButton = new seqta.ui.Button({
            onClick: this._mark.pass(!1),
            extraClass: "unfavourable",
            defaultValue: tools.getIcon("thumb_down")
        }),
        this._element.adopt(this._message, this._favour),
        ajax.send(this.options.urls.load, {}, this._receiveData)
    },
    _receiveData: function(a) {
        this._data = a,
        this._data.favourable = this._data.favourable || 0,
        this._data.unfavourable = this._data.unfavourable || 0,
        this._data.total = this._data.favourable + this._data.unfavourable,
        this._data.total && this._favourGraphUn.setStyle("width", this._data.unfavourable / this._data.total * 100 + "%"),
        this._favourGraph.set("title", this._data.favourable),
        this._favourGraphUn.set("title", this._data.unfavourable),
        this._favour.getChildren().dispose(),
        this._favour.adopt(this._dislikeButton, this._favourGraph, this._likeButton);
        var b = 72;
        for (this._message.set("html", this._data.message),
        this._message.setStyle("font-size", b); this._message.scrollHeight > this._message.offsetHeight && 16 < b; )
            b -= 3,
            this._message.setStyle("font-size", b);
        this._data && this._data.favour && (this._isFavourable(this._data.favour) ? ($(this._likeButton).addClass("selected"),
        $(this._dislikeButton).removeClass("selected")) : ($(this._likeButton).removeClass("selected"),
        $(this._dislikeButton).addClass("selected")))
    },
    _mark: function(a) {
        var b = null;
        this._data.favour && (b = this._isFavourable(this._data.favour)),
        (null == b || b !== a) && (this._data.favour = a ? "favourable" : "unfavourable",
        ajax.send(this.options.urls.load, {
            favour: a
        }, this._receiveData),
        a ? ($(this._likeButton).addClass("selected"),
        $(this._dislikeButton).removeClass("selected")) : ($(this._likeButton).removeClass("selected"),
        $(this._dislikeButton).addClass("selected")))
    },
    _isFavourable: function(a) {
        return "favourable" === a
    }
}),
seqta.base.dashlet.Notes = new Class({
    Implements: [Options, Events],
    options: {
        urls: {
            load: "dashlet/notes",
            save: "dashlet/notes"
        }
    },
    Binds: ["cleanup", "toElement", "getTitle", "_draw", "_retrieveData", "_receiveData", "_listNote", "_toggleDeleteMode", "_deleteNote", "_deleteById", "_selectNote", "_addNote", "_editNote", "save", "_processNewNote", "isDirty", "_setDirty", "_annotate"],
    _element: null,
    _actionsBar: null,
    _list: null,
    _editorC: null,
    _editor: null,
    _doneButton: null,
    _addButton: null,
    _dirty: !1,
    _noteSavedBeforeChange: !1,
    _notes: null,
    _editingNote: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._actionsBar = b || new Element("div"),
        this._element = new Element("div",{
            class: "dashlet-notes"
        }),
        msg.register("dashlet.save", this.save),
        this._draw()
    },
    cleanup: function() {
        msg.unregister("dashlet.save", this.save)
    },
    toElement: function() {
        return this._element
    },
    getTitle: function() {
        return Locale.get("dashlet.notes.title")
    },
    _draw: function() {
        this._list = this._list || new Element("ul",{
            class: "magicDelete",
            events: {
                "click:relay(button.toggleDelete, button.cancel)": this._toggleDeleteMode,
                "click:relay(button.delete)": this._deleteNote,
                "click:relay(li)": this._selectNote
            }
        }),
        this._editorC = this._editorC || new Element("div",{
            class: "editor"
        }),
        this._addButton = this._addButton || new seqta.ui.Button({
            onClick: this._addNote,
            defaultValue: '<svg width="24" height="24" viewBox="0 0 24 24" class="" title=""><g style="fill: currentcolor;"><path d="M18.984 12.984h-6v6h-1.969v-6h-6v-1.969h6v-6h1.969v6h6v1.969z"></path></g></svg>'
        }),
        this._doneButton = this._doneButton || new seqta.ui.Button({
            onClick: this.save,
            defaultValue: '<svg width="24" height="24" viewBox="0 0 24 24" class="" title=""><g style="fill: currentcolor;"><path d="M9 16.172l10.594-10.594 1.406 1.406-12 12-5.578-5.578 1.406-1.406z"></path></g></svg>'
        }),
        this._actionsBar.adopt(this._addButton, this._doneButton),
        $(this._addButton).setStyle("display", ""),
        $(this._doneButton).setStyle("display", "none"),
        this._element.adopt(this._list, this._editorC),
        this._retrieveData()
    },
    _retrieveData: function() {
        ajax.send(this.options.urls.load, {
            load: !0
        }, this._receiveData)
    },
    _receiveData: function(a) {
        this._notes = a,
        this._list.getChildren().destroy(),
        this._list.adopt(this._notes.map(this._listNote))
    },
    _listNote: function(a) {
        return this._annotate(a, Locale.get("dashlet.notes.delete"))
    },
    _toggleDeleteMode: function(a, b) {
        b.getParent("li").toggleClass("deleting")
    },
    _deleteNote: function(a, b) {
        var c = b.getParent("li");
        if (c) {
            var d = c.get("data-id").toInt();
            d && this._deleteById(d)
        }
    },
    _deleteById: function(a) {
        if (a) {
            var b = this._list.getFirst("[data-id=" + a + "]");
            b && b.addClass("vanquished"),
            ajax.send(this.options.urls.save, {
                id: a,
                deleted: !0
            })
        }
    },
    _selectNote: function(a, b) {
        if (!$(a.target).match("button, button *") && !this._editingNote) {
            this._list.getElements(".selected").removeClass("selected"),
            b.addClass("selected");
            var c = b.get("data-id").toInt();
            this._editNote(c)
        }
    },
    _addNote: function() {
        this._editingNote || this._editNote()
    },
    _editNote: function(a) {
        this._editingNote = this._notes.first(function(b) {
            return b.id === a
        }) || {},
        this._editor ? this._editor.set(this._editingNote.contents || "<p></p>") : (this._editor = new seqta.ui.FormattedText({
            allowedModes: {
                html: !1,
                preview: !1
            },
            commands: [["Format"], ["Bold", "Italic", "Underline"], ["seqta-macro"]],
            macro: {
                suppress: ["Embed", "Theme"]
            },
            onChange: this._setDirty,
            wordCount: !1
        },this._editingNote.contents),
        this._editorC.grab(this._editor),
        this._editor.ready()),
        $(this._addButton).setStyle("display", "none"),
        $(this._doneButton).setStyle("display", ""),
        this._editorC.addClass("active"),
        this._list.addClass("inactive")
    },
    save: function() {
        var a = this._dirty;
        if (this._dirty = !1,
        this._noteSavedBeforeChange = !1,
        this._editingNote) {
            this.fireEvent("dirty", this._dirty),
            this._editingNote.contents = this._editor.get();
            var b = this._editingNote.id;
            if (this._editingNote.contents.isBlankHTML())
                this._editingNote = null,
                b && (!a && (this._noteSavedBeforeChange = !0),
                this._deleteById(b));
            else if (a || (this._noteSavedBeforeChange = !0),
            b) {
                var c = this._list.getFirst("[data-id = " + b + "]");
                c && this._listNote(this._editingNote).replaces(c),
                ajax.send(this.options.urls.save, this._editingNote),
                this._editingNote = null
            } else
                ajax.send(this.options.urls.save, this._editingNote, this._processNewNote);
            $(this._addButton).setStyle("display", ""),
            $(this._doneButton).setStyle("display", "none"),
            this._editorC.removeClass("active"),
            this._list.removeClass("inactive")
        }
    },
    _processNewNote: function(a) {
        this._editingNote.id = a.id,
        this._notes.push(this._editingNote),
        this._list.grab(this._listNote(this._editingNote)),
        this._editingNote = null
    },
    isDirty: function() {
        return this._dirty
    },
    _setDirty: function() {
        this._noteSavedBeforeChange ? this._dirty ? dbug.error("notes._setDirty(): _dirty and _noteSavedBeforeChange should not both be true") : this._noteSavedBeforeChange = !1 : this._dirty = !0,
        this.fireEvent("dirty", this._dirty)
    },
    _annotate: function(a, b) {
        var c = new Element("li",{
            "data-id": a.id
        });
        let d = "";
        return a.contents && (d = (new DOMParser).parseFromString(a.contents, "text/html").body.textContent),
        c.adopt(new Element("div",{
            class: "preview",
            text: d.substring(0, 100)
        }), new seqta.ui.Button({
            extraClass: "toggleDelete",
            defaultValue: tools.getIcon("delete")
        }), new Element("div",{
            class: "deletePanel"
        }).adopt(new seqta.ui.Button({
            extraClass: "delete",
            defaultValue: b
        }), new seqta.ui.Button({
            extraClass: "cancel",
            defaultValue: Locale.get("dashlet.notes.cancel")
        }))),
        c
    }
});
var _extends = Object.assign || function(a) {
    for (var b, c = 1; c < arguments.length; c++)
        for (var d in b = arguments[c])
            Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);
    return a
}
;
seqta.base.dashlet.Profile = new Class({
    Implements: [Options, Events],
    options: {
        defaultColour: "#1b315e",
        defaultAccent: "#1b315e",
        urls: {
            load: "dashlet/profile/load",
            save: "dashlet/profile/save",
            backgrounds: "json/branding/load"
        }
    },
    Binds: ["toElement", "getTitle", "_retrieveData", "_receiveData", "_draw", "_drawUserDetails", "_drawUserPreferences", "_drawPasswordReset", "_drawBackgrounds", "_selectBackground", "_saveAudio", "_saveColour", "_savePhone", "_saveTheme", "_updateTourPref", "_saveAccent", "_showPasswordChange", "_hidePasswordChange", "_savePasswordChange"],
    initialize: function(a) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "dashlet-profile"
        }),
        this._retrieveData()
    },
    toElement: function() {
        return this._element
    },
    getTitle: function() {
        return Locale.get("dashlet.profile.title")
    },
    _retrieveData: function() {
        let a = ["settings", "profile", "preferences"];
        "staff" === window.user.type && a.push("backgrounds");
        let b = tools.func.createConcurrentHandler(a, tools.func.compose(this._receiveData, this._draw));
        dataStore.retrieve("siteSettings", b.settings),
        ajax.send(this.options.urls.load, {}, b.profile),
        msg.register("user.settings.loaded", b.preferences),
        "staff" === window.user.type && ajax.send(this.options.urls.backgrounds, {
            "teach.backgrounds": !0
        }, b.backgrounds)
    },
    _receiveData: function(a, b, c, d) {
        this._joData = b,
        a && (this.options.editPhone = !a["profile.phone.edit"] || "disabled" !== a["profile.phone.edit"].value,
        this.options.editPassword = !a["profile.password.edit"] || "disabled" !== a["profile.password.edit"].value);
        let e = user.userSettings.first(a=>"alerts.audio" === a.name);
        this._audioMode = e && "enabled" === e.value ? "enabled" : "disabled";
        let f = user.userSettings.first(a=>"theme.mode" === a.name);
        this._themeMode = f && "dark" === f.value ? "dark" : "light";
        let g = user.userSettings.first(a=>"theme.colour" === a.name);
        this._themeColour = g && g.value || void 0;
        let h = user.userSettings.first(a=>"theme.accent" === a.name);
        if (this._themeAccent = h && h.value || void 0,
        this._tours = user.userSettings.filter(a=>a.name.startsWith("tour.")),
        d) {
            this._backgrounds = d;
            let a = user.userSettings.first(a=>"theme.background" === a.name);
            this._background = a && a.value || void 0
        }
    },
    _draw: function() {
        this._element.adopt(this._drawUserPreferences(), this._drawUserDetails(), this._drawPasswordReset())
    },
    _drawUserDetails: function() {
        let a = new Element("div",{
            class: "field username"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.usernameLabel")
        }), new Element("div",{
            class: "value",
            text: this._joData.username
        }))
          , b = new Element("div",{
            class: "field email"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.emailLabel")
        }), new Element("div",{
            class: "value",
            text: this._joData.email || ""
        }))
          , c = new seqta.ui.ShortText({
            autocomplete: "off",
            defaultValue: this._joData.phone || "",
            onChange: this._savePhone
        });
        this.options.editPhone || this._fields.phone.disable();
        let d = new Element("div",{
            class: "field phone"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.phoneLabel")
        }), c);
        return new Element("div",{
            class: "details"
        }).adopt(new Element("h2",{
            text: Locale.get("dashlet.profile.details")
        }), a, "tutor" === user.type ? null : b, "tutor" === user.type ? null : d)
    },
    _drawPasswordReset: function() {
        return this.options.editPassword ? (this._passwordContainer = new Element("div",{
            class: "passwordContainer"
        }),
        this._hidePasswordChange(),
        new Element("div",{
            class: "details"
        }).adopt(new Element("h2",{
            text: Locale.get("dashlet.profile.passwordUpdate")
        }), this._passwordContainer)) : null
    },
    _drawUserPreferences: function() {
        let a = new seqta.ui.Pillbox({
            onChange: this._saveAudio
        },{
            enabled: Locale.get("dashlet.profile.audioToggle.enabled"),
            disabled: Locale.get("dashlet.profile.audioToggle.disabled")
        },"enabled" === this._audioMode ? "enabled" : "disabled")
          , b = new Element("div",{
            class: "field audio"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.audioLabel")
        }), a)
          , c = new seqta.ui.Pillbox({
            onChange: this._saveTheme
        },{
            light: Locale.get("dashlet.profile.themeToggle.light"),
            dark: Locale.get("dashlet.profile.themeToggle.dark")
        },"dark" === this._themeMode ? "dark" : "light")
          , d = new Element("div",{
            class: "field theme"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.themeLabel")
        }), c);
        d.adopt(new seqta.base.ComponentWrapper({
            component: SEQTATeachModules.styleguide.InlineHelp,
            props: {
                className: "warning",
                warn: !0,
                children: Locale.get("dashlet.profile.themeWarning")
            }
        }));
        let e = new seqta.ui.ColourButton({
            defaultColour: this._themeColour || this.options.defaultColour,
            onSelect: this._saveColour
        })
          , f = new Element("div",{
            class: "field colour"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.colourLabel")
        }), e)
          , g = new seqta.ui.ColourButton({
            defaultColour: this._themeAccent || this.options.defaultAccent,
            onSelect: this._saveAccent
        })
          , h = new Element("div",{
            class: "field accent"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.accentLabel")
        }), g)
          , i = [];
        return this._tours.forEach(a=>{
            let b = new seqta.ui.Pillbox({
                onChange: b=>this._updateTourPref(b, a.name)
            },{
                on: Locale.get("dashlet.profile.on"),
                off: Locale.get("dashlet.profile.off")
            },"enabled" === a.value ? "on" : "off")
              , c = new Element("div",{
                class: "field tour"
            }).adopt(new Element("label",{
                text: Locale.get("dashlet.profile.tourLabel", [a.name.split(".")[1]])
            }), b);
            i.push(c)
        }
        ),
        new Element("div",{
            class: "details"
        }).adopt(new Element("h2",{
            text: Locale.get("dashlet.profile.preferences")
        }), b, "staff" === user.type ? d : void 0, "staff" === user.type ? f : void 0, "staff" === user.type ? h : void 0, "staff" === user.type ? this._drawBackgrounds() : void 0, "staff" === user.type ? i : void 0)
    },
    _drawBackgrounds: function() {
        return this._backgrounds && this._backgrounds.length ? (this._backgroundsList = new Element("ul",{
            class: "backgrounds",
            events: {
                "click:relay(li)": this._selectBackground
            }
        }).adopt(this._backgrounds.map(a=>new Element("li",{
            class: a === this._background ? "selected" : "",
            "data-uuid": a,
            styles: {
                "background-image": `url(${Configuration.baseURL}branding?file=${a})`
            }
        }))).grab(new Element("li",{
            class: this._background ? "none " : "selected none",
            text: Locale.get("dashlet.profile.backgroundNone")
        })),
        new Element("div",{
            class: "field background"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.backgroundLabel")
        }), this._backgroundsList)) : void 0
    },
    _selectBackground: function(a, b) {
        if (!b)
            return;
        let c = b.dataset.uuid || void 0;
        c === this._background || (c ? user.savePreference("theme.background", c, ()=>{
            this._background = c,
            msg.send("theme.updated")
        }
        ) : user.deletePreference("theme.background", ()=>{
            this._background = c,
            msg.send("theme.updated")
        }
        ),
        this._backgroundsList.getElements(".selected").forEach(a=>a.removeClass("selected")),
        b.addClass("selected"))
    },
    _savePhone: function(a) {
        a === this._joData.phone || ajax.send(this.options.urls.save, {
            phone: a
        }, ()=>null)
    },
    _saveAudio: function(a) {
        a === this._audioMode || user.savePreference("alerts.audio", a, ()=>{
            this._audioMode = a,
            a ? audio.enable() : audio.disable()
        }
        )
    },
    _saveTheme: function(a) {
        a === this._themeMode || user.savePreference("theme.mode", a, ()=>{
            this._themeMode = a,
            msg.send("theme.updated")
        }
        )
    },
    _updateTourPref: function(a, b) {
        const c = "on" === a ? "enabled" : "disabled";
        tools.analytics.userAction({
            component: "tour",
            action: c,
            context: b
        }),
        user.savePreference(b, c, ()=>{
            this._tours = this._tours.map(a=>a.name === b ? _extends({}, a, {
                redesignTour: c
            }) : a)
        }
        )
    },
    _saveColour: function(a) {
        a === this._themeColour || ("transparent" === a ? user.deletePreference("theme.colour", ()=>{
            this._themeColour = void 0,
            msg.send("theme.updated")
        }
        ) : user.savePreference("theme.colour", a, ()=>{
            this._themeColour = a,
            msg.send("theme.updated")
        }
        ))
    },
    _saveAccent: function(a) {
        a === this._themeAccent || ("transparent" === a ? user.deletePreference("theme.accent", ()=>{
            this._themeAccent = void 0,
            msg.send("theme.updated")
        }
        ) : user.savePreference("theme.accent", a, ()=>{
            this._themeAccent = a,
            msg.send("theme.updated")
        }
        ))
    },
    _showPasswordChange: function() {
        this._oldPassword = new seqta.ui.ShortText({
            type: "password",
            autocomplete: "current-password"
        }),
        this._newPassword = new seqta.ui.ShortText({
            type: "password",
            autocomplete: "new-password"
        }),
        this._passwordContainer.empty().adopt(new Element("div",{
            class: "field oldPassword"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.oldPassword")
        }), this._oldPassword), new Element("div",{
            class: "field passwordComplexity"
        }).adopt(new Element("label",{
            text: Locale.get("admin.passwordComplexityLabel")
        }), new Element("span",{
            text: Locale.get("admin.passwordComplexity")
        })), new Element("div",{
            class: "field newPassword"
        }).adopt(new Element("label",{
            text: Locale.get("dashlet.profile.newPassword")
        }), this._newPassword), new Element("div",{
            class: "field passwordComplexityError",
            text: Locale.get("admin.passwordComplexity")
        }), new Element("div",{
            class: "field passwordWarning"
        }).adopt(new Element("label",{
            text: Locale.get("admin.passwordWarningLabel")
        }), new Element("span",{
            class: "passwordWarningText"
        })), new Element("div",{
            class: "field passwordSuggestions"
        }).adopt(new Element("label",{
            text: Locale.get("admin.passwordSuggestionsLabel")
        }), new Element("span",{
            class: "passwordSuggestionsText"
        })), new Element("div",{
            class: "field actions"
        }).adopt(new seqta.ui.Button({
            defaultValue: Locale.get("general.cancel"),
            onClick: this._hidePasswordChange
        }), new seqta.ui.Button({
            defaultValue: Locale.get("general.save"),
            onClick: this._savePasswordChange
        }))),
        this._passwordContainer.getElement(".field.newPassword").addEventListener("keyup", tools.newPasswordComplexityListener)
    },
    _hidePasswordChange: function() {
        this._passwordContainer.empty().adopt(new seqta.ui.Button({
            defaultValue: Locale.get("dashlet.profile.changePassword"),
            onClick: this._showPasswordChange
        }))
    },
    _savePasswordChange: function() {
        let a = this._oldPassword.get()
          , b = this._newPassword.get();
        return a ? b ? 8 > b.length || 64 < b.length ? void $alertSubtle(Locale.get("admin.failedPasswordComplexity"), Locale.get("admin.passwordComplexity")) : void ajax.send(this.options.urls.save, {
            password: b,
            currentPassword: a
        }, a=>{
            a.success ? (this._hidePasswordChange(),
            $alertSubtle(Locale.get("dashlet.profile.passwordSavedT"), Locale.get("dashlet.profile.passwordSaved"))) : $alertSubtle(Locale.get("dashlet.profile.noPasswordUpdateT"), Locale.get("dashlet.profile.noPasswordUpdate"))
        }
        ) : void $alertSubtle(Locale.get("dashlet.profile.missingNewPasswordT"), Locale.get("dashlet.profile.missingNewPassword")) : void $alertSubtle(Locale.get("dashlet.profile.missingOldPasswordT"), Locale.get("dashlet.profile.missingOldPassword"))
    }
}),
seqta.base.dashlet.Sentence = new Class({
    Implements: [Options, Events],
    options: {
        tick: 3e4
    },
    Binds: ["toElement", "getTitle", "_draw", "_initWordbank"],
    _element: null,
    _sentence: null,
    _words: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "dashlet-sentence"
        }),
        b.adopt(new seqta.ui.Button({
            defaultValue: tools.getIcon("rotate_right"),
            onClick: this._draw
        })),
        this._initWordbank(),
        window.setTimeout(this._draw, 200)
    },
    toElement: function() {
        return this._element
    },
    getTitle: function() {
        return Locale.get("dashlet.sentence.title")
    },
    _draw: function() {
        this._element.set("text", this._generateSentence());
        var a = 72;
        for (this._element.setStyle("font-size", a); (this._element.scrollHeight > this._element.offsetHeight || this._element.scrollWidth > this._element.offsetWidth) && 16 < a; )
            a -= 3,
            this._element.setStyle("font-size", a)
    },
    _generateSentence: function() {
        const a = a=>this._words[a].getRandom();
        let b = [[{
            type: "prelude",
            chance: .2
        }, {
            type: "article"
        }, {
            type: "adjective",
            chance: .5
        }, {
            type: "noun"
        }, {
            type: "verb"
        }, {
            type: "adverb",
            chance: .5
        }, {
            chance: .3,
            items: [{
                type: "preposition"
            }, {
                type: "article"
            }, {
                type: "adjective",
                chance: .4
            }, {
                type: "noun"
            }]
        }], [{
            type: "prelude",
            chance: .2
        }, {
            type: "article"
        }, {
            type: "adjective",
            chance: .5
        }, {
            type: "noun"
        }, {
            type: "verb"
        }, {
            type: "adverb",
            chance: .5
        }, {
            chance: .3,
            items: [{
                type: "preposition"
            }, {
                type: "adjective",
                chance: .4
            }, {
                type: "pluralNoun"
            }]
        }], [{
            type: "prelude",
            chance: .2
        }, {
            type: "pluralNoun"
        }, {
            type: "pluralVerb"
        }, {
            type: "adverb",
            chance: .5
        }, {
            chance: .3,
            items: [{
                type: "preposition"
            }, {
                type: "article"
            }, {
                type: "adjective",
                chance: .4
            }, {
                type: "noun"
            }]
        }], [{
            type: "pluralVerb"
        }, {
            type: "adverb"
        }], [{
            type: "adjective"
        }, {
            type: "pluralNoun"
        }, {
            type: "pluralVerb"
        }, {
            type: "adverb",
            chance: .5
        }, {
            chance: .3,
            items: [{
                type: "preposition"
            }, {
                type: "article"
            }, {
                type: "adjective",
                chance: .4
            }, {
                type: "noun"
            }]
        }]].getRandom();
        const c = b=>b.filter(a=>!a.chance || Math.random() > a.chance).map(b=>b.items ? c(b.items).join(" ") : a(b.type));
        return c(b).filter(a=>!!a).join(" ").initialCap() + a("punctuation")
    },
    _initWordbank: function() {
        this._words = {
            punctuation: ["!", ".", ". 👍", "! 🤫", ". 🤔", "! 👋", ". 😍", "! 🤫", ". 😆"],
            noun: ["butterfly", "cupcake", "smartie", "rainbow", "road", "cat", "small dog", "monkey", "rabbit", "ironing board", "walrus", "apple", "pear", "grapefruit", "sandwich", "frog", "bird", "pet", "wobble board", "surf board", "fridge magnet", "musician", "artist", "fingernail", "encyclopaedia", "computer", "robot", "speaker", "lamb", "plate of snails", "keyboard", "piano", "flute", "tuba", "trombone", "guitar", "block of cheese", "farmer", "combine harvester", "refresher towel", "complimentary mint", "lion", "camel", "clown", "chameleon", "village idiot", "Shakespearean actor", "actress", "night light", "coffee cup", "teaspoon", "pony", "urchin", "philosopher", "doctor", "nurse", "backpack", "stenographer", "elephant", "rhinoceros", "hippopotamus", "eel", "hovercraft"],
            pluralNoun: ["butterflies", "cupcakes", "smarties", "rainbows", "cats", "small dogs", "monkeys", "rabbits", "walruses", "apples", "pears", "sandwiches", "birds", "pets", "musicians", "artists", "trombones", "guitars", "cheeses", "lions", "camels", "ponies", "urchins", "philosophers", "nurses", "elephants", "stoats", "eels", "hovercraft", "lambs", "keyboards", "mice", "goats", "carrots", "potatoes", "cucumbers", "ostriches", "people", "ants", "cups", "headphones", "screens", "glasses", "keys", "phones", "hamsters", "rabbits", "guitars", "violins", "violas", "cellos", "double basses", "trombones", "euphoniums", "tubas", "trumpets", "choristers", "teachers", "listeners", "interlocutors"],
            adjective: ["gorgeous", "attractive", "intellectual", "green", "blue", "pink", "orange", "livid", "lively", "dead", "fuming", "pungent", "malodorous", "nectar-filled", "horrible", "incendiary", "bombastic", "sympathetic", "pathetic", "rejected", "acceptable", "flawed", "porous", "impermeable", "drycleanable", "consecrated", "hairy", "wise", "jelly-like", "sensational", "tasty", "curious", "excited", "tremendous", "splendid", "perfect", "thin", "cheesy", "lachrymose", "morose", "fragrant", "pleasant", "yummy", "exciting", "festive", "clandestine", "lumpy", "philosophical", "disturbing", "definitive", "declarative", "inflammatory", "yodelling", "running", "leaping", "singing", "swinging", "vestigial", "cerulean", "nasal", "ocular", "aural", "well-armed", "large-footed", "flying", "precise", "imprecise", "sweet", "sour", "savoury", "unsavoury", "great", "awful", "enormous", "huge", "tiny", "miniscule", "fleet-footed", "quick", "slow", "metallic", "wooden", "plastic", "organic", "inorganic", "artificial", "unwell", "sick", "healthy", "unhealthy", "smiling", "frowning", "grinning", "questioning", "flamboyant", "mysterious", "interrogative", "indecisive", "decisive", "shambolic", "international", "horizontal", "vertical", "diagonal", "tremendous", "fantastic", "awesome", "terrible", "ignorant", "intelligent", "superlative", "well-respected", "trusted", "trustworthy", "untrustworthy", "incandescent", "fluorescent", "electric", "mechanical", "electronic", "rotating", "well-presented", "hirsute", "hairy", "clean-shaven", "large-nosed", "snub-nosed"],
            verb: ["galumphs", "burps", "bakes cookies", "laughs", "clowns around", "hurls insults", "tells a joke", "bakes cookies", "sighs", "rides", "studies", "pollinates", "stares", "shops", "dictates", "sets sail", "reads", "winks", "smiles", "raises an eyebrow", "hunts", "gallivants", "frolics", "flies", "twists", "sings", "shouts", "sniffs", "yodels", "pirouettes", "dances", "glides", "falls", "flinches", "loofahs", "smiles", "smirks", "grins", "pokes", "irons", "scrubs", "dines", "imbibes", "writes", "sketches", "draws", "paints", "flutters", "swims", "jogs", "runs", "perambulates", "cycles", "flies", "waddles", "cranks", "stomps", "twists", "wiggles", "crunches", "eats", "devours", "kneads", "impeaches", "digs", "articulates", "flosses", "plasters", "rustles", "scrubs", "sculpts", "shaves", "sniffs", "snuggles", "strains", "paints", "smears", "shatters", "tickles", "giggles", "crumples", "flaps", "glues", "polishes", "scolds", "scrunches", "swipes", "crawls", "jousts", "gallops", "marches", "slouches", "snoops", "tiptoes", "trots", "walks", "darkens", "lightens", "glows", "shines", "shimmers", "sparkles", "bawls", "cackles", "roars", "screams", "squeals", "mutters", "mumbles", "whispers"],
            pluralVerb: ["galumph", "burp", "bake cookies", "laugh", "clown around", "hurl insults", "tell jokes", "bake cookies", "sigh", "ride", "study", "pollinate", "stare", "shop", "dictate", "embark", "cycle", "poke", "grin", "twist", "sing", "shout", "sniff", "yodel", "pirouette", "dance", "smile", "gallivant", "hunt", "flinch", "iron", "scrub", "dine", "imbibe", "swing", "throw smarties", "kick", "jump", "hop", "skip", "skip rope", "climb", "ascend", "descend", "look up", "look down", "look left", "look right", "look at you", "look into your eyes", "cry", "weep", "sting", "flit", "point", "flee", "run away", "run", "fall over", "fall down", "stand up", "sit down", "write", "sketch", "draw", "paint", "flutter", "swim", "jog", "run", "perambulate", "cycle", "fly", "waddle", "crank", "stomp", "twist", "wiggle", "crunch", "eat", "devour", "knead", "impeach", "dig", "articulate", "floss", "plaster", "rustle", "scrub", "sculpt", "shave", "sniff", "snuggle", "strain", "paint", "smear", "shatter", "tickle", "giggle", "crumple", "flap", "glue", "polish", "scold", "scrunch", "swipe", "crawl", "joust", "gallop", "march", "slouch", "snoop", "tiptoe", "trot", "walk", "darken", "lighten", "glow", "shine", "shimmer", "sparkle", "bawl", "cackle", "roar", "scream", "squeal", "mutter", "mumble", "whisper"],
            adverb: ["quickly", "slowly", "silently", "tenderly", "sweetly", "arrogantly", "feelingly", "condescendingly", "powerfully", "longingly", "painfully", "strongly", "intelligently", "stupidly", "wittily", "amusingly", "disgustingly", "disturbingly", "unpleasantly", "messily", "with gusto", "with feeling", "tenderly", "insipidly", "funnily", "strangely", "excitedly", "peremptorily", "well", "poorly", "languidly", "listlessly", "rapidly", "arrogantly", "amicably", "bodaciously", "delightfully", "excitedly", "frighteningly", "gallantly", "horribly", "incessantly", "jovially", "monstrously", "noisily", "prettily", "refreshingly", "steadfastly", "timidly", "unctiously", "vehemently", "wistfully", "smoothly", "slowly", "artfully", "awkwardly", "bitterly", "coldly", "correctly", "crunchily", "daintily", "earnestly", "dreamily", "expertly", "efficiently", "effortlessly", "fearlessly", "firmly", "fleetingly", "fluidly", "gloriously", "grandly", "gravely", "kindly", "merrily", "meekly", "secretly", "silently", "solemnly", "strongly", "wisely"],
            article: ["your", "my", "their", "his", "her", "someone's", "the", "that", "Aunt Gertrude's", "Uncle Wilbur's", "a well-informed", "an interesting", "yesterday's", "your friend's", "your teacher's"],
            preposition: ["with", "alongside", "with", "at", "for", "with no regard for", "in spite of"],
            prelude: ["just out of sight,", "beyond the black stump,", "with a bit of luck,", "all going according to plan,", "if memory serves,", "it's a scientific fact:", "nine out of ten cats agree:", "according to legend,", "I wasn't sure if I should tell you, but", "keep this to yourself:", "good news:", "in some European cities,", "despite our best efforts,", "my grandfather once told me that", "it's a little-known fact that", "I think you should know that", "the government is suppressing information about the fact that", "we're all relieved that", "how remarkable —", "hang on —", "oh dear,"]
        }
    }
}),
seqta.base.dashlet.Tasks = new Class({
    Extends: seqta.base.dashlet.Notes,
    options: {
        urls: {
            load: "dashlet/tasks",
            save: "dashlet/tasks"
        },
        completed: "show"
    },
    Binds: ["getTitle", "cleanup", "_draw", "_retrieveData", "_listNote", "_changeCompletedness", "_selectNote", "_addTask", "_toggleVisibility", "_editNote", "save"],
    _showCompletedToggle: null,
    _loadedWithCompleted: !1,
    _dirty: !1,
    initialize: function(a, b) {
        this.parent(a, b),
        this.options.completed && ["show", "hide"].contains(this.options.completed) || (this.options.completed = "show"),
        "hide" === this.options.completed && this._element.addClass("hideCompleted"),
        this._element.addClass("dashlet-tasks"),
        msg.register("dashlet.tasks.add", this._addTask, !1, !0)
    },
    getTitle: function() {
        return Locale.get("dashlet.tasks.title")
    },
    cleanup: function() {
        msg.unregister("dashlet.tasks.add", this._addTask)
    },
    _draw: function() {
        this.parent(),
        this._showCompletedToggle = this._showCompletedToggle || new seqta.ui.Pillbox({
            onChange: this._toggleVisibility
        },{
            show: Locale.get("dashlet.tasks.showCompleted"),
            hide: Locale.get("dashlet.tasks.hideCompleted")
        },this.options.completed),
        this._actionsBar.grab(this._showCompletedToggle, "top")
    },
    _retrieveData: function() {
        this._loadedWithCompleted = "show" === this.options.completed,
        ajax.send(this.options.urls.load, {
            completed: this._loadedWithCompleted,
            load: !0
        }, this._receiveData)
    },
    _listNote: function(a) {
        var b = this._annotate(a, Locale.get("dashlet.tasks.delete"));
        return a.completed && b.addClass("completed"),
        b.grab(new seqta.ui.Checkbox({
            defaultValue: !!a.completed,
            onChange: this._changeCompletedness
        }), "top"),
        b
    },
    _changeCompletedness: function(a, b, c) {
        var d = c.getParent("li");
        if (d) {
            var e = d.get("data-id").toInt();
            d.toggleClass("completed"),
            ajax.send(this.options.urls.save, {
                id: e,
                completed: !!a
            })
        }
    },
    _selectNote: function(a, b) {
        $(a.target).match("input") || this.parent(a, b)
    },
    _addTask: function(a) {
        this._editingNote = {
            contents: a
        },
        ajax.send(this.options.urls.save, this._editingNote, this._processNewNote)
    },
    _toggleVisibility: function(a) {
        return this.options.completed = a,
        this.fireEvent("configure", [{
            completed: a
        }, this]),
        "hide" === a ? void this._element.addClass("hideCompleted") : (this._element.removeClass("hideCompleted"),
        void (!this._loadedWithCompleted && this._retrieveData()))
    },
    _editNote: function(a) {
        this.parent(a),
        $(this._showCompletedToggle).hide(),
        this.fireEvent("dirty", this._dirty)
    },
    save: function() {
        this.parent(),
        $(this._showCompletedToggle).show(),
        this.fireEvent("dirty", this._dirty)
    }
}),
seqta.base.Page = new Class({
    Implements: [Options, Events],
    options: {
        name: "",
        dirtyMsg: function() {
            return Locale.get("general.unsavedChanges")
        }
        .bind(this)
    },
    Binds: ["setMounted", "isMounted"],
    _isMounted: !1,
    initialize: function(a) {
        this.fireEvent("onCreate"),
        this.setOptions(a),
        this.fireEvent("onCreated"),
        this._isMounted = !0
    },
    enter: function() {
        this.fireEvent("onEnter")
    },
    leave: function() {
        return this.fireEvent("onLeave"),
        !0
    },
    isMounted: function() {
        return this._isMounted
    },
    cleanup: function() {
        this._isMounted = !1
    }
}),
Locale.define("en-AU", "booking", {
    itemBooking: {
        addTitle: "Add booking",
        all: "All kits",
        booking: "Booking",
        category: "Category",
        deleteBooking: "Delete booking",
        deleteKit: "Delete kit",
        details: "Details",
        editKit: "Edit kit",
        editTitle: "Manage booking",
        fav: "Fav",
        favouriteKit: "Mark kit as favourite",
        favourites: "My favourite kits",
        items: "Items",
        mine: "My kits",
        mineFavourites: "My kits and favourites",
        name: "Name/Types",
        notes: "Booking notes",
        kits: "Kits",
        reallyDelete: "Are you sure you want to delete this booking?",
        reallyDeleteKit: "Are you sure you want to delete this kit?",
        saveKit: "Save as kit",
        search: "Search (Category/Name/Item key)",
        selectMode: "Select mode"
    }
}),
seqta.base.part.ItemBooking = new Class({
    Implements: [Options, Events],
    options: {
        urls: {
            booking: "booking/get",
            save: "booking/save",
            del: "booking/delete",
            search: "booking/search",
            kits: "booking/kits/get",
            kitsDelete: "booking/kits/delete",
            kitsFavourite: "booking/kits/favourite",
            items: "booking/items/get"
        }
    },
    Binds: ["toElement", "setEventinstance", "_retrieveData", "_receiveData", "draw", "_drawFilterBar", "_drawTables", "_drawButtonBar", "_drawNotes", "_loadTables", "_populateTablesPrep", "_populateTables", "_filterItems", "_updateModesLabel", "_selectMode", "_updatePersonalsLabel", "_favouriteToElement", "_categoryToElement", "_nameToElement", "_detailsToElement", "_bookingToElement", "_sortTables", "save", "_getSaveData", "_getKitSaveObjects", "_delete", "_doDelete", "_favouriteKit", "_deleteKit", "_doDeleteKit", "_assignKitItems", "_matchKit", "_selectKitItemMatch", "_cleanKitItemMatches", "_checkKitAvailability", "_checkKitObsolete", "_setModePreferences", "_setPersonalsPreferences", "_toXML", "_print", "_saveKit", "_setDirty"],
    _element: null,
    _elFilterBar: null,
    _elModeSelector: null,
    _elPersonalSelector: null,
    _elSearchBox: null,
    _elDeleteButton: null,
    _elItemsContainer: null,
    _elKitsTable: null,
    _elItemsTable: null,
    _elPrintButton: null,
    _elSaveKitButton: null,
    _elNotesContainer: null,
    _elNotes: null,
    _modes: null,
    _personals: null,
    _categories: null,
    _conditions: null,
    _kits: null,
    _items: null,
    _selectedKitQuantity: null,
    _kitMaxAvailability: null,
    _staff: null,
    _booking: null,
    _bookingMeta: null,
    _dirty: !1,
    _onDeleteBooking: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._selectedKitQuantity = {},
        this._kitMaxAvailability = {},
        this._bookingMeta = b,
        this._element = new Element("div",{
            class: "itemBooking"
        }),
        this._modes = [{
            value: "kits",
            label: Locale.get("booking.itemBooking.kits"),
            checked: !0
        }, {
            value: "items",
            label: Locale.get("booking.itemBooking.items"),
            checked: !1
        }],
        this._personals = [{
            value: "fav",
            label: Locale.get("booking.itemBooking.favourites"),
            checked: !0
        }, {
            value: "mine",
            label: Locale.get("booking.itemBooking.mine"),
            checked: !0
        }],
        this._retrieveData()
    },
    toElement: function() {
        return this._element
    },
    setEventinstance: function(a) {
        this._bookingMeta && (this._bookingMeta.eventinstance = a)
    },
    setOnDeleteBooking(a) {
        this._onDeleteBooking = a
    },
    _retrieveData: function() {
        if (this._bookingMeta && this._bookingMeta.bookingID) {
            var a = tools.func.createConcurrentHandler(["categories", "conditions", "staff", "booking"], this._receiveData);
            dataStore.retrieve("bookableCategories", a.categories),
            dataStore.retrieve("bookableConditions", a.conditions),
            dataStore.retrieve("msStaff", a.staff),
            ajax.send(this.options.urls.booking, {
                bookingID: this._bookingMeta.bookingID
            }, a.booking)
        } else {
            a = tools.func.createConcurrentHandler(["categories", "conditions", "staff"], this._receiveData);
            dataStore.retrieve("bookableCategories", a.categories),
            dataStore.retrieve("bookableConditions", a.conditions),
            dataStore.retrieve("msStaff", a.staff)
        }
    },
    _receiveData: function(a, b, c, d) {
        this._categories = Array.clone(a.categories).map(function(a) {
            return {
                value: a.categoryID,
                label: a.name
            }
        }),
        this._conditions = Object.clone(b),
        this._booking = d,
        this._staff = Array.clone(c.elements);
        var e = [];
        this._booking && (e = this._booking.kits.map(function(a) {
            return a.kitID
        })),
        this.draw(),
        this._loadTables(e)
    },
    draw: function() {
        this._drawFilterBar(),
        this._drawTables(),
        this._drawButtonBar(),
        this._drawNotes(),
        this._selectMode(this._elModeSelector.get()),
        this._element.adopt(this._elFilterBar, this._elItemsContainer, this._elButtonBar, this._elNotesContainer)
    },
    _drawFilterBar: function() {
        this._elFilterBar = new Element("div",{
            class: "filterBar"
        });
        var a = this._setModePreferences()
          , b = this._setPersonalsPreferences();
        this._elModeSelector = new seqta.ui.ButtonChecklist({
            defaultValue: Locale.get("booking.itemBooking.selectMode"),
            updateLabel: this._updateModesLabel,
            onChange: this._selectMode
        }),
        this._elModeSelector.set(a),
        this._elPersonalSelector = new seqta.ui.ButtonChecklist({
            defaultValue: Locale.get("booking.itemBooking.all"),
            updateLabel: this._updatePersonalsLabel,
            onChange: function(a) {
                user.savePreference("booking.personals", a.join()),
                this._loadTables()
            }
            .bind(this)
        }),
        this._elPersonalSelector.set(b),
        this._elSearchBox = new seqta.ui.ShortText({
            className: "search",
            placeholder: Locale.get("booking.itemBooking.search"),
            defaultValue: "",
            maxLength: 64,
            onPause: function() {
                this._loadTables()
            }
            .bind(this)
        }),
        this._elFilterBar.adopt(this._elModeSelector, this._elPersonalSelector, this._elSearchBox)
    },
    _drawTables: function() {
        this._elKitsTable = new seqta.ui.ResultsTable({
            rowAttributes: {
                "data-kit": "kitID",
                "data-category": "categoryID",
                "data-staff": "staffID"
            },
            extraClass: "kits",
            enableTitle: !0,
            titleContents: Locale.get("booking.itemBooking.kits"),
            onSort: this._sortTables,
            onFilter: function(a) {
                this._loadTables(null, a)
            }
            .bind(this)
        },[{
            key: "booking",
            value: Locale.get("booking.itemBooking.booking"),
            sortable: !0,
            sortOptions: {
                valueMap: "quantity",
                defaultValue: 0
            }
        }, {
            key: "category",
            type: "buttonChecklist",
            options: {
                items: this._categories
            },
            sortable: !0,
            value: Locale.get("booking.itemBooking.category")
        }, {
            key: "name",
            value: Locale.get("booking.itemBooking.name"),
            sortable: !0
        }, {
            key: "details",
            value: Locale.get("booking.itemBooking.details"),
            sortable: !0
        }, {
            key: "favourite",
            value: Locale.get("booking.itemBooking.fav"),
            sortable: !0,
            sortOptions: {
                type: "buttonToggle"
            }
        }],[this._bookingToElement, this._categoryToElement(), this._nameToElement, this._detailsToElement, this._favouriteToElement]),
        this._elItemsTable = new seqta.ui.ResultsTable({
            rowAttributes: {
                "data-item": "itemID",
                "data-category": "categoryID",
                available: "available"
            },
            selection: {
                enabled: !0,
                selectAttribute: "data-item",
                selectionClass: "booking"
            },
            extraClass: "bookables",
            disableHeader: !0,
            enableTitle: !0,
            sortDefault: "category",
            sortDefault2: "name",
            titleContents: Locale.get("booking.itemBooking.items")
        },[{
            key: "booking"
        }, {
            key: "category"
        }, {
            key: "name"
        }, {
            key: "details"
        }, {
            key: "favourite"
        }],[this._bookingToElement, this._categoryToElement(), this._nameToElement, this._detailsToElement, this._favouriteToElement]),
        this._elItemsContainer = new Element("div",{
            class: "itemsContainer"
        }),
        this._elItemsContainer.adopt(this._elKitsTable, this._elItemsTable)
    },
    _drawButtonBar: function() {
        this._elButtonBar = new Element("div",{
            class: "buttonBar"
        }),
        this._elDeleteButton = new seqta.ui.Button({
            defaultValue: Locale.get("booking.itemBooking.deleteBooking"),
            extraClass: "del",
            onClick: this._delete
        }),
        this._bookingMeta && this._bookingMeta.bookingID || this._elDeleteButton.toElement().setStyle("display", "none"),
        this._elPrintButton = new seqta.ui.Button({
            defaultValue: Locale.get("general.print"),
            onClick: this._print
        }),
        this._elPrintButton.disable(),
        this._elSaveKitButton = new seqta.ui.Button({
            defaultValue: Locale.get("booking.itemBooking.saveKit"),
            onClick: this._saveKit
        }),
        this._elSaveKitButton.disable(),
        this._elButtonBar.adopt(this._elDeleteButton, this._elPrintButton, this._elSaveKitButton)
    },
    _drawNotes: function() {
        this._elNotesContainer = new Element("div",{
            class: "notesContainer"
        });
        var a = new Element("h2",{
            text: Locale.get("booking.itemBooking.notes")
        });
        this._elNotes = new seqta.ui.LongText({
            onChange: this._setDirty
        }),
        this._elNotesContainer.adopt(a, this._elNotes),
        this._booking && this._booking.notes && this._elNotes.set(this._booking.notes)
    },
    _loadTables: function(a, b) {
        var c = {}
          , d = {
            includeAvailability: !0,
            from: this._bookingMeta.from,
            to: this._bookingMeta.to
        }
          , e = this._conditions.conditions.first(function(a) {
            return "active" === a.label
        });
        e && (d.conditionIDs = [e.conditionID]);
        var f = this._elItemsTable.get();
        f && 0 < f.length && (d.itemIDs = f),
        a || (a = Object.keys(this._selectedKitQuantity || {})),
        a && 0 < a.length && (c.kitIDs = a);
        var g = this._elPersonalSelector.get();
        g.contains("fav") && (c.favourite = !0),
        g.contains("mine") && (c.staffID = user.userID),
        this._elSearchBox.getValue() && (c.search = this._elSearchBox.getValue()),
        b && b.category && (c.categoryIDs = b.category);
        var h = {
            kit: c
        };
        this._items || (h.item = d),
        ajax.send(this.options.urls.search, h, this._populateTablesPrep)
    },
    _populateTablesPrep: function(a) {
        a && a.items && a.items.length || this._items && this._items.length ? (this._elPrintButton.enable(),
        this._elSaveKitButton.enable()) : (this._elPrintButton.disable(),
        this._elSaveKitButton.disable()),
        this._populateTables(a)
    },
    _populateTables: function(a) {
        if (a.items && (this._items = a.items),
        this._kits = a.kits.map(function(a) {
            return a.availability = this._kitMaxAvailability && this._kitMaxAvailability[a.kitID] ? this._kitMaxAvailability[a.kitID] : this._checkKitAvailability(a),
            a.quantity = this._selectedKitQuantity && this._selectedKitQuantity[a.kitID],
            a
        }
        .bind(this)),
        this._elKitsTable.renderData(this._kits),
        a.items) {
            var b = this._elItemsTable.get();
            if (this._elItemsTable.renderData(this._items, b),
            this._booking && this._booking.items && this._booking.items.length)
                for (var c = 0; c < this._booking.items.length; c++) {
                    var d = this._booking.items[c]
                      , e = this._elItemsContainer.getElement("tr[data-item = " + d.itemID + "]");
                    if (e) {
                        var f = e.getElement("input");
                        e.erase("available").set("data-kit-selected", d.kitID),
                        f.erase("disabled").click(),
                        d.kitID && f.set("disabled", "disabled")
                    }
                }
        }
        if (this._booking && this._booking.kits && this._booking.kits.length)
            for (c = 0; c < this._booking.kits.length; c++) {
                var g = this._booking.kits[c]
                  , h = this._elItemsContainer.getElement("tr[data-kit = " + g.kitID + "]");
                if (h && (h.getElement("input").set("value", g.quantity),
                h.getElement("td.booking").set("data-sort-value", g.quantity),
                this._selectedKitQuantity[g.kitID] = g.quantity,
                this._checkKitObsolete(g.kitID, g.quantity))) {
                    h.addClass("obsolete"),
                    h.getElement("input").set("disabled", "disabled").addClass("disabled");
                    var j = h.getElement("div.category").get("html");
                    h.getElement("div.category").set("html", j + "<div>{Obsolete}</div>")
                }
            }
        this._filterItems()
    },
    _filterItems: function() {
        for (var a = this._elKitsTable.getAllFiltersValue().category, b = this._elSearchBox.getValue().toLowerCase(), c = this._elItemsContainer.getElements("tr[data-item]"), d = 0; d < c.length; d++) {
            var e = c[d]
              , f = c[d].getElement("input");
            if (f) {
                var g = e.get("data-category")
                  , h = e.get("text").toLowerCase();
                e.removeClass("hidden"),
                "1" === f.get("data-checked") || (a && a.length && g && !a.contains(g.toInt()) && e.addClass("hidden"),
                b && !h.contains(b) && e.addClass("hidden"))
            }
        }
    },
    _updateModesLabel: function() {
        if (!this._elModeSelector)
            return Locale.get("booking.itemBooking.selectMode");
        var a = this._elModeSelector.get(!0);
        if (1 < a.length) {
            for (var b = [], c = 0; c < a.length; c++)
                b.push(a[c].label);
            return b.join(" + ")
        }
        return 1 === a.length ? a[0].label + " only" : Locale.get("booking.itemBooking.selectMode")
    },
    _selectMode: function(a) {
        a.contains("kits") ? this._elItemsContainer.getElements(".uiResultsTable.kits > .chromeBugWrapper > div").removeClass("hidden") : this._elItemsContainer.getElements(".uiResultsTable.kits > .chromeBugWrapper > div").addClass("hidden"),
        a.contains("items") ? this._elItemsContainer.getElements(".uiResultsTable.bookables > .chromeBugWrapper > div").removeClass("hidden") : this._elItemsContainer.getElements(".uiResultsTable.bookables > .chromeBugWrapper > div").addClass("hidden"),
        user.savePreference("booking.modes", a.join())
    },
    _updatePersonalsLabel: function() {
        if (!this._elPersonalSelector)
            return Locale.get("booking.itemBooking.all");
        var a = this._elPersonalSelector.get(!0);
        return 1 < a.length ? Locale.get("booking.itemBooking.mineFavourites") : 1 === a.length ? a[0].label : Locale.get("booking.itemBooking.all")
    },
    _favouriteToElement: function(a) {
        return a.itemID ? new Element("div") : new seqta.ui.ButtonToggle({
            defaultValue: a.favourite ? tools.getIcon("favorite") : tools.getIcon("favorite_border"),
            onToggle: this._favouriteKit,
            toggled: a.favourite,
            title: Locale.get("booking.itemBooking.favouriteKit")
        })
    },
    _categoryToElement: function() {
        var a = {};
        return this._categories.each(function(b) {
            a[b.value] = b.label
        }),
        function(b) {
            return new Element("div",{
                class: "category",
                text: a[b.categoryID]
            })
        }
    },
    _nameToElement: function(a) {
        if (a.itemID) {
            var b = new Element("div",{
                class: "name",
                text: a.type
            });
            return a.description && b.adopt(new seqta.ui.InlineHelp({
                explanation: a.description
            })),
            b
        }
        var c = this._staff.first(function(b) {
            return b.xx_value === a.staffID
        })
          , d = new seqta.ui.Button({
            defaultValue: tools.getIcon("edit"),
            title: Locale.get("booking.itemBooking.editKit"),
            onClick: this._saveKit
        });
        d.disable();
        var e = new seqta.ui.Button({
            defaultValue: tools.getIcon("delete"),
            title: Locale.get("booking.itemBooking.deleteKit"),
            onClick: this._deleteKit
        });
        return e.disable(),
        (seqta.auth.check("booking.edit.all") || user.userID === a.staffID) && (d.enable(),
        e.enable()),
        new Element("div").adopt(e, d, new Element("div",{
            class: "name",
            text: a.name
        }), new Element("div",{
            class: "staff",
            text: c.xx_display
        }))
    },
    _detailsToElement: function(a) {
        if (a.itemID)
            return new Element("div",{
                class: "details",
                text: a.key
            });
        var b = a.entries.map(function(a) {
            return new Element("div",{
                class: "entry",
                text: a.quantity + " x " + a.type
            })
        });
        return new Element("div",{
            class: "details"
        }).adopt(b)
    },
    _bookingToElement: function(a) {
        if (a.itemID) {
            var b = new seqta.ui.Checkbox({
                onChange: function(a, b, c) {
                    c.getParent("td.booking").set("data-sort-value", a ? 1 : 0),
                    this._elItemsTable.changeSelection(a, b, c),
                    this._setDirty()
                }
                .bind(this)
            });
            return a.available || b.disable(),
            b
        }
        var c = new Element("div",{
            class: "booking",
            text: "<booking>"
        });
        new seqta.ui.ShortText({
            type: "number",
            defaultValue: a.quantity || 0,
            allowedRegex: /[0-9]{1,4}/,
            maxLength: 4,
            max: a.availability || 0,
            min: 0,
            onChange: this._assignKitItems,
            alwaysFireOnChange: !0
        },c);
        return c.adopt(new Element("div",{
            class: "available",
            text: -1 === a.availability ? "" : a.availability + " available"
        })),
        c
    },
    _sortTables: function(a) {
        a.hasClass("favourite") || this._elItemsTable.sort(a)
    },
    save: function(a) {
        if (this._bookingMeta) {
            var b = this._getSaveData();
            ajax.send(this.options.urls.save, b, function(b) {
                a ? a(b) : this.fireEvent("save", b.bookingID),
                tools.analytics.userAction({
                    component: "booking",
                    action: "manageBooking",
                    context: "appointment"
                })
            }
            .bind(this))
        }
    },
    _getSaveData: function() {
        var a = {};
        this._bookingMeta.bookingID && (a.bookingID = this._bookingMeta.bookingID),
        a.kits = [],
        a.items = [],
        a.kits = this._getKitSaveObjects();
        for (var b, c = this._elItemsContainer.getElements("input[data-checked = 1]"), d = 0; d < c.length; d++)
            (b = {}).itemID = c[d].getParent("tr").get("data-item"),
            c[d].getParent("tr").get("data-kit-selected") && (b.kitID = c[d].getParent("tr").get("data-kit-selected")),
            a.items.push(b);
        return a.notes = this._elNotes.get(),
        this._bookingMeta.classinstance && (a.classinstanceID = this._bookingMeta.classinstance),
        this._bookingMeta.eventinstance && (a.eventinstanceID = this._bookingMeta.eventinstance),
        a.from = this._bookingMeta.from,
        a.to = this._bookingMeta.to,
        a
    },
    _getKitSaveObjects: function() {
        for (var a = [], b = this._elItemsContainer.getElements('input[type="number"]'), c = 0; c < b.length; c++)
            if (b[c].get("value") && "0" !== b[c].get("value")) {
                var d = {}
                  , e = b[c].getParent("tr");
                d.kitID = e.get("data-kit"),
                d.name = e.getElement("div.name").get("text"),
                d.categoryID = e.get("data-category"),
                d.staffID = e.get("data-staff"),
                d.quantity = b[c].get("value"),
                a.push(d)
            }
        return a
    },
    _delete: function() {
        this._bookingMeta && this._bookingMeta.bookingID && new seqta.ui.SlidePane({
            compact: !0,
            onYes: this._doDelete
        }).showConfirm(Locale.get("general.reallyContinueT"), Locale.get("booking.itemBooking.reallyDelete"), ["yes", "no"])
    },
    _doDelete: function() {
        var a = {
            bookingID: this._bookingMeta.bookingID
        };
        ajax.send(this.options.urls.del, a, function(a) {
            this._onDeleteBooking && this._onDeleteBooking(),
            this.fireEvent("clear", a.bookingID)
        }
        .bind(this))
    },
    _favouriteKit: function(a, b) {
        var c = $(b).getParent("tr[data-kit]");
        if (c) {
            var d = c.get("data-kit");
            a ? b.set(tools.getIcon("favorite")) : b.set(tools.getIcon("favorite_border")),
            ajax.send(this.options.urls.kitsFavourite, {
                kitID: d,
                favourite: a
            }, function() {})
        }
    },
    _deleteKit: function(a, b) {
        var c = $(b).getParent("tr[data-kit]");
        c && new seqta.ui.SlidePane({
            compact: !0,
            onYes: this._doDeleteKit.pass(c)
        }).showConfirm(Locale.get("general.reallyContinueT"), Locale.get("booking.itemBooking.reallyDeleteKit"), ["yes", "no"])
    },
    _doDeleteKit: function(a) {
        ajax.send(this.options.urls.kitsDelete, {
            kitIDs: [a.get("data-kit")]
        }, function() {
            a.destroy()
        }
        .bind(this))
    },
    _assignKitItems: function(a, b, c) {
        var d = 0;
        this._setDirty();
        var e = $(c).getParent("tr[data-kit]");
        if (e) {
            var f = e.get("data-kit").toInt()
              , g = this._kits.first(function(a) {
                return a.kitID === f
            });
            if (g) {
                this._cleanKitItemMatches(f),
                (a = a.toInt()) > (d = a.limit(0, g.availability.toInt())) && $(c).set("value", d),
                $(c).getParent("td.booking").set("data-sort-value", d);
                for (var j = 0; j < d; j++)
                    if (!this._matchKit(g))
                        return $(c).set("value", j),
                        $(c).getParent("tr").highlight(),
                        void (this._selectedKitQuantity[f] = j);
                d && 0 < d ? this._selectedKitQuantity[f] = d : delete this._selectedKitQuantity[f]
            }
        }
    },
    _matchKit: function(a) {
        var b = []
          , c = !0;
        if (a && a.entries && 0 < a.entries.length)
            for (var d = 0; d < a.entries.length; d++) {
                var e = a.entries[d]
                  , f = this._selectKitItemMatch(a.kitID, e.categoryID, e.type, e.quantity, b);
                f ? Array.prototype.push.apply(b, f) : c = !1
            }
        if (c)
            for (var g, h = 0; h < b.length; h++)
                (g = b[h].getElement("input")) && (g.set("checked", !0).set("data-checked", 1),
                this._elItemsTable.changeSelection(!0, null, g),
                g.set("disabled", !0),
                b[h].set("data-kit-selected", a.kitID));
        return c
    },
    _selectKitItemMatch: function(a, b, c, d) {
        for (var e, f = this._elItemsContainer.getElements("tr[data-item]"), g = [], h = 0, j = 0; j < f.length; j++)
            if ((e = f[j].getElement("input")) && "1" !== e.get("data-checked") && "false" !== f[j].get("available")) {
                var k = f[j].getElement("div.name").get("text");
                if ("?" === k.charAt(k.length - 1) && (k = k.slice(0, -1)),
                f[j].get("data-category").toInt() === b && k === c && (g.push(f[j]),
                ++h === d))
                    break
            }
        return h === d ? g : null
    },
    _cleanKitItemMatches: function(a) {
        for (var b, c = this._elItemsContainer.getElements("tr[data-item]"), d = 0; d < c.length; d++)
            (b = c[d].getElement("input")) && c[d].get("data-kit-selected") && c[d].get("data-kit-selected").toInt() === a && (b.erase("disabled"),
            c[d].erase("data-kit-selected"),
            b.set("checked", !1).erase("data-checked"),
            this._elItemsTable.changeSelection(!1, null, b))
    },
    _checkKitAvailability: function(a) {
        for (var b = -1, c = 0; c < a.entries.length; c++) {
            var d = a.entries[c]
              , e = this._items.filter(function(b) {
                var c, e;
                return d.categoryID === b.categoryID && d.type === b.type && (this._booking && (c = this._booking.items.first(function(a) {
                    return a.itemID === b.itemID
                })),
                e = b.available,
                c && c.kitID && (e = e || c.kitID === a.kitID)),
                d.categoryID === b.categoryID && d.type === b.type && e
            }
            .bind(this))
              , f = Math.floor(e.length / d.quantity);
            (-1 === b || f < b) && (b = f)
        }
        return this._kitMaxAvailability[a.kitID] = b,
        b
    },
    _checkKitObsolete: function(a, b) {
        if (0 === b)
            return !1;
        for (var c = !1, d = this._kits.first(function(b) {
            return b.kitID === a
        }), e = 0; e < d.entries.length; e++) {
            var f = d.entries[e];
            if (this._elItemsContainer.getElements("tr[data-kit-selected=" + d.kitID + "] div.name").filter(function(a) {
                return a.get("text") === f.type && a.getParent("tr").get("data-category").toInt() === f.categoryID
            }).length !== f.quantity * b) {
                c = !0;
                break
            }
        }
        return c
    },
    _setModePreferences: function() {
        var a = null
          , b = user.getPreference("booking.modes");
        return b && (a = b.value.split(",")),
        this._modes.map(function(c) {
            var d = !1;
            return null === b ? d = c.checked : a && -1 !== a.indexOf(c.value) && (d = !0),
            {
                value: c.value,
                label: c.label,
                checked: d
            }
        })
    },
    _setPersonalsPreferences: function() {
        var a = null
          , b = user.getPreference("booking.personals");
        return b && (a = b.value.split(",")),
        this._personals.map(function(c) {
            var d = !1;
            return null === b ? d = c.checked : a && -1 !== a.indexOf(c.value) && (d = !0),
            {
                value: c.value,
                label: c.label,
                checked: d
            }
        })
    },
    _toXML: function() {
        var a = []
          , b = [];
        this._categories.each(function(a) {
            b[a.value] = a.label
        }),
        a.push("<data>"),
        a.push("<booking>");
        var c = this._staff.first(function(a) {
            return a.xx_value === this._bookingMeta.staff
        }
        .bind(this));
        a.push("<staff>" + (c ? c.xx_display : "") + "</staff>"),
        a.push("<from>" + this._bookingMeta.from + "</from>"),
        a.push("<until>" + this._bookingMeta.to + "</until>"),
        a.push("<notes>" + (this._elNotes.get() || "") + "</notes>"),
        (!this._bookingMeta.bookingID || this._dirty) && a.push("<unconfirmed>t</unconfirmed>");
        var d = this._elItemsTable.get();
        return d && 0 < d.length && (a.push("<items>"),
        d.map(function(c) {
            var d = this._items.first(function(a) {
                return a.itemID === c
            });
            d && (a.push("<item>"),
            a.push("<category>" + b[d.categoryID] + "</category>"),
            a.push("<name>" + d.type + "</name>"),
            a.push("<key>" + d.key + "</key>"),
            a.push("<description>" + (d.description || "") + "</description>"),
            a.push("</item>"))
        }
        .bind(this)),
        a.push("</items>")),
        a.push("</booking>"),
        a.push("</data>"),
        a.join("")
    },
    _print: function() {
        ajax.print("reports/generic", {
            data: this._toXML(),
            xslt: "bookingPickList",
            weasy: !0
        })
    },
    _saveKit: function(a, b) {
        var c = new seqta.base.part.KitEditor({
            onSave: function() {
                this._loadTables()
            }
            .bind(this)
        })
          , d = $(b).getParent("tr[data-kit]");
        if (d) {
            var f = d.get("data-kit").toInt();
            c.load(f)
        } else {
            var e = this._elItemsTable.get(!0);
            c.show(e)
        }
    },
    _setDirty: function() {
        this._dirty = !0
    }
}),
seqta.base.part.KitEditor = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "_initUI", "load", "show", "_itemsToEntries", "_retrieveData", "_receiveData", "_createElements", "_mapCategory", "_getItems", "_toggleFavourite", "_categoryToElement", "_typeToElement", "_statusToElement", "_actionsToElement", "_updateKitEntry", "_getSelectedItems", "_isValidName", "_isValidCategory", "_isValidRequest", "_search", "_save", "_saved", "_reset", "_favouriteKit"],
    options: {
        urls: {
            loadKit: "booking/kits/get",
            loadItems: "booking/items/summary",
            loadKits: "booking/kits/get",
            save: "booking/kits/save"
        },
        quantity: {
            min: 0,
            max: 9999
        }
    },
    _element: null,
    _elements: null,
    _jaCategories: null,
    _jaItems: null,
    _joKitNames: null,
    _entries: null,
    _kitId: null,
    _data: null,
    _dlg: null,
    _shown: null,
    initialize: function(a) {
        this.setOptions(a),
        this._element = this._element || new Element("div",{
            class: "manageKit"
        })
    },
    toElement: function() {
        return this._element
    },
    _retrieveData: function() {
        var a = tools.func.createConcurrentHandler(["categories", "items", "kits"], this._receiveData);
        dataStore.retrieve("bookableCategories", a.categories),
        ajax.send(this.options.urls.loadItems, {}, a.items),
        ajax.send(this.options.urls.loadKits, {}, a.kits)
    },
    _receiveData: function(a, b, c) {
        this._jaCategories = a && a.categories || [],
        this._jaItems = b && b.items || [],
        this._joKitNames = {},
        c && c.kits && c.kits.length && c.kits.forEach(function(a) {
            this._joKitNames[a.categoryID] = this._joKitNames[a.categoryID] || [],
            this._joKitNames[a.categoryID].push(a.name.toLowerCase())
        }
        .bind(this)),
        this._initUI(c)
    },
    _initUI: function() {
        if (this._jaCategories && this._jaItems && this._joKitNames) {
            this._element.getChildren().dispose(),
            this._elements = this._createElements();
            var a = new Element("div",{
                class: "metaC"
            }).grab(new Element("div",{
                class: "meta"
            }).adopt(this._elements.categoryC, this._elements.nameC, this._elements.favourite));
            this._element.adopt(a, this._elements.results),
            this._shown && this.show()
        } else
            this._retrieveData()
    },
    _itemsToEntries: function(a) {
        var b = [];
        return a && Object.each(a.groupBy(function(a) {
            return a.categoryID
        }), function(a) {
            var c = a.groupBy(function(a) {
                return a.type.toLowerCase()
            });
            Object.each(c, function(a) {
                b.push({
                    categoryID: a[0].categoryID,
                    type: a[0].type,
                    quantity: a.length
                })
            })
        }),
        b
    },
    load: function(a) {
        a && (this._kitId = a,
        ajax.send(this.options.urls.loadKit, {
            kitIDs: [a],
            staffID: 0
        }, this.show))
    },
    show: function(a) {
        return a && (this._data = a && a.kits && a.kits.length && a.kits[0]),
        this._entries || (this._entries = (this._kitId ? this._data && this._data.entries : this._itemsToEntries(a)) || []),
        this._shown ? (this._kitId && this._data && (this._elements.name.setValue(this._data.name || "", !0),
        this._data.categoryID && this._elements.category.set(this._data.categoryID, !0),
        this._elements.favourite.setToggled(this._data.favourite)),
        this._dlg = new seqta.ui.SlidePane({
            extraClass: "kitPane tall",
            enableKeys: !1,
            disposable: !1,
            onSave: this._save,
            onCancel: this._reset
        }),
        this._elements.results.renderData(this._getItems()),
        void this._dlg.show(Locale.get("booking.manageKit." + (0 < this._kitId ? "editT" : "newT")), this._element, ["save", "cancel"])) : (this._shown = !0,
        void this._initUI())
    },
    _createElements: function() {
        var a = String.uniqueID
          , b = new seqta.ui.SingleSelect({
            placeholder: Locale.get("booking.manageKit.categoryT"),
            id: a(),
            onChange: function() {
                var a = this._elements.categoryC.getChildren(".warning");
                a.length && a.dispose()
            }
            .bind(this)
        },this._jaCategories.map(function(a) {
            return {
                xx_display: a.name,
                xx_value: a.categoryID
            }
        }))
          , c = new Element("div",{
            class: "categoryC"
        }).grab(new Element("div",{
            class: "category"
        }).adopt(new Element("label",{
            html: Locale.get("booking.manageKit.category") + ": ",
            for: b.toElement().get("id")
        }), b))
          , d = new seqta.ui.ShortText({
            placeholder: Locale.get("booking.manageKit.nameT"),
            id: a(),
            maxLength: 256,
            onChange: this._isValidName.bind(this, null),
            required: !0
        })
          , e = new Element("div",{
            class: "nameC"
        }).grab(new Element("div",{
            class: "name"
        }).adopt(new Element("label",{
            html: Locale.get("booking.manageKit.name") + ": ",
            for: d.toElement().get("id")
        }), d));
        return {
            favourite: new seqta.ui.ButtonToggle({
                defaultValue: tools.getIcon("favorite"),
                toggled: !0,
                extraClass: "favourite",
                title: Locale.get("booking.manageKit.favouriteT"),
                onToggle: this._favouriteKit
            }),
            categoryC: c,
            category: b,
            nameC: e,
            name: d,
            results: new seqta.ui.ResultsTable({
                onFilter: this._search,
                rowAttributes: {
                    "data-type": "type",
                    "data-category": "categoryID"
                },
                enableFooter: !1,
                footer: {
                    enabled: !0,
                    showSelected: !0,
                    getSelected: this._getSelectedItems,
                    noneSelectedMessage: '<div class="warning">' + Locale.get("booking.manageKit.warnNoItem") + "</div>"
                }
            },[{
                key: "category",
                type: "buttonChecklist",
                options: {
                    items: this._jaCategories.map(this._mapCategory),
                    allButton: !0
                },
                value: Locale.get("booking.manageKit.resultsTable.category")
            }, {
                key: "name",
                value: Locale.get("booking.manageKit.resultsTable.name")
            }, {
                key: "quantity",
                value: Locale.get("booking.manageKit.resultsTable.quantity")
            }],[this._categoryToElement(), this._textToElement("type"), this._quantityToElement()])
        }
    },
    _favouriteKit: function(a, b) {
        a ? b.set(tools.getIcon("favorite")) : b.set(tools.getIcon("favorite_border"))
    },
    _mapCategory: function(a) {
        return {
            value: a.categoryID,
            label: a.name
        }
    },
    _getItems: function() {
        var a = this._entries.filter(this._getSelectedItems);
        return this._jaItems.forEach(function(b) {
            var c = this._entries.first(function(a) {
                return a.type.toLowerCase() === b.type.toLowerCase() && a.categoryID === b.categoryID
            })
              , d = {
                categoryID: b.categoryID,
                type: b.type,
                quantity: c && c.quantity || 0
            };
            c || a.push(d)
        }
        .bind(this)),
        a
    },
    _categoryToElement: function() {
        var a = {};
        return this._jaCategories.each(function(b) {
            a[b.categoryID] = b.name
        }),
        function(b) {
            return new Element("div",{
                class: "category",
                text: a[b.categoryID]
            })
        }
    },
    _textToElement: function(a) {
        return function(b) {
            return new Element("div",{
                class: a,
                text: b[a]
            })
        }
    },
    _quantityToElement: function() {
        return function(a) {
            return new seqta.ui.ShortText({
                min: this.options.quantity.min,
                max: this.options.quantity.max,
                maxLength: 4,
                defaultValue: a.quantity || "",
                type: "number",
                placeholder: "" + this.options.quantity.min,
                onKeyUp: function(a) {
                    a.length > this.options.maxLength && this.setValue(a.slice(0, this.options.maxLength), !0)
                },
                onChange: this._updateKitEntry.bind(this, a)
            })
        }
        .bind(this)
    },
    _updateKitEntry: function(a, b) {
        var c = this._entries.first(function(b) {
            return b.categoryID === a.categoryID && b.type.toLowerCase() === a.type.toLowerCase()
        });
        b = (b || "0").toInt(),
        c ? 0 === b ? this._entries.erase(c) : c.quantity = b : 0 < b && this._entries.push({
            categoryID: a.categoryID,
            type: a.type,
            quantity: b
        }),
        this._elements.results.updateFooterLabels(null, this._entries.filter(this._getSelectedItems).length)
    },
    _getSelectedItems: function(a) {
        return a.quantity && 0 < a.quantity
    },
    _isValidName: function(a, b) {
        var c = !0;
        b = (b || this._elements.name.get() || "").trim(),
        a = (a || this._elements.category.get() || "").toInt();
        var d = this._elements.nameC.getChildren(".warning");
        return this._isValidCategory(a) || (c = !1),
        !b || !this._kitId && a && this._joKitNames[a] && this._joKitNames[a].contains(b.toLowerCase()) ? (!d.length && this._elements.nameC.grab(new Element("div",{
            class: "warning",
            html: b ? Locale.get("booking.manageKit.warnDuplicateName") : Locale.get("booking.manageKit.warnEmptyName")
        })),
        c = !1) : d.length && d.dispose(),
        c
    },
    _isValidCategory: function(a) {
        var b = !0
          , c = this._elements.categoryC.getChildren(".warning");
        return !a || 0 >= a ? (b = !1,
        !c.length && this._elements.categoryC.grab(new Element("div",{
            class: "warning",
            html: Locale.get("booking.manageKit.warnNoCategory")
        }))) : c.length && c.dispose(),
        b
    },
    _isValidRequest: function(a) {
        var b = !0;
        if (a.items && 0 !== a.items.length) {
            for (var c, d = 0; d < a.items.length; d++)
                if (0 > (c = a.items[d].quantity.toInt()) || 9999 < c) {
                    b = !1;
                    break
                }
        } else
            this._elements.results.updateFooterLabels(null, 0),
            b = !1;
        return b && this._isValidName(a.categoryID, a.name) || (b = !1),
        b
    },
    _search: function() {
        var b = {
            categoryIDs: Object.merge({}, this._elements.results.getAllFiltersValue()).category
        };
        ajax.send(this.options.urls.loadItems, b, function(a) {
            this._jaItems = a.items,
            this._elements.results.renderData(this._getItems())
        }
        .bind(this))
    },
    _save: function() {
        var a = this._entries.filter(this._getSelectedItems)
          , b = {
            kitID: this._kitId || void 0,
            categoryID: (this._elements.category.get() || "").toInt(),
            name: this._elements.name.getValue(),
            favourite: this._elements.favourite.getToggled(),
            items: a
        };
        this._isValidRequest(b) ? ajax.send(this.options.urls.save, b, this._saved) : this._dlg.show.bind(this, Locale.get("booking.manageKit." + (0 < this._kitId ? "editT" : "newT")), this._element, ["save", "cancel"]).delay(500)
    },
    _saved: function() {
        this._reset(),
        this.fireEvent("save")
    },
    _reset: function() {
        this._elements = null,
        this._jaCategories = null,
        this._jaItems = null,
        this._joKitNames = null,
        this._entries = null,
        this._kitId = null,
        this._dlg = null,
        this._shown = null
    }
}),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.editor = seqta.base.part.calendar.editor || {},
seqta.base.part.calendar.editor.Adhoc = new Class({
    Implements: [Options, Events],
    Binds: ["show", "_createConcurrentHandler", "_retrieveData", "_retrieveClassunit", "_receiveData", "_performShow", "_createElements", "_createDetailFields", "_createDetailSelectors", "_createDateTimeSelector", "_createTermSelector", "_updateTerms", "_filterEffectiveTerms", "_createField", "_mapGroupLookup", "_applyErrors", "_setFieldValues", "_setStudentSelectorOptions", "_getInstanceData", "_getUnitData", "_saveUnit", "_afterSaveUnit", "_saveInstance", "_afterSaveInstance", "_checkErrors", "_delete", "_doDelete"],
    options: {
        canEditAll: !1,
        urls: {
            save: "json/timetable/adhoc/save",
            load: "json/timetable/get"
        }
    },
    _element: null,
    _dlg: null,
    _data: null,
    _elements: null,
    _context: null,
    _settings: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._context = b,
        this._data = b.data || {
            date: b.entry.date,
            from: b.entry.from,
            until: b.entry.until,
            staff: b.staffID
        },
        this._element = new Element("div",{
            class: "adhocClassEditor"
        })
    },
    show: function() {
        const a = this;
        dataStore.retrieve("siteSettings", function(b) {
            a._settings = b,
            a._retrieveData(a._context.classunit && a._context.classunit.id, a._context.entry.date, a._createConcurrentHandler(a._receiveData, !a._lookups))
        })
    },
    _createConcurrentHandler: function(a, b) {
        var c = ["retrieveClassunit"];
        return b && c.push("students", "groups", "staff", "subjects", "terms"),
        tools.func.createConcurrentHandler(c, a)
    },
    _retrieveData: function(a, b, c) {
        a ? this._retrieveClassunit(a, b, !0, c.retrieveClassunit) : c.retrieveClassunit(null),
        this._lookups || (dataStore.retrieve("msStudents", c.students),
        dataStore.retrieve("groups", c.groups),
        dataStore.retrieve("msStaff", c.staff),
        dataStore.retrieve("msSubjects", c.subjects),
        dataStore.retrieve("terms", c.terms))
    },
    _retrieveClassunit: function(a, b, c, d) {
        ajax.send(this.options.urls.load, {
            classunit: a,
            date: b,
            enrolments: !!c,
            adhoc_classunit: !0
        }, d)
    },
    _receiveData: function(a, b, c, d, e, f) {
        this._classunit = a && a.adhoc_classunit,
        this._enrolments = a && a.enrolments,
        this._lookups = this._lookups || {
            students: b && b.elements,
            groups: c && c.groups,
            staff: d && d.elements,
            subjects: e && e.elements,
            terms: f
        },
        this._performShow()
    },
    _performShow: function() {
        if (this._dlg = this._dlg || new seqta.ui.SlidePane({
            enableKeys: !1,
            extraClass: "adhoc-pane",
            disposable: !0,
            onSave: this._saveUnit,
            onDelete: this._delete
        }),
        !this._elements) {
            var a = this._data.date + " " + this._data.from
              , b = this._data.date + " " + this._data.until;
            if (this._elements = this._createElements(this._data && this._data.id, a, b, this.options.canEditAll),
            this._element.adopt(this._elements.studentSelector, this._elements.details.container),
            this._setStudentSelectorOptions(this._elements.studentSelector, this._lookups.students, this._lookups.groups),
            this._elements.details.subject.selector.setValues(this._lookups.subjects),
            this._elements.details.staff && this._elements.details.staff.selector.setValues(this._lookups.staff),
            this._elements.details.term) {
                var c = this._filterEffectiveTerms(a.toDate(), b.toDate(), this._lookups.terms);
                this._elements.details.term.selector.setValues(c)
            }
            this._setFieldValues(this._elements, this._data, this._classunit, this._enrolments)
        }
        this._applyErrors(this._elements, this._errors),
        this._dlg.show(Locale.get("timetable.editAdhocClassT"), this._element, [this._data.id ? ["save", "delete"] : "save", "cancel"], null, !0)
    },
    _createElements: function(a, b, c, d) {
        return {
            studentSelector: new seqta.ui.AnyoneSelect({
                enableMany: {
                    staff: !1,
                    students: !0,
                    contacts: !1,
                    studentGroups: !0
                }
            }),
            details: this._createDetailFields(this._createDetailSelectors(a, b, c, d))
        }
    },
    _createDetailFields: function(a) {
        var b = {
            subject: Locale.get("timetable.subjectDesc"),
            number: Locale.get("timetable.numberDesc"),
            term: Locale.get("timetable.termDesc")
        }
          , c = Object.map(a, tools.func.compose(function(a, c) {
            return {
                labelText: "datetime" === c ? null : Locale.get("calendar.class." + c),
                selector: a,
                extraClass: c,
                description: b[c] || null
            }
        }, this._createField));
        return c.container = new Element("div",{
            class: "details"
        }),
        c.container.adopt(c.datetime && c.datetime.container, c.subject && c.subject.container, c.number && c.number.container, c.attendance && c.attendance.container, c.room && c.room.container, c.term && c.term.container, c.staff && c.staff.container),
        c
    },
    _createDetailSelectors: function(a, b, c, d) {
        var e = new seqta.ui.RoomSelect({
            placeholder: Locale.get("calendar.event.selectRoom")
        },a,"class",b,c)
          , f = {
            datetime: this._createDateTimeSelector(e, b, c),
            subject: new seqta.ui.SingleSelect({
                placeholder: Locale.get("timetable.manageSubject"),
                presorted: !0
            },[]),
            number: new seqta.ui.ShortText({
                standardValue: "1",
                maxLength: 8
            }),
            attendance: new seqta.ui.Checkbox({
                defaultValue: !(this._settings && this._settings["classes.allowAttendance"] && "disabled" === this._settings["classes.allowAttendance"].value)
            }),
            room: e
        };
        return a || (f.term = new seqta.ui.SingleSelect({
            placeholder: Locale.get("timetable.manageTerm"),
            presorted: !0
        },[])),
        d && (f.staff = new seqta.ui.SingleSelect({},[])),
        f
    },
    _createDateTimeSelector: function(a, b, c) {
        var d = new seqta.ui.DateTimeRange({
            onChange: function(e) {
                this._updateTerms(e.from, e.until) ? a.setDates(e.from, e.until) : !this._elements.details.term && d.set(b, c)
            }
            .bind(this)
        });
        return d.set(b, c),
        d
    },
    _updateTerms: function(a, b) {
        var c = this._filterEffectiveTerms(a, b, this._lookups.terms);
        return this._elements.details.term && this._elements.details.term.selector.setValues(c),
        !(!c || !c.length)
    },
    _filterEffectiveTerms: function(a, b, c) {
        let d = c.filter(function(c) {
            return a <= c.end.toDate().setHours(23, 59, 59, 999) && b >= c.start.toDate()
        });
        return d = d.sort((c,a)=>new Date(a.start) - new Date(c.start) || new Date(a.end) - new Date(c.end))
    },
    _createField: function(a) {
        var b = {};
        if (!a)
            throw Error("Field creation options unexpectedly null");
        return b.container = new Element("div",{
            class: "field " + (a.extraClass || "")
        }),
        a.labelText && a.labelText.length && (b.label = new Element("label",{
            html: a.labelText
        })),
        a.description && a.description.length && (b.description = new Element("div",{
            class: "description",
            html: a.description
        })),
        b.selector = a.selector,
        b.container.adopt(b.label, b.selector, b.description),
        b
    },
    _mapGroupLookup: function(a) {
        return a && {
            colour: a.colour || null,
            icon: a.icon || null,
            xx_display: a.name,
            xx_value: a.id,
            id: a.id,
            xx_display_extra: Locale.get("general.numberStudents", a.membershipCount),
            description: a.description || a.name
        }
    },
    _applyErrors: function(a, b) {
        var c = $(a.details.subject.selector)
          , d = a.details.term && $(a.details.term.selector);
        b && b.contains("subject") ? c.addClass("error") : c.removeClass("error"),
        d && (b && b.contains("term") ? d.addClass("error") : d.removeClass("error"))
    },
    _setFieldValues: function(a, b, c, d) {
        a.details.staff && a.details.staff.selector.set(b.staff, !0),
        b.room && a.details.room.selector.set(b.room, !0),
        c && d && (a.studentSelector.clear(!0),
        a.studentSelector.addStudents(d.students, !0),
        a.studentSelector.addStudentGroups(d.groups, !0),
        a.details.subject.selector.set(c.subject, !0),
        !b.id && a.details.term.selector.set(c.term, !0),
        a.details.attendance.selector.set(!(void 0 !== c.attendance) || c.attendance),
        a.details.number.selector.set(c.class_number || ""))
    },
    _setStudentSelectorOptions: function(a, b, c) {
        b = seqta.ta.common.postProcessStudents(b),
        a.setStudentsData(b),
        c = c && c.map(this._mapGroupLookup),
        a.setStudentGroupData(c || []),
        a.clear(!0)
    },
    _getInstanceData: function(a, b, c, d, e) {
        var f = a.details.datetime.selector.get();
        return {
            id: c || void 0,
            new: !c,
            classunit: b,
            type: "adhoc",
            date: f.from.print("sqlDate"),
            from: f.from.print("sqlTime"),
            until: f.until.print("sqlTime"),
            staff: d ? a.details.staff.selector.get() : e,
            room: a.details.room.selector.get()
        }
    },
    _getUnitData: function(a, b) {
        return Object.merge({}, a, {
            new: !(a && a.id),
            class_number: b.details.number.selector.get(),
            subject: b.details.subject.selector.get(),
            students: b.studentSelector.getStudents(),
            groups: b.studentSelector.getStudentGroups(),
            attendance: b.details.attendance.selector.getChecked(),
            term: a && a.id || !b.details.term ? a.term : b.details.term.selector.get()
        })
    },
    _saveUnit: function() {
        var a = this._getUnitData(this._classunit, this._elements);
        this._errors = this._checkErrors(a),
        this._errors && this._errors.length ? this._performShow.delay(100) : ajax.send(this.options.urls.save, {
            mode: "save",
            data_type: "unit",
            data: a,
            date: this._context.entry.date
        }, this._afterSaveUnit.bind(this, a))
    },
    _afterSaveUnit: function(a, b) {
        var c = a.id || b.classunit;
        this._retrieveClassunit(c, this._context.entry.date, !1, function(b) {
            this._classunit = b.adhoc_classunit,
            a.new || msg.send("calendar.classunit.updated." + c, this._classunit),
            this._saveInstance()
        }
        .bind(this))
    },
    _saveInstance: function() {
        var a = this._getInstanceData(this._elements, this._classunit.id, this._data.id, this.options.canEditAll, this._context.staffID)
          , b = Object.clone(a);
        b.room = this._elements.details.room.selector.getCode(),
        ajax.send(this.options.urls.save, {
            mode: "save",
            data_type: "instance",
            data: a,
            date: this._context.entry.date
        }, this._afterSaveInstance.bind(this, b))
    },
    _afterSaveInstance: function(a, b) {
        this._data = Object.merge({}, a, {
            id: a.id || b.instance,
            new: null
        }),
        a.id ? (msg.send("calendar.classinstance.updated." + a.id, this._data),
        msg.send("calendar.classinstance.data.update", this._data)) : (msg.send("calendar.classinstance.new", [this._data, this._classunit]),
        msg.send("calendar.classinstance.new.data.update", [this._data, this._classunit]))
    },
    _checkErrors: function(a) {
        var b = [];
        return a.subject || b.push("subject"),
        a.new && !a.term && b.push("term"),
        b
    },
    _delete: function() {
        var a = [{
            label: Locale.get("calendar.deleteSingle"),
            icon: "list-remove",
            handler: this._doDelete.bind(this, !1)
        }, {
            label: Locale.get("calendar.deleteFuture"),
            icon: "delete",
            handler: this._doDelete.bind(this, !0)
        }];
        (new seqta.ui.DialogOptions).show(Locale.get("calendar.deleteInstancesT", this._classunit.code), a, null, null)
    },
    _doDelete: function(a) {
        ajax.send(this.options.urls.save, {
            mode: "delete",
            deleteFuture: a,
            data_type: "instance",
            data: this._data
        }, msg.send.bind(msg, "calendar.classunit.deleted." + this._classunit.id, {
            future: a,
            date: this._data.date,
            from: this._data.from,
            id: this._data.id,
            classunit: this._data.classunit
        }))
    }
}),
function() {
    var a = function(a) {
        new seqta.base.part.calendar.editor.Adhoc({
            canEditAll: a.canEditAll
        },a).show()
    };
    msg.register("calendar.edit.class", a),
    msg.register("calendar.new.class", a)
}(),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.editor = seqta.base.part.calendar.editor || {},
seqta.base.part.calendar.editor.Clone = new Class({
    Implements: [Options, Events],
    Binds: ["show", "_createElements", "_setDefaultRanges", "_validateRanges", "_getData", "_save", "_postSave", "_loadSettings"],
    options: {
        urls: {
            adhoc: "json/timetable/adhoc/save",
            events: "json/events/clone"
        }
    },
    _dlg: null,
    _context: null,
    _element: null,
    _elements: null,
    _maxTargetDays: void 0,
    _userTypeSettingMap: {
        staff: "events.days.clone.max",
        tutor: "events.days.clone.max",
        student: "coneqt-s.events.days.clone.max",
        contact: "coneqt-p.events.days.clone.max"
    },
    _defaultSettings: {
        "events.days.clone.max": 1061,
        "coneqt-s.events.days.clone.max": 61,
        "coneqt-p.events.days.clone.max": 61
    },
    initialize: function(a, b) {
        this.setOptions(a),
        this._context = b,
        this._element = new Element("div",{
            class: "adhocClone"
        }),
        dataStore.retrieve("siteSettings", this._loadSettings)
    },
    show: function() {
        this._dlg = this._dlg || new seqta.ui.SlidePane({
            compact: !0,
            enableKeys: !1,
            disposable: !0,
            onSave: this._save
        }),
        this._elements = this._createElements(this._validateRanges),
        this._element.adopt(this._elements.fromContainer, this._elements.toContainer, this._elements.deleteExistingContainer),
        this._setDefaultRanges(this._elements, this._context),
        this._dlg.show(Locale.get("calendar.clone.title", [this._context.title]), this._element, ["save", "cancel"], null, !0)
    },
    _createElements: function(a) {
        var b = {
            fromRange: new seqta.ui.DateRange({
                onChange: a
            }),
            toRange: new seqta.ui.DateRange({
                onChange: a
            }),
            deleteExisting: new seqta.ui.Checkbox
        };
        return b.fromContainer = new Element("div",{
            class: "field from"
        }).adopt(new Element("label",{
            html: Locale.get("calendar.clone.from")
        }), b.fromRange, new Element("div",{
            class: "description",
            html: Locale.get("calendar.clone.fromDescription")
        })),
        b.toContainer = new Element("div",{
            class: "field to"
        }).adopt(new Element("label",{
            html: Locale.get("calendar.clone.to")
        }), b.toRange, new Element("div",{
            class: "description",
            html: Locale.get("calendar.clone.toDescription")
        })),
        b.deleteExistingContainer = new Element("div",{
            class: "field existing"
        }).adopt(new Element("label",{
            html: Locale.get("calendar.clone.deleteExisting")
        }), b.deleteExisting, new Element("div",{
            class: "description",
            html: Locale.get("calendar.clone.deleteDescription")
        })),
        b
    },
    _setDefaultRanges: function(a, b) {
        a.fromRange.setFrom(b.start),
        a.fromRange.setUntil(b.end),
        a.toRange.setFrom((new Date).parseString(b.start).addDays(7)),
        a.toRange.setUntil((new Date).parseString(b.start).addDays(7))
    },
    _validateRanges: function() {
        var a = this._dlg.enableButton
          , b = this._elements.fromRange.getFrom().toDate()
          , c = this._elements.fromRange.getUntil().toDate()
          , d = this._elements.toRange.getFrom().toDate()
          , e = this._elements.toRange.getUntil().toDate();
        this._element.getElements(".error").dispose(),
        tools.rangesIntersect(b, c, d, e) ? ($(this._elements.toRange).grab(new Element("div",{
            class: "error",
            "data-cause": "range",
            html: Locale.get("calendar.clone.rangeError")
        }), "after"),
        a = this._dlg.disableButton) : (e - d) / 864e5 + 1 > this._maxTargetDays && ($(this._elements.toRange).grab(new Element("div",{
            class: "error",
            "data-cause": "range",
            html: Locale.get("calendar.clone.rangeExcess")
        }), "after"),
        a = this._dlg.disableButton),
        a("save")
    },
    _getData: function(a, b) {
        var c = {
            fromStart: a.fromRange.getFrom(),
            fromEnd: a.fromRange.getUntil(),
            toStart: a.toRange.getFrom(),
            toEnd: a.toRange.getUntil(),
            deleteExisting: a.deleteExisting.getChecked()
        };
        return "adhoc" === b.type ? c.classunit = b.id : c.id = b.id,
        c
    },
    _save: function() {
        var a = this._getData(this._elements, this._context);
        "adhoc" === this._context.type ? ajax.send(this.options.urls.adhoc, {
            mode: "clone",
            data_type: "unit",
            data: a
        }, msg.send.bind(msg, "timetable.reload")) : ajax.send(this.options.urls.events, a, this._postSave)
    },
    _postSave: function(a) {
        a && (msg.send.bind(msg, "timetable.reload"),
        a.cloned ? $alertSubtle(Locale.get("calendar.clone.cloneSuccessfullT"), Locale.get("calendar.clone.cloneSuccessfull")) : $alertSubtle(Locale.get("calendar.clone.cloneUnSuccessfullT"), Locale.get("calendar.clone.cloneUnSuccessfull", [a.numberInstances, a.maxInstancesAllowed])))
    },
    _loadSettings: function(a) {
        var b, c;
        b = this._userTypeSettingMap[user.type || "student"],
        c = this._defaultSettings[b],
        this._maxTargetDays = a[b] ? a[b].value : c
    }
}),
function() {
    var a = function(a) {
        var b = {};
        "staff" !== user.type && (b.urls = {
            events: "events/clone"
        }),
        new seqta.base.part.calendar.editor.Clone(b,a).show()
    };
    msg.register("chrome.ready", ()=>{
        "staff" !== user.type && (msg.register("calendar.clone.class", a),
        msg.register("calendar.clone.event", a))
    }
    )
}(),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.editor = seqta.base.part.calendar.editor || {},
seqta.base.part.calendar.editor.Event = new Class({
    Implements: [Options, Events],
    Binds: ["show", "_receiveData", "_mapLookupsStatus", "_canBookRooms", "_getMaxInviteeCount", "_performShow", "_applyErrors", "_setFieldValues", "_extractInvitees", "_setStudentSelectorOptions", "_mapGroupLookup", "_createElements", "_createDetailFields", "_createDetailSelectors", "_createField", "_createTypeOptions", "_getData", "_getInviteeData", "_save", "_afterSave", "_updateCalendar", "_delete", "_doDelete", "_selectTab"],
    options: {
        defaultColour: "#dddddd",
        urls: {
            save: "json/events/save",
            delete: "json/events/delete"
        },
        defaultInviteeMax: {
            staff: 30,
            student: 10,
            contact: 10,
            tutor: 10
        },
        canEditAll: !1,
        defaultType: "appointment",
        allowBooking: !1
    },
    _dlg: null,
    _element: null,
    _elements: null,
    _elTabs: null,
    _tabs: null,
    _tabContainer: null,
    _elBooking: null,
    _elDetails: null,
    _data: null,
    _errors: null,
    _inviteeTypes: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._inviteeTypes = b.inviteeTypes,
        this._data = b.data || {
            from: b.entry.date + " " + b.entry.from,
            until: b.entry.date + " " + b.entry.until
        },
        this._tabs = [{
            label: Locale.get("calendar.event.details"),
            id: "event"
        }],
        this.options.allowBooking && (seqta.auth.check("booking.edit.all") || seqta.auth.check("booking.edit") && (!b.data || "staff" === b.data.event.owner_type && b.data.event.owner_id === user.userID)) && this._tabs.push({
            label: this._data.bookingID ? Locale.get("calendar.event.editBooking") : Locale.get("calendar.event.addBooking"),
            id: "booking"
        }),
        this._tabContainer = new Element("div",{
            class: "tabContainer"
        }),
        this._elTabs || (this._elTabs = new seqta.ui.TabSet({
            onSelect: this._selectTab,
            alignment: "top"
        },this._tabs)),
        this._element = new Element("div",{
            class: "calendarEventEditor"
        }).adopt(this._elTabs, this._tabContainer)
    },
    show: function() {
        if (this._lookups)
            this._performShow();
        else {
            var a = tools.func.createConcurrentHandler(["students", "staff", "contacts", "settings"], this._receiveData);
            "staff" === user.type || this._inviteeTypes.students ? dataStore.retrieve("staff" === user.type ? "msStudents" : "students", a.students) : a.students(),
            "staff" === user.type || this._inviteeTypes.staff ? dataStore.retrieve("staff" === user.type ? "msStaff" : "staff", a.staff) : a.staff(),
            "staff" === user.type || this._inviteeTypes.contacts ? dataStore.retrieve("staff" === user.type ? "contactsEngage" : "contacts", a.contacts) : a.contacts(),
            dataStore.retrieve("siteSettings", a.settings)
        }
    },
    _receiveData: function(a, b, c, d) {
        this._lookups = this._lookups || {
            canBook: this._canBookRooms(d, user.getPrefix(), user.type),
            maxInvitees: this._getMaxInviteeCount(d, user.getPrefix(), user.type, this.options.defaultInviteeMax),
            students: a && seqta.ta.common ? seqta.ta.common.postProcessStudents(a && a.elements) : a && a.map(tools.mapSelectEntry),
            staff: b && b.elements || b && b.map(tools.mapSelectEntry),
            contacts: c && c.map(tools.mapSelectEntry)
        },
        this._data && this._data.invitees && this._data.event && "appointment" === this._data.event.event_type && (this._lookups.students = this._lookups.students && this._lookups.students.map(this._mapLookupsStatus.bind(null, this._data.invitees, "student")),
        this._lookups.staff = this._lookups.staff && this._lookups.staff.map(this._mapLookupsStatus.bind(null, this._data.invitees, "staff")),
        this._lookups.contacts = this._lookups.contacts && this._lookups.contacts.map(this._mapLookupsStatus.bind(null, this._data.invitees, "contact"))),
        this._performShow()
    },
    _mapLookupsStatus: function(a, b, c) {
        var d = this._getInvitee(a, {
            id: c.xx_value,
            type: b
        });
        if (d && d.reply) {
            var e = Locale.get("calendar.event.reply." + (d && d.reply || "default"));
            return Object.merge({}, c, {
                xx_display_extra: c.xx_display_extra ? c.xx_display_extra + " (" + e + ")" : e,
                xx_html_extra: c.xx_html_extra ? c.xx_html_extra + " (" + e + ")" : e
            })
        }
        return c
    },
    _canBookRooms: function(a, b, c) {
        var d;
        return "staff" === c ? d = !0 : d = "enabled" === ((d = a[b + ".roombooking.enabled"]) && d.value),
        d
    },
    _getMaxInviteeCount: function(a, b, c, d) {
        var e = "events.invitees.max"
          , f = a["staff" === c ? e : b + "." + e];
        return (f = f && f.value) || (f = d[c]),
        f
    },
    _performShow: function() {
        this._dlg = this._dlg || new seqta.ui.SlidePane({
            enableKeys: !1,
            extraClass: "tall",
            disposable: !0,
            onSave: this._save,
            onDelete: this._delete,
            onCancel: msg.send.bind(msg, "calendar.event.cancel")
        }),
        this.typeOptions = this.typeOptions || this._createTypeOptions(),
        this._elements || (this._elements = this._createElements({
            types: this.typeOptions,
            id: this._data.id,
            from: this._data.from,
            until: this._data.until,
            canEditAll: this.options.canEditAll && (!this._data.id || "staff" === this._data.event.owner_type),
            canBook: this._lookups.canBook,
            inviteeTypes: this._inviteeTypes,
            userType: user.type,
            defaultType: this.options.defaultType
        }),
        this._setStudentSelectorOptions(this._elements.studentSelector, this._lookups.students, this._lookups.staff, this._lookups.contacts),
        this._elements.details.staff && this._elements.details.staff.selector.setValues(this._lookups.staff),
        this._setFieldValues(this._elements, this._data)),
        this._applyErrors(this._elements, this._errors, this._lookups.maxInvitees),
        this._elTabs.setSelected(this._tabs[0].id),
        this._dlg.show(Locale.get("calendar.event.editT"), this._element, [this._data.id ? ["save", "delete"] : "save", "cancel"], null, !0)
    },
    _applyErrors: function(a, b, c) {
        $(a.details.title.selector).toggleClass("error", !(!b || !b.contains("title"))),
        a.details.inviteeMax && a.details.inviteeMax.dispose(),
        b && b.contains("invitees") && (a.details.inviteeMax = new Element("div",{
            class: "message error",
            html: Locale.get("calendar.event.maxInvitees").substitute({
                n: c
            })
        }),
        a.details.title.container.grab(a.details.inviteeMax, "after"))
    },
    _setFieldValues: function(a, b) {
        b && (a.studentSelector.clear(!0),
        a.studentSelector.addStudents(this._extractInvitees(b.invitees, "student"), !0),
        a.studentSelector.addStaff(this._extractInvitees(b.invitees, "staff"), !0),
        a.studentSelector.addContacts(this._extractInvitees(b.invitees, "contact"), !0),
        a.details.title.selector.set(b.event ? b.event.title : "", !0),
        a.details.colour.set(b.event && b.event.colour || this.options.defaultColour),
        a.details.datetime.selector.set(b.from, b.until),
        a.details.type && a.details.type.selector.set(b.event && b.event.event_type, !0),
        a.details.privacy.selector.set(b.event && b.event.privacy),
        a.details.room && a.details.room.selector.set(b.room, !0),
        a.details.notes.selector.set(b.event ? b.event.notes : ""),
        a.details.staff && a.details.staff.selector.set(b.event && b.event.owner_id || user.userID, !0))
    },
    _extractInvitees: function(a, b) {
        return a && a.filter(function(a) {
            return !a.admin && a.person_type === b
        }).map(function(a) {
            return a.person_id
        })
    },
    _setStudentSelectorOptions: function(a, b, c, d) {
        b && a.setStudentsData(b),
        c && a.setStaffData(c),
        d && a.setContactsData(d)
    },
    _createElements: function(a) {
        return {
            studentSelector: new seqta.ui.AnyoneSelect({
                enableMany: {
                    staff: "staff" === a.userType,
                    students: "staff" === a.userType,
                    contacts: "staff" === a.userType,
                    studentGroups: !1
                }
            }),
            details: this._createDetailFields(this._createDetailSelectors(a))
        }
    },
    _createDetailFields: function(a) {
        var b = ["type", "privacy"]
          , c = Object.map(a, tools.func.compose(function(a, c) {
            return {
                labelText: "title" === c ? null : Locale.get("calendar.event." + c),
                selector: a,
                extraClass: c,
                description: b.contains(c) ? Locale.get("calendar.event.descriptions." + c) : null
            }
        }, this._createField));
        return c.colour = new seqta.ui.ColourButton({}),
        c.title.container.grab(c.colour),
        c.container = new Element("div",{
            class: "details"
        }),
        c.container.adopt(c.title && c.title.container, c.datetime && c.datetime.container, c.type && c.type.container, c.privacy && c.privacy.container, c.room && c.room.container, c.staff && c.staff.container, c.notes && c.notes.container),
        c
    },
    _createDetailSelectors: function(a) {
        var b = {
            title: new seqta.ui.ShortText({
                placeholder: Locale.get("calendar.event.titlePlaceholder"),
                maxLength: 128
            }),
            privacy: new seqta.ui.Checkbox({
                defaultValue: !1
            }),
            notes: new seqta.ui.FormattedText({},"")
        };
        return "staff" === a.userType && (b.type = new seqta.ui.Pillbox({},a.types,a.defaultType)),
        a.canBook && (b.room = new seqta.ui.RoomSelect({
            placeholder: Locale.get("calendar.event.selectRoom")
        },a.id,"event",a.from,a.until)),
        b.datetime = new seqta.ui.DateTimeRange({
            onChange: function(a) {
                b.room && b.room.setDates(a.from, a.until)
            }
        }),
        b.datetime.set(a.from, a.until),
        a.canEditAll && (b.staff = new seqta.ui.SingleSelect({},[])),
        b
    },
    _createField: function(a) {
        var b = {};
        if (!a)
            throw Error("Field creation options unexpectedly null");
        return b.container = new Element("div",{
            class: "field " + (a.extraClass || "")
        }),
        a.labelText && a.labelText.length && (b.label = new Element("label",{
            html: a.labelText
        })),
        a.description && a.description.length && (b.description = new Element("div",{
            class: "description",
            html: a.description
        })),
        b.selector = a.selector,
        b.container.adopt(b.label, b.selector, b.description),
        b
    },
    _createTypeOptions: function() {
        return {
            appointment: Locale.get("calendar.event.appointment"),
            event: Locale.get("calendar.event.event")
        }
    },
    _getData: function(a, b, c, d) {
        var e = b.details.datetime.selector.get()
          , f = b.details.colour.get();
        return f && "transparent" !== f || (f = d),
        {
            id: a && a.id || void 0,
            bookingID: this._data && this._data.bookingID || void 0,
            from: e.from.print("sqlTimestamp"),
            until: e.until.print("sqlTimestamp"),
            room: b.details.room && b.details.room.selector.get() || void 0,
            room_code: b.details.room && b.details.room.selector.getCode() || void 0,
            event: {
                id: a && a.event && a.event.id || void 0,
                owner_id: c.person_id || void 0,
                owner_type: c.person_type || void 0,
                event_type: b.details.type ? b.details.type.selector.get() : this.options.defaultType,
                title: b.details.title.selector.getValue(),
                notes: b.details.notes.selector.get(),
                colour: f,
                privacy: b.details.privacy.selector.getChecked(),
                invitees: this._getInviteeData(a, b, c)
            }
        }
    },
    _getOwner: function(a, b) {
        var c;
        return b.details.staff && b.details.staff.selector.get() ? c = {
            person_id: b.details.staff.selector.get(),
            person_type: "staff",
            admin: !0
        } : !(c = a && a.invitees && a.invitees.first(function(a) {
            return !!a.admin
        })) && (c = {
            person_id: user.userID.toInt(),
            person_type: user.type,
            admin: !0
        }),
        c
    },
    _getInviteeData: function(a, b, c) {
        var d = [c]
          , e = function(b, c) {
            return this._getInvitee(a.invitees, {
                id: c,
                type: b
            }) || {
                person_id: c,
                person_type: b
            }
        }
        .bind(this);
        return d.append(b.studentSelector.getStudents().map(e.bind(void 0, "student"))),
        d.append(b.studentSelector.getStaff().map(e.bind(void 0, "staff"))),
        d.append(b.studentSelector.getContacts().map(e.bind(void 0, "contact"))),
        d
    },
    _checkErrors: function(a, b) {
        var c = [];
        return (a.event.invitees && a.event.invitees.length) - 1 > b && c.push("invitees"),
        a.event.title && a.event.title.length || c.push("title"),
        c
    },
    _save: function() {
        var a = this._getData(this._data, this._elements, this._getOwner(this._data, this._elements), this.options.defaultColour);
        this._errors = this._checkErrors(a, this._lookups.maxInvitees),
        this._errors && this._errors.length ? this._performShow.delay(100) : ajax.send(this.options.urls.save, a, this._afterSave.bind(this, a))
    },
    _afterSave: function(a, b) {
        this._data = a,
        this._data.invitees = a.event.invitees;
        var c = !a.id;
        c && (this._data.id = b.id,
        this._data.event.id = b.eventId,
        this._elBooking && this._elBooking.setEventinstance(this._data.id),
        msg.send("calendar.event.new.data.update", this._data));
        var d = this._updateCalendar.bind(this, c ? null : a.event.id, this._data);
        this._elBooking ? this._elBooking.save(d) : d()
    },
    _updateCalendar: function(a, b, c) {
        c && (b.bookingID = c.bookingID),
        msg.send("calendar.event.updated." + (a || "new"), b)
    },
    _delete: function() {
        var a = [{
            label: Locale.get("calendar.deleteSingle"),
            icon: "list-remove",
            handler: this._doDelete.bind(this, !1)
        }, {
            label: Locale.get("calendar.deleteFuture"),
            icon: "delete",
            handler: this._doDelete.bind(this, !0)
        }];
        (new seqta.ui.DialogOptions).show(Locale.get("calendar.deleteInstancesT", this._data.event.title), a, null, null)
    },
    _doDelete: function(a) {
        var b;
        b = a ? {
            from: this._data.from,
            id: this._data.event.id
        } : {
            instance: this._data.id
        },
        ajax.send(this.options.urls.delete, b, msg.send.bind(msg, "calendar.event.deleted." + this._data.event.id, {
            future: a,
            from: this._data.from,
            id: this._data.id,
            eventID: this._data.event.id
        }))
    },
    _getInvitee: function(a, b) {
        return a && a.first(function(a, b) {
            return a.id === b.person_id && a.type === b.person_type
        }
        .bind(void 0, b))
    },
    _selectTab: function(a) {
        var b = this._selectedTab;
        if (this._selectedTab = a && a.id || "event",
        b !== this._selectedTab)
            switch (this._selectedTab) {
            case "booking":
                if (!this._elBooking) {
                    var c = Object.clone(this._data);
                    c.from = c.from.replace(" ", "T"),
                    c.to = c.until.replace(" ", "T"),
                    c.eventinstance = c.id,
                    this._elBooking = new seqta.base.part.ItemBooking({
                        onClear: function() {
                            this._data && (this._data.bookingID = null,
                            this._elTabs.updateTabLabel(Locale.get("calendar.event.addBooking"), this._elTabs.getSelected()),
                            this._elBooking = null),
                            this._elTabs.setSelected("event", !1)
                        }
                        .bind(this)
                    },c)
                }
                this._tabContainer.getChildren().dispose(),
                this._tabContainer.adopt(this._elBooking);
                break;
            default:
                var d;
                this._elements.details.notes.selector && (d = this._elements.details.notes.selector._previousContent),
                this._elements.details.notes.selector = new seqta.ui.FormattedText({},""),
                this._elements.details.notes.container.empty(),
                this._elements.details.notes.container.grab(this._elements.details.notes.selector),
                this._elements.details.notes.selector.ready(),
                this._elements.details.notes.selector.set(d),
                this._elDetails = this._elDetails || new Element("div",{
                    class: "event"
                }).adopt(this._elements.studentSelector, this._elements.details.container),
                this._tabContainer.getChildren().dispose(),
                this._tabContainer.grab(this._elDetails)
            }
    }
}),
function() {
    var a = function(a) {
        var b = {
            canEditAll: a.canEditAll,
            allowBooking: !0
        };
        "staff" !== user.type && (b.urls = {
            save: "events/save",
            delete: "events/delete"
        }),
        new seqta.base.part.calendar.editor.Event(b,a).show()
    };
    msg.register("calendar.edit.event", a),
    msg.register("calendar.new.event", a)
}(),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.entry = seqta.base.part.calendar.entry || {},
seqta.base.part.calendar.entry.Adhoc = new Class({
    Implements: [Options, Events],
    Binds: ["cleanup", "draw", "_createEntry", "_updateClassunit", "_updateData", "_getPrefColour", "_updatePrefColour", "_delete", "click", "drop"],
    options: {
        defaultColour: "#dddddd",
        staffID: null,
        dateRange: null,
        mutable: !0,
        urls: {
            save: "json/timetable/adhoc/save"
        }
    },
    _calendar: null,
    _data: null,
    _classunit: null,
    _element: null,
    _entry: null,
    _staffID: null,
    _cleaners: null,
    _dateRange: null,
    initialize: function(a, b, c, d) {
        this.setOptions(a),
        this._staffID = this.options.staffID,
        this._data = Object.clone(c),
        this._classunit = Object.clone(d),
        this._calendar = b,
        this._dateRange = [this.options.dateRange[0].toDate(), this.options.dateRange[1].toDate()],
        this.options.mutable && (this._cleaners = [msg.register("calendar.classunit.updated." + d.id, this._updateClassunit, !1, !0), msg.register("calendar.classunit.deleted." + d.id, this._delete, !1, !0), msg.register("calendar.classinstance.updated." + c.id, this._updateData, !1, !0), msg.register("calendar.class.colour." + d.id, this._updatePrefColour, !1, !0)],
        msg.send("calendar.cleaner", this.cleanup)),
        this.draw()
    },
    cleanup: function() {
        this._cleaners.forEach(function(a) {
            "function" == typeof a && a()
        }),
        this._cleaners.empty()
    },
    draw: function(a) {
        this._colour = this._getPrefColour(this._classunit.id),
        this._entry = this._createEntry(this._data, this._classunit, this),
        a ? (this._entry.calendarid = a,
        this._element = this._calendar.updateEntry(this._entry)) : this._element = this._calendar.addEntry(this._entry),
        this._element && (this._element.set("data-instance", this._data.id),
        this._element.set("data-classunit", this._data.classunit))
    },
    _createEntry: function(a, b, c) {
        var d = String.uniqueID
          , e = {
            calendarid: d(),
            draggable: this.options.mutable,
            handler: c,
            date: a.date,
            from: a.from,
            until: a.until,
            entryid: a.entryid || d(),
            extraClass: "adhoc",
            description: b.description,
            title: b.code,
            tooltip: Locale.get("calendar.adhocEntry"),
            attendance: !!b.attendance,
            metaclass: b.metaclass,
            topic: a.topic
        };
        a.relief && (e.extraClass += " relief"),
        a.relieved && (e.extraClass += " relieved");
        var f = new Element("div",{
            class: "actions"
        });
        e.extraElements = [new Element("div",{
            class: "room" + (a.moved ? " moved " : ""),
            html: Locale.get("timetable.currentRoom", [a.room_code, a.movedTo])
        }), b.description && new Element("div",{
            class: "description",
            text: b.description
        })],
        (a.students || 0 === a.students) && e.extraElements.push(new Element("div",{
            class: "students",
            text: Locale.get("timetable.studentCount", a.students)
        })),
        a.topic && e.extraElements.push(new Element("div",{
            class: "topic",
            text: a.topic
        })),
        a.relief && e.extraElements.push(new Element("div",{
            class: "staff",
            html: Locale.get("timetable.reliefFor", a.reliefFor)
        })),
        a.relieved && e.extraElements.push(new Element("div",{
            class: "staff",
            html: Locale.get("timetable.relievedBy", e.relievedBy)
        })),
        e.extraElements.push(f);
        var g = seqta.ta.part.timetable.ViewHelper;
        f.adopt(g.drawMarksbookLink([a.classunit], a.metaclass || e.metaclass, a.programme, a.date, this.options.pushPath), g.drawAttendanceLink([a.classunit], a.metaclass || e.metaclass, a.programme, a.date, a.marked, b.attendance, this.options.pushPath));
        var h = user.getPreference("timetable.class.colour." + a.classunit);
        return h = h && h.value,
        e.colour = h || this.options.defaultColour,
        e
    },
    _updateClassunit: function(a) {
        this._classunit = a,
        this.draw(this._entry.calendarid)
    },
    _updateData: function(a) {
        (a = Object.clone(a)).programme = this._data.programme,
        a.pd = this._data.pd,
        this._data = a;
        var b = new Date(this._data.date.toDate()).setHours(0, 0, 0);
        this._dateRange[0] <= b && this._dateRange[1] >= b && (this._staffID === a.staff || this._staffID === a.staff_relieving) ? this.draw(this._entry.calendarid) : (this.cleanup(),
        this._calendar.removeEntry(this._entry.calendarid))
    },
    _getPrefColour: function(a) {
        var b;
        return {
            code: b = (b = (b = user.getPreference("timetable.class.colour." + a)) && b.value) || this.options.defaultColour,
            obj: new Color(b)
        }
    },
    _updatePrefColour: function(a) {
        this._colour = a,
        this._element.setStyle("background-color", a.code),
        this._element.set("data-yiq", "#fff" === a.obj.yiqContrast() ? "light" : "dark")
    },
    _delete: function(a) {
        var b = function() {
            this._calendar.removeEntry(this._entry.calendarid),
            msg.send("calendar.classinstance.deleted.data.update", a),
            this.cleanup()
        }
        .bind(this);
        a.future ? (a.date + " " + a.from).toDate() <= (this._data.date + " " + this._data.from).toDate() && window.setImmediate(b) : a.id === this._data.id && window.setImmediate(b)
    },
    click: function() {
        msg.send("calendar.quickbar.class", {
            calendar: this._calendar,
            data: this._data,
            entry: this._entry,
            classunit: Object.merge({}, this._classunit, {
                classinstanceId: this._data.id
            }),
            element: this._element,
            colour: this._colour,
            staffID: this._staffID,
            type: "adhoc"
        })
    },
    drop: function(a) {
        this._element = a.element,
        this._element.set("data-instance", this._data.id),
        this._element.set("data-classunit", this._data.classunit),
        this._data.date = a.entry.date,
        this._data.from = a.entry.from,
        this._data.until = a.entry.until,
        msg.send("calendar.classinstance.updated." + this._data.id, this._data),
        ajax.send(this.options.urls.save, {
            mode: "save",
            data_type: "instance",
            data: this._data
        }, msg.send("calendar.classinstance.data.update", this._data))
    }
}),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.entry = seqta.base.part.calendar.entry || {},
seqta.base.part.calendar.entry.Event = new Class({
    Implements: [Options, Events],
    Binds: ["cleanup", "draw", "_updateColour", "_createEntry", "_updateEntry", "_updateReply", "_getInvitee", "_delete", "click", "drop", "getContext"],
    options: {
        dateRange: null,
        person: null,
        inviteeTypes: null,
        defaultColour: "#dddddd",
        mutable: !0,
        urls: {
            save: "json/events/save"
        }
    },
    _data: null,
    _calendar: null,
    _cleaners: null,
    initialize: function(a, b, c) {
        this.setOptions(a),
        this._data = Object.clone(c),
        this._calendar = b,
        this._cleaners = [msg.register("calendar.event.reply." + this._data.event.id, this._updateReply, !1, !0)],
        this.options.mutable && this._cleaners.push(msg.register("calendar.event.updated." + this._data.event.id, this._updateEntry, !1, !0), msg.register("calendar.event.deleted." + this._data.event.id, this._delete, !1, !0)),
        msg.send("calendar.cleaner", this.cleanup),
        (this._getInvitee(c.invitees, this.options.person) || this._data.event.owner_id.toInt() === this.options.person.id.toInt() && this._data.event.owner_type === this.options.person.type) && this.draw()
    },
    cleanup: function() {
        this._cleaners && (this._cleaners.forEach(function(a) {
            "function" == typeof a && a()
        }),
        this._cleaners.empty())
    },
    draw: function() {
        this._entry = this._createEntry(this._data, this.options.person, this),
        this._element = this._calendar.addEntry(this._entry),
        this._updateColour(this._data.event.colour || this.options.defaultColour),
        this._element && (this._element.set("data-instance", this._data.id),
        this._element.set("data-event", this._data.event.id))
    },
    _updateColour: function(a) {
        var b = new Color(a);
        this._element.setStyle("background-color", a),
        this._element.set("data-yiq", "#fff" === b.yiqContrast() ? "light" : "dark")
    },
    _createEntry: function(a, b, c) {
        var d = {
            id: a.id,
            draggable: this.options.mutable,
            type: "event",
            handler: c,
            calendarid: String.uniqueID(),
            date: a.from.toDate().print("sqlDate"),
            from: a.from.toDate().print("sqlTime"),
            until: a.until.toDate().print("sqlTime"),
            extraClass: "event",
            title: a.event.title || Locale.get("calendar.privateEvent"),
            tooltip: "event" === a.event.event_type ? Locale.get("calendar.eventEntry") : Locale.get("calendar.appointmentEntry"),
            colour: a.event.colour
        }
          , e = new Element("div",{
            class: "actions"
        });
        if (d.extraElements = [],
        a.room && a.room_code && d.extraElements.push(new Element("div",{
            class: "room",
            html: a.room_code
        })),
        "appointment" === a.event.event_type) {
            var f = this._getInvitee(a.invitees, b);
            f && !f.admin && (d.extraElements.push(new Element("div",{
                class: "reply",
                html: Locale.get("calendar.event.attending", [user.userID !== b.id || user.type !== b.type, f.reply])
            })),
            user.userID === b.id.toInt() && user.type === b.type && (d.extraClass += " " + (f.reply || "noreply")))
        }
        var g = a.invitees && a.invitees.filter(function(a) {
            return !a.admin
        }).length;
        return g && d.extraElements.push(new Element("div",{
            class: "invitees",
            text: Locale.get("calendar.event.invitees.event", g)
        })),
        d.extraElements.push(e),
        d
    },
    _updateEntry: function(a) {
        a.id === this._data.id ? this._data = a : this._data.event = a.event;
        var b = new Date(this._data.from.toDate()).setHours(0, 0, 0)
          , c = this._getInvitee(this._data.event.invitees, this.options.person);
        if (this.options.dateRange[0].toDate() <= b && this.options.dateRange[1].toDate() >= b && c) {
            var d = this._createEntry(this._data, this.options.person, this);
            d.calendarid = this._entry.calendarid,
            this._element = this._calendar.updateEntry(d),
            this._updateColour(this._data.event.colour || this.options.defaultColour),
            this._entry = d,
            msg.send("calendar.event.data.update", this._data)
        } else
            this.cleanup(),
            this._calendar.removeEntry(this._entry.calendarid)
    },
    _updateReply: function(a) {
        if (a.id && a.id === this._data.id || a.from && this._data.from.toDate() >= a.from.toDate()) {
            var b = this._getInvitee(this._data.invitees, this.options.person);
            if (b) {
                b.reply = a.reply;
                var c = this._createEntry(this._data, this.options.person, this);
                c.calendarid = this._entry.calendarid,
                this._element = this._calendar.updateEntry(c),
                this._entry = c
            }
        }
    },
    _getInvitee: function(a, b) {
        return a && a.first(function(a, b) {
            return a.id.toInt() === b.person_id.toInt() && a.type === b.person_type
        }
        .bind(void 0, b))
    },
    _delete: function(a) {
        var b = function() {
            this._calendar.removeEntry(this._entry.calendarid),
            msg.send("calendar.event.deleted.data.update", a),
            this.cleanup()
        }
        .bind(this);
        a.future ? a.from.toDate() <= this._data.from.toDate() && window.setImmediate(b) : a.id === this._data.id && window.setImmediate(b)
    },
    click: function() {
        msg.send("calendar.quickbar.event", this.getContext())
    },
    drop: function(a) {
        this._element = a.element,
        this._element.set("data-instance", this._data.id),
        this._element.set("data-event", this._data.event.id),
        this._data.from = (a.entry.date + " " + a.entry.from).toDate().print("sqlTimestamp"),
        this._data.until = (a.entry.date + " " + a.entry.until).toDate().print("sqlTimestamp"),
        ajax.send(this.options.urls.save, {
            id: this._data.id,
            from: this._data.from,
            until: this._data.until
        }, msg.send("calendar.event.data.update", this._data))
    },
    getContext: function() {
        return {
            calendar: this._calendar,
            data: this._data,
            element: this._element,
            colour: {
                code: this._data.event.colour || this.options.defaultColour,
                obj: new Color(this._data.event.colour || this.options.defaultColour)
            },
            type: "event",
            inviteeTypes: this.options.inviteeTypes,
            person: this.options.person
        }
    }
}),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.entry = seqta.base.part.calendar.entry || {},
seqta.base.part.calendar.entry.New = new Class({
    Implements: [Options, Events],
    Binds: ["draw", "_createEntry", "click", "remove"],
    options: {
        defaultColour: "#dddddd",
        entry: null,
        classunits: null,
        personID: null,
        personType: null,
        inviteeTypes: null
    },
    _data: null,
    _element: null,
    _calendar: null,
    _quickbar: null,
    initialize: function(a, b, c) {
        this.setOptions(a),
        this._calendar = b,
        this._quickbar = c,
        this.draw()
    },
    draw: function() {
        this._data = this._createEntry(this.options.entry, this),
        this._element = this._calendar.updateEntry(this._data),
        this._element && this._element.addClass("new"),
        "staff" === this.options.personType ? msg.send("calendar.quickbar.new", {
            panel: this._quickbar,
            calendar: this._calendar,
            entry: this._data,
            element: this._element,
            classunits: this.options.classunits,
            staffID: this.options.personID
        }) : msg.send("calendar.new.event", {
            entry: this._data,
            canEditAll: !1,
            inviteeTypes: this.options.inviteeTypes
        })
    },
    _createEntry: function(a, b) {
        return {
            calendarid: a.calendarid,
            type: "new",
            handler: b,
            date: a.date,
            from: a.from,
            until: a.until,
            title: Locale.get("calendar.newEntry"),
            colour: this.options.defaultColour
        }
    },
    click: function() {
        this.remove()
    },
    remove: function() {
        this._calendar.removeEntry(this._data.calendarid)
    }
}),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.entry = seqta.base.part.calendar.entry || {},
seqta.base.part.calendar.entry.Timetabled = new Class({
    Implements: [Options, Events],
    Binds: ["draw", "_createEntry", "_getPrefColour", "_updatePrefColour", "click"],
    options: {
        defaultColour: "#dddddd"
    },
    _calendar: null,
    _data: null,
    _entry: null,
    _element: null,
    initialize: function(a, b, c, d) {
        this.setOptions(a),
        this._data = Object.clone(c),
        this._calendar = b,
        this._classIDs = d,
        this.draw(),
        this.cleanup = msg.register("calendar.class.colour." + c.classunit, this._updatePrefColour, !1, !0)
    },
    draw: function() {
        this._colour = this._getPrefColour(this._data.classunit),
        this._entry = this._createEntry(this._data, this._classIDs, this),
        this._element = this._calendar.addEntry(this._entry),
        this._element && (this._element.set("data-instance", this._data.id),
        this._element.set("data-classunit", this._data.classunit))
    },
    _createEntry: function(a, b, c) {
        var d = String.uniqueID
          , e = {
            calendarid: d(),
            handler: c,
            date: a.date,
            from: a.from,
            until: a.until,
            period: a.period,
            entryid: a.entryid || d(),
            extraClass: "timetabled",
            description: a.description,
            title: a.code,
            tooltip: Locale.get("timetable.timetabledEntry"),
            metaclass: a.metaclass,
            topic: a.topic
        };
        a.relief && (e.extraClass += " relief"),
        a.relieved && (e.extraClass += " relieved");
        var f = new Element("div",{
            class: "actions"
        });
        e.extraElements = [new Element("div",{
            class: "room" + (a.moved ? " moved " : ""),
            html: Locale.get("timetable.currentRoom", [a.room, a.movedTo])
        }), a.description && new Element("div",{
            class: "description",
            text: a.description
        })],
        (a.students || 0 === a.students) && e.extraElements.push(new Element("div",{
            class: "students",
            text: Locale.get("timetable.studentCount", a.students)
        })),
        a.topic && e.extraElements.push(new Element("div",{
            class: "topic",
            text: a.topic
        })),
        a.relief && e.extraElements.push(new Element("div",{
            class: "staff",
            html: Locale.get("timetable.reliefFor", a.reliefFor)
        })),
        a.relieved && e.extraElements.push(new Element("div",{
            class: "staff",
            html: Locale.get("timetable.relievedBy", e.relievedBy)
        })),
        e.extraElements.push(f);
        var g = seqta.ta.part.timetable.ViewHelper;
        f.adopt(g.drawMarksbookLink(b, a.metaclass, a.programme, a.date, this.options.pushPath), g.drawAttendanceLink(b, a.metaclass, a.programme, a.date, a.marked, !0, this.options.pushPath));
        var h = user.getPreference("timetable.class.colour." + a.classunit);
        return h = h && h.value,
        e.colour = h || this.options.defaultColour,
        e
    },
    _getPrefColour: function(a) {
        var b;
        return {
            code: b = (b = (b = user.getPreference("timetable.class.colour." + a)) && b.value) || this.options.defaultColour,
            obj: new Color(b)
        }
    },
    _updatePrefColour: function(a) {
        this._colour = a,
        this._element.setStyle("background-color", a.code),
        this._element.set("data-yiq", "#fff" === a.obj.yiqContrast() ? "light" : "dark")
    },
    click: function() {
        msg.send("calendar.quickbar.class", {
            calendar: this._calendar,
            data: this._data,
            entry: this._entry,
            classunit: Object.merge({}, this._data, {
                classinstanceId: this._data.id,
                id: this._data.classunit
            }),
            element: this._element,
            colour: this._colour,
            classIDs: this._classIDs,
            type: "timetabled"
        })
    }
}),
seqta.base.part.calendar = seqta.base.part.calendar || {},
seqta.base.part.calendar.quickbar = seqta.base.part.calendar.quickbar || {},
seqta.base.part.calendar.quickbar.Event = new Class({
    Implements: [Options, Events],
    Binds: ["cleanup", "draw", "toElement", "_createElements", "_createMetaElements", "_createReplyElement", "_createReplyActions", "_createGutterElements", "_click", "_editEvent", "_cloneEvent", "_prepareMessage", "toggleGutter", "toggleNotes", "_reply", "_replyFuture", "_doReply"],
    options: {
        defaultColour: "#dddddd",
        disallowGutter: !1,
        disallowNotes: !1,
        showNotes: !0,
        showGutter: !0,
        canEdit: !1,
        canEditAll: !1,
        urls: {
            staff: "json/events/reply",
            student: "events/reply"
        }
    },
    _context: null,
    _showNotes: null,
    _showGutter: null,
    _cleaners: null,
    _recipientKeyMap: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._context = b,
        this._showGutter = this.options.showGutter,
        this._showNotes = this.options.showNotes,
        this._recipientKeyMap = {
            staff: "staff",
            student: "students",
            contact: "contacts"
        },
        this._cleaners = [],
        this.options.disallowNotes || this._cleaners.push(msg.register("calendar.notes.toggle", this.toggleNotes, !1, !0)),
        this.options.disallowGutter || this._cleaners.push(msg.register("calendar.gutter.toggle", this.toggleGutter, !1, !0)),
        this.options.disallowNotes && this.options.disallowGutter || msg.send("calendar.cleaner", this.cleanup),
        this.draw()
    },
    cleanup: function() {
        this._cleaners.forEach(function(a) {
            "function" == typeof a && a()
        }),
        this._cleaners.empty()
    },
    draw: function() {
        this._elements = this._elements || this._createElements({
            data: this._context.data,
            person: this._context.person,
            canEdit: this.options.canEdit,
            disallowGutter: this.options.disallowGutter,
            disallowNotes: this.options.disallowNotes,
            showGutter: this._showGutter,
            showNotes: this._showNotes,
            handlers: {
                click: this._click,
                edit: this._editEvent,
                clone: this._cloneEvent,
                message: this._prepareMessage.bind(void 0, this._context.data.invitees, msg.send.bind(msg, "coneqtmessage.global.compose"), this._recipientKeyMap),
                reply: this._reply,
                replyFuture: this._replyFuture
            }
        })
    },
    toElement: function() {
        return this._elements.container
    },
    _createElements: function(a) {
        var b = {
            title: new Element("div",{
                class: "title",
                text: a.data.event.title ? a.data.event.title.ellipsise(64) : Locale.get("calendar.privateEvent"),
                title: a.data.event.title || Locale.get("calendar.privateEvent")
            }),
            meta: this._createMetaElements(a),
            gutter: !a.disallowGutter && this._createGutterElements(a.data.invitees, a.handlers.message),
            editActions: a.canEdit && this._createEditActions(a.handlers.edit, a.handlers.clone)
        };
        return b.title.toggleClass("editable", a.canEdit),
        b.container = new Element("div",{
            class: "wrapper",
            events: {
                click: a.handlers.click
            }
        }).adopt(b.editActions.edit, b.editActions.clone, b.title, b.meta.container, b.gutter.container),
        b.container.toggleClass("hasNotes", !!b.meta.notes && !!a.showNotes),
        !a.disallowNotes && b.meta.notes && $(b.meta.notes)[a.showNotes ? "show" : "hide"](),
        !a.disallowGutter && b.gutter.container && b.gutter.container[a.showGutter ? "show" : "hide"](),
        b
    },
    _createMetaElements: function(a) {
        var b = {
            times: new Element("div",{
                class: "times",
                html: a.data.from.toDate().print("H:i") + " &ndash; " + a.data.until.toDate().print("H:i")
            }),
            owner: new Element("div",{
                class: "owner",
                text: a.data.event.owner_salutation
            }),
            notes: !a.disallowNotes && a.data.event.notes && new seqta.ui.Frame({},a.data.event.notes)
        };
        return a.data.invitees && a.data.invitees.filter(function(a) {
            return !a.admin
        }).length && (b.invitees = new Element("div",{
            class: "invitees",
            text: this._localiseInvitees(a.data)
        })),
        "appointment" === a.data.event.event_type && (b.reply = this._createReplyElement(a.data, a.person, a.handlers.reply, a.handlers.replyFuture)),
        a.data.room && a.data.room_code && (b.room = new Element("div",{
            class: "room",
            text: a.data.room_code
        })),
        b.container = new Element("div",{
            class: "meta"
        }).adopt(b.times, b.room, b.owner, b.reply, b.invitees, b.notes),
        b
    },
    _createReplyElement: function(a, b, c, d) {
        var e, f = this._getInvitee(a.invitees, b);
        return f && !f.admin && (e = user.userID === b.id && user.type === b.type ? this._createReplyActions(f, c, d) : new Element("div",{
            class: "reply",
            html: Locale.get("calendar.event.attending", [user.userID !== b.id.toInt() || user.type !== b.type, f.reply])
        })),
        e
    },
    _createReplyActions: function(a, b, c) {
        var d = this._getEventReplyItems(a.reply)
          , e = new seqta.ui.ButtonMenu({
            defaultValue: a.reply ? Locale.get("calendar.event.reply." + a.reply) : Locale.get("calendar.event.reply.default"),
            extraClass: "reply",
            items: d,
            title: Locale.get("calendar.event.replyT"),
            onSelect: function(a, d, f, g) {
                g && g.stop(),
                e.setValue("data-reply", a.reply),
                e.setLabel(Locale.get("calendar.event.reply." + a.reply)),
                "confirmAll" === a.id || "declineAll" === a.id ? c(a) : b(a)
            }
        });
        return e.setValue("data-value", a.reply || "default"),
        e
    },
    _getInvitee: function(a, b) {
        return a && a.first(function(a, b) {
            return a.id.toInt() === b.person_id.toInt() && a.type === b.person_type
        }
        .bind(void 0, b))
    },
    _getEventReplyItems: function(a) {
        var b = a && "default" !== a ? [] : [{
            id: "default",
            label: Locale.get("calendar.event.reply.default")
        }];
        return b.append([{
            id: "confirmed",
            reply: "confirmed",
            label: Locale.get("calendar.event.reply.confirmed")
        }, {
            id: "confirmAll",
            reply: "confirmed",
            label: Locale.get("calendar.event.reply.confirmAll")
        }, {
            id: "maybe",
            reply: "maybe",
            label: Locale.get("calendar.event.reply.maybe")
        }, {
            id: "declined",
            reply: "declined",
            label: Locale.get("calendar.event.reply.declined")
        }, {
            id: "declineAll",
            reply: "declined",
            label: Locale.get("calendar.event.reply.declineAll")
        }]),
        b
    },
    _createGutterElements: function(a, b) {
        if (!a)
            return {};
        var c = {
            message: new seqta.ui.ButtonMenu({
                defaultValue: "<span>" + tools.getIcon("direqt_message") + " ▾</span>",
                extraClass: "message",
                includeArrow: !1,
                title: Locale.get("calendar.message.title"),
                items: [{
                    value: "all",
                    label: Locale.get("calendar.message.all")
                }, {
                    value: "owner",
                    label: Locale.get("calendar.message.owner")
                }, {
                    value: "staff",
                    label: Locale.get("calendar.message.staff")
                }, {
                    value: "student",
                    label: Locale.get("calendar.message.student")
                }, {
                    value: "contact",
                    label: Locale.get("calendar.message.contact")
                }],
                onSelect: b
            })
        };
        return c.container = new Element("div",{
            class: "gutter"
        }).adopt(c.message),
        c
    },
    _createEditActions: function(a, b) {
        return {
            edit: new seqta.ui.Button({
                extraClass: "edit",
                defaultValue: tools.getIcon("edit"),
                title: Locale.get("calendar.editEntry"),
                onClick: a
            }),
            clone: new seqta.ui.Button({
                extraClass: "clone",
                defaultValue: tools.getIcon("control_point_duplicate"),
                title: Locale.get("calendar.cloneEntry"),
                onClick: b
            })
        }
    },
    _localiseInvitees: function(a) {
        return "appointment" === a.event.event_type ? Locale.get("calendar.event.invitees.appointment", this._summariseInvitees(a.invitees)) : Locale.get("calendar.event.invitees.event", a.invitees.filter(function(a) {
            return !a.admin
        }).length)
    },
    _summariseInvitees: function(a) {
        return {
            attending: (a = a || []).filter(function(a) {
                return !a.admin && "confirmed" === a.reply
            }).length,
            maybe: a.filter(function(a) {
                return !a.admin && "maybe" === a.reply
            }).length,
            declined: a.filter(function(a) {
                return !a.admin && "declined" === a.reply
            }).length,
            unresponded: a.filter(function(a) {
                return !a.admin && !a.reply
            }).length
        }
    },
    _click: function(a) {
        a && a.target && !["a", "button"].contains($(a.target).get("tag")) && !$(a.target).getParent("a, button") && msg.send("calendar.quickbar.hide")
    },
    _editEvent: function(a) {
        a.stop(),
        this._context.canEditAll = this.options.canEditAll,
        msg.send("calendar.edit.event", this._context),
        msg.send("calendar.quickbar.hide")
    },
    _cloneEvent: function(a) {
        a.stop(),
        msg.send("calendar.clone.event", {
            id: this._context.data.event.id,
            type: "event",
            title: this._context.data.event.title,
            start: this._context.data.from.toDate().print("sqlDate"),
            end: this._context.data.until.toDate().print("sqlDate")
        }),
        msg.send("calendar.quickbar.hide")
    },
    _prepareMessage: function(a, b, c, d) {
        var e, f;
        "owner" === d.value ? e = {
            admin: !0
        } : "all" !== d.value && (e = {
            person_type: d.value
        }),
        f = {},
        a.filter(function(a) {
            return !e || Object.every(e, function(b, c) {
                return a[c] && a[c] === b
            })
        }).forEach(function(a) {
            (f[c[a.person_type]] = f[c[a.person_type]] || []).push(a.person_id)
        }),
        b(f)
    },
    toggleGutter: function(a) {
        this._showGutter = !!a,
        this._elements.gutter.container && this._elements.gutter.container[this._showGutter ? "show" : "hide"]()
    },
    toggleNotes: function(a) {
        this._showNotes = !!a,
        this._elements.meta.notes && (this._elements.container.toggleClass("hasNotes", this._showNotes),
        $(this._elements.meta.notes)[this._showNotes ? "show" : "hide"]())
    },
    _reply: function(a) {
        this._doReply({
            id: this._context.data.id,
            reply: a.reply
        })
    },
    _replyFuture: function(a) {
        this._doReply({
            event: this._context.data.event.id,
            from: this._context.data.from.toDate().print("sqlTimestamp"),
            reply: a.reply
        })
    },
    _doReply: function(a) {
        ajax.send("staff" === user.type ? this.options.urls.staff : this.options.urls.student, a, msg.send.bind(null, "calendar.event.reply." + this._context.data.event.id, a));
        var b = this._getInvitee(this._context.data.invitees, this._context.person);
        b && (b.reply = a.reply,
        this._elements.meta.invitees.set("html", this._localiseInvitees(this._context.data)))
    }
}),
seqta.base.part.coneqtMessage.ComposeListener = new Class({
    Implements: [Options, Events],
    options: {
        enableMany: {
            students: !0,
            staff: !0,
            contacts: !0
        },
        urls: {
            ta: {
                save: "json/coneqtmessage/save",
                load: "json/coneqtmessage/load",
                contacts: "json/contactIDs",
                staffCoords: "json/staff/coordinators"
            },
            tutor: {
                save: "save/message",
                load: "load/message",
                people: "load/message/people"
            },
            coneqt: {
                staffCoords: "load/staff/coordinators",
                save: "save/message",
                load: "load/message",
                people: "load/message/people"
            }
        }
    },
    Binds: ["_applySitesettings", "_compose", "_reply", "_replyAll", "_forward", "_initComposer", "_retrieveStudentData", "_retrieveContactData", "_retrieveStudentContactData", "_retrieveStaffData", "_retrieveTutorData"],
    _app: null,
    _composer: null,
    initialize: function(a) {
        this.setOptions(a),
        this._app = null,
        this._app = Object.keys(seqta.coneqt.page).length ? "coneqt" : Object.keys(seqta.tutor.page).length ? "tutor" : "ta",
        dataStore.retrieve("siteSettings", this._applySitesettings)
    },
    _applySitesettings: function(a) {
        for (var b = ["tutor.messages.enabled", "coneqt-s.messages.enabled", "coneqt-p.messages.enabled"], c = 0; c < b.length; c++)
            if (a[b[c]] && "disabled" === a[b[c]].value)
                return;
        msg.register("coneqtmessage.global.compose", this._compose),
        msg.register("coneqtmessage.global.reply", this._reply),
        msg.register("coneqtmessage.global.replyAll", this._replyAll),
        msg.register("coneqtmessage.global.forward", this._forward),
        b = ["messages.students.enabled", "tutor.messages.students.enabled", "coneqt-s.messages.students.enabled", "coneqt-p.messages.students.enabled"];
        for (c = 0; c < b.length; c++)
            a[b[c]] && "disabled" === a[b[c]].value && (this._retrieveStudentData = null);
        null !== this._retrieveStudentData && (this._retrieveStudentContactData = null),
        b = ["messages.contacts.enabled", "tutor.messages.contacts.enabled", "coneqt-s.messages.contacts.enabled", "coneqt-p.messages.contacts.enabled"];
        for (c = 0; c < b.length; c++)
            a[b[c]] && "disabled" === a[b[c]].value && (this._retrieveContactData = null,
            this._retrieveStudentContactData = null);
        null !== this._retrieveStudentContactData && (this._retrieveContactData = null),
        b = ["tutor.messages.staff.enabled", "coneqt-s.messages.staff.enabled", "coneqt-p.messages.staff.enabled"];
        for (c = 0; c < b.length; c++)
            a[b[c]] && "disabled" === a[b[c]].value && (this._retrieveStaffData = null);
        b = ["messages.tutors.enabled", "coneqt-s.messages.tutors.enabled", "coneqt-p.messages.tutors.enabled", "tutor.messages.tutors.enabled"];
        for (c = 0; c < b.length; c++)
            a[b[c]] && "disabled" === a[b[c]].value && (this._retrieveTutorData = null)
    },
    _compose: function(a) {
        a = a || {},
        320 > window.innerWidth || (this._initComposer(),
        this._composer.compose(a))
    },
    _reply: function(a) {
        this._initComposer(),
        this._composer._reply(a)
    },
    _replyAll: function(a) {
        this._initComposer(),
        this._composer._replyAll(a)
    },
    _forward: function(a) {
        this._initComposer(),
        this._composer._forward(a)
    },
    _initComposer: function() {
        if (!this._composer) {
            var a = null
              , b = {
                students: !0,
                staff: !0,
                contacts: !0
            };
            "ta" === this._app ? a = this.options.urls.ta : "tutor" === this._app ? (a = this.options.urls.tutor,
            b = {
                students: !1,
                staff: !1,
                contacts: !1
            }) : (a = this.options.urls.coneqt,
            b = {
                students: !1,
                staff: !0,
                contacts: !1
            }),
            this._composer = new seqta.base.part.coneqtMessage.Composer(Object.merge({}, this.options, {
                handlers: !1,
                urls: a,
                people: {
                    students: this._retrieveStudentData,
                    staff: this._retrieveStaffData,
                    tutors: this._retrieveTutorData,
                    contacts: this._retrieveContactData,
                    studentContacts: this._retrieveStudentContactData
                },
                enableMany: b
            }))
        }
    },
    _retrieveStudentData: function(a) {
        a && "function" === typeOf(a) && ("ta" === this._app ? dataStore.retrieve("msStudents", function(b) {
            a(seqta.ta.common.postProcessStudents(b.elements))
        }) : "tutor" === this._app ? dataStore.retrieve("students", a) : ajax.send(this.options.urls.coneqt.people, {
            mode: "student"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(seqta.coneqt.common.postProcessStudents(b))
        }
        .bind(this)))
    },
    _retrieveContactData: function(a) {
        a && "function" === typeOf(a) && ("ta" === this._app ? ajax.send(this.options.urls.ta.contacts, {
            mode: "coneqt"
        }, a) : "tutor" === this._app ? ajax.send(this.options.urls.tutor.people, {
            mode: "contact"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(b)
        }) : ajax.send(this.options.urls.coneqt.people, {
            mode: "contact"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(b)
        }))
    },
    _retrieveStudentContactData: function(a) {
        if (a && "function" === typeOf(a)) {
            var b = tools.func.createConcurrentHandler(["students", "contacts"], a);
            "ta" === this._app ? dataStore.retrieve("msStudents", function(a) {
                b.students(seqta.ta.common.postProcessStudents(a.elements))
            }) : "tutor" === this._app ? dataStore.retrieve("students", b.students) : ajax.send(this.options.urls.coneqt.people, {
                mode: "student"
            }, function(a) {
                for (var c = 0; c < a.length; c++)
                    a[c].xx_value = a[c].id;
                b.students(seqta.coneqt.common.postProcessStudents(a))
            }
            .bind(this)),
            "ta" === this._app ? ajax.send(this.options.urls.ta.contacts, {
                mode: "coneqt"
            }, b.contacts) : "tutor" === this._app ? ajax.send(this.options.urls.tutor.people, {
                mode: "contact"
            }, function(a) {
                for (var c = 0; c < a.length; c++)
                    a[c].xx_value = a[c].id;
                b.contacts(a)
            }) : ajax.send(this.options.urls.coneqt.people, {
                mode: "contact"
            }, function(a) {
                for (var c = 0; c < a.length; c++)
                    a[c].xx_value = a[c].id;
                b.contacts(a)
            })
        }
    },
    _retrieveStaffData: function(a) {
        a && "function" === typeOf(a) && ("ta" === this._app ? dataStore.retrieve("msStaff", function(b) {
            a(b.elements)
        }) : "tutor" === this._app ? ajax.send(this.options.urls.tutor.people, {
            mode: "staff"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(b)
        }) : ajax.send(this.options.urls.coneqt.people, {
            mode: "staff"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(b)
        }))
    },
    _retrieveTutorData: function(a) {
        a && "function" === typeOf(a) && ("ta" === this._app ? dataStore.retrieve("msTutors", function(b) {
            a(b.elements)
        }) : ajax.send(this.options.urls.tutor.people, {
            mode: "tutor"
        }, function(b) {
            for (var c = 0; c < b.length; c++)
                b[c].xx_value = b[c].id;
            a(b)
        }))
    }
}),
msg.register("chrome.ready", function() {
    seqta.cmessage = seqta.cmessage || {},
    seqta.cmessage.listener = new seqta.base.part.coneqtMessage.ComposeListener
}),
seqta.base.part.coneqtMessage.Composer = new Class({
    Implements: [Options, Events],
    options: {
        handlers: !0,
        urls: {
            load: "",
            save: "",
            staffCoords: ""
        },
        people: {
            students: null,
            staff: null,
            contacts: null,
            tutors: null
        },
        enableMany: {
            students: !0,
            staff: !0,
            contacts: !0
        },
        max: {
            subject: 256,
            message: 512e3
        },
        blindThreshold: 50
    },
    Binds: ["toElement", "cleanup", "_registerHandlers", "_retrievePeople", "_setStudents", "_setStaff", "_setTutors", "_setContacts", "_setStudentContacts", "compose", "_reply", "_replyAll", "_forward", "_save", "_saved", "_doCompose", "_loadSettings", "_setBlind"],
    _handlers: null,
    _element: null,
    _elSubject: null,
    _elBody: null,
    _elRecipients: null,
    _elBlind: null,
    _elBlindWarning: null,
    _elUpload: null,
    _elFileList: null,
    _peopleData: null,
    _inReplyToID: null,
    _settingsLoaded: !1,
    _showCompose: !1,
    _parametersCache: null,
    _dlg: null,
    _defaultContent: null,
    _defaultBlindStatus: !1,
    _attachmentsEnabled: !0,
    _sendingSemaphore: !1,
    initialize: function(a) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "coneqtMessage composer"
        }),
        this.options.handlers && (this._handlers = {
            "coneqtmessage.compose": this.compose,
            "coneqtmessage.composeReply": this._reply,
            "coneqtmessage.composeReplyAll": this._replyAll,
            "coneqtmessage.composeForward": this._forward
        },
        this._registerHandlers()),
        this._peopleData = {},
        dataStore.retrieve("siteSettings", this._loadSettings)
    },
    _loadSettings: function(a) {
        var b, c;
        b = ["messages.footer", "coneqt-s.messages.footer", "coneqt-p.messages.footer", "tutor.messages.footer"];
        for (var d = 0; d < b.length; d++)
            a[b[d]] && a[b[d]].value && (this._defaultContent = a[b[d]].value);
        this._defaultContent && (this._defaultContent = "<p>&nbsp;</p><div>" + this._defaultContent + "</div>"),
        b = ["messages.blind", "coneqt-s.messages.blind", "coneqt-p.messages.blind", "tutor.messages.blind"],
        c = !1;
        for (d = 0; d < b.length && !c; d++)
            a[b[d]] && a[b[d]].value && (c = !0,
            this._defaultBlindStatus = "enabled" === a[b[d]].value);
        b = ["messages.files.enabled", "coneqt-s.messages.files.enabled", "coneqt-p.messages.files.enabled", "tutor.messages.files.enabled"],
        c = !1;
        for (d = 0; d < b.length && !c; d++)
            a[b[d]] && a[b[d]].value && (c = !0,
            this._attachmentsEnabled = "enabled" === a[b[d]].value);
        this._settingsLoaded = !0,
        this._showCompose && (this.compose(this._parametersCache),
        this._parametersCache = null,
        this._showCompose = !1)
    },
    toElement: function() {
        return this._element
    },
    cleanup: function() {
        Object.each(this._handlers, function(a, b) {
            msg.unregister(b, a)
        })
    },
    _registerHandlers: function() {
        Object.each(this._handlers, function(a, b) {
            msg.register(b, a, !1, !0)
        })
    },
    _retrievePeople: function() {
        this.options.people.students && "function" === typeOf(this.options.people.students) && this.options.people.students(this._setStudents),
        this.options.people.studentContacts && "function" === typeOf(this.options.people.studentContacts) && this.options.people.studentContacts(this._setStudentContacts),
        this.options.people.contacts && "function" === typeOf(this.options.people.contacts) && this.options.people.contacts(this._setContacts),
        this.options.people.staff && "function" === typeOf(this.options.people.staff) && this.options.people.staff(this._setStaff),
        this.options.people.tutors && "function" === typeOf(this.options.people.tutors) && this.options.people.tutors(this._setTutors)
    },
    _setStudents: function(a) {
        this._peopleData.students = a,
        this._elRecipients.setStudentsData(this._peopleData.students)
    },
    _setStaff: function(a) {
        this._peopleData.staff = a,
        this._elRecipients.setStaffData(this._peopleData.staff)
    },
    _setTutors: function(a) {
        this._peopleData.tutors = a,
        this._elRecipients.setTutorsData(this._peopleData.tutors)
    },
    _setContacts: function(a) {
        this._peopleData.contacts = a,
        this._elRecipients.setContactsData(this._peopleData.contacts)
    },
    _setStudentContacts: function(a, b) {
        this._peopleData.students = a,
        this._peopleData.contacts = b,
        this._elRecipients.setStudentsData(this._peopleData.students, !0),
        this._elRecipients.setContactsData(this._peopleData.contacts)
    },
    _doCompose: function(a) {
        this._settingsLoaded ? this.compose(a) : (this._showCompose = !0,
        this._parametersCache = a)
    },
    compose: function(a) {
        if (this._settingsLoaded) {
            if ((a = a || {}).reply) {
                var b = Locale.get("direqtmessage.compose.replySubjectPrefix")
                  , c = Locale.get("direqtmessage.compose.replySubjectSuffix");
                (b && a.subject.startsWith(b) || !b) && (c && a.subject.endsWith(c) || !c) || (a.subject = b + a.subject + c)
            } else if (a.forward) {
                var d = Locale.get("direqtmessage.compose.forwardSubjectPrefix")
                  , e = Locale.get("direqtmessage.compose.forwardSubjectSuffix");
                (d && a.subject.startsWith(d) || !d) && (e && a.subject.endsWith(e) || !e) || (a.subject = d + a.subject + e)
            }
            this._inReplyToID = a.id || void 0;
            var f = new Element("div",{
                class: "prime"
            })
              , g = new Element("div",{
                class: "body"
            });
            this._elSubject = this._elSubject || new seqta.ui.ShortText({
                className: "subject",
                maxLength: this.options.max.subject,
                placeholder: Locale.get("direqtmessage.compose.subjectPlaceholder")
            }),
            this._elSubject.set(a.subject || ""),
            this._elRecipients ? this._elRecipients.clear() : (this._elRecipients = new seqta.ui.AnyoneSelect({
                urls: {
                    staffCoords: this.options.urls.staffCoords
                },
                enableMany: this.options.enableMany,
                onChange: ()=>{
                    this._elRecipientTabTitle.set("html", Locale.get("direqtmessage.compose.tab.recipients", [this._elRecipients.count()])),
                    1 > this._elRecipients.count() ? this._dlg.disableButton("send") : this._dlg.enableButton("send"),
                    this._setBlind(this._elRecipients.count() > this.options.blindThreshold, Locale.get("direqtmessage.view.blindWarning"))
                }
            }),
            this._retrievePeople()),
            this._elRecipients.add(a),
            this._elBlindWarning = new Element("div",{
                class: "note blindWarning",
                html: ""
            }),
            this._elBlind = new seqta.ui.Checkbox({
                label: Locale.get("direqtmessage.compose.blind"),
                boxClass: "blind",
                defaultValue: void 0 === a.blind ? this._defaultBlindStatus : a.blind
            }),
            this._elUpload = null,
            this._elFileList = null,
            this._attachmentsEnabled && (this._elFileList = new seqta.ui.FileList({
                listClass: "inline",
                actions: {
                    delete: !0
                },
                iconSize: 16,
                fileDefaults: {
                    type: "message"
                }
            },a.files),
            this._elUpload = new seqta.ui.FileHandler({
                callback: function(a) {
                    this._elFileList.add(a)
                }
                .bind(this)
            })),
            this._elRecipientTabTitle = new Element("div",{
                class: "accordionTitle",
                html: Locale.get("direqtmessage.compose.tab.recipients", [0]),
                events: {
                    click: function() {
                        $(this).getParent().toggleClass("expanded")
                    }
                }
            }),
            this._setBlind(a && a.students && a.students.length > this.options.blindThreshold || a && a.contactsOf && a.contactsOf.length > this.options.blindThreshold || a && a.students && a.contactsOf && a.contactsOf.length + a.students.length > this.options.blindThreshold, Locale.get("direqtmessage.view.blindWarning")),
            this._element.getChildren().dispose(),
            this._element.adopt(new Element("div",{
                class: "accordionTab alpha expanded"
            }).adopt(this._elRecipientTabTitle, this._elRecipients), new Element("div",{
                class: "accordionTab beta expanded"
            }).adopt(new Element("div",{
                class: "accordionTitle",
                html: Locale.get("direqtmessage.compose.tab.content")
            }), f.adopt(this._elSubject, this._elBlind.getBox(), this._elBlindWarning, g, this._elFileList, this._elUpload))),
            a.forward && a.body && (a.body = Locale.get("direqtmessage.compose.forwardBody", [a.sent, a.salutation, a.body])),
            a.reply && a.body && (a.body = Locale.get("direqtmessage.compose.replyBody", [a.sent, a.salutation, a.body])),
            a.replyAll && a.body && (a.body = Locale.get("direqtmessage.compose.replyBody", [a.sent, a.salutation, a.body])),
            this._elBody = new seqta.ui.FormattedText({},a.body || this._defaultContent || ""),
            g.grab(this._elBody),
            this._dlg = this._dlg || new seqta.ui.SlidePane({
                extraClass: "tall",
                onSend: this._save
            }),
            this._dlg.show(Locale.get("direqtmessage.compose.title"), this._element, ["send", "cancel"]),
            1 > this._elRecipients.count() ? this._dlg.disableButton("send") : this._dlg.enableButton("send"),
            this._elBody.ready(),
            this._sendingSemaphore = !1
        } else
            this._doCompose(a)
    },
    _reply: function(a) {
        ajax.send(this.options.urls.load, {
            action: "replymeta",
            id: a
        }, this.compose)
    },
    _replyAll: function(a) {
        ajax.send(this.options.urls.load, {
            action: "replyallmeta",
            id: a
        }, this.compose)
    },
    _forward: function(a) {
        ajax.send(this.options.urls.load, {
            action: "forwardmeta",
            id: a
        }, this.compose)
    },
    _save: function() {
        if (!this._sendingSemaphore) {
            this._sendingSemaphore = !0;
            var a = {
                subject: this._elSubject.get().trim(),
                contents: this._elBody.get().substring(0, this.options.max.message),
                participants: this._elRecipients.get(!0),
                inReplyTo: this._inReplyToID,
                blind: this._elBlind.get()
            };
            this._attachmentsEnabled && this._elFileList && (a.files = this._elFileList.getIDs(!0)),
            (a.subject || a.contents || a.files && a.files.length) && (!a.subject && (a.subject = "" + a.contents.textFromHTML().ellipsise(40)),
            !a.subject && (a.subject = Locale.get("direqtmessage.compose.attachmentsOnlySubject", a.files.length)),
            ajax.send(this.options.urls.save, a, this._saved))
        }
    },
    _saved: function(a) {
        msg.send("coneqtmessage.sent", a.id),
        this._inReplyToID && msg.send("coneqtmessage.repliedTo", this._inReplyToID),
        $alertSubtle(Locale.get("direqtmessage.compose.sentT", a), Locale.get("direqtmessage.compose.sent", a)),
        this._sendingSemaphore = !1
    },
    _setBlind: function(a, b) {
        a ? (this._elBlind.set("checked"),
        this._elBlind.disable(),
        this._elBlindWarning.set("html", b)) : (this._elBlind.set(this._elBlind.get() ? "checked" : ""),
        this._elBlind.enable(),
        this._elBlindWarning.set("html", ""))
    }
}),
seqta.base.part.Conversation = new Class({
    Implements: [Options, Events],
    Binds: ["cleanup", "toElement", "getTitle", "_getData", "update", "_draw", "_drawMessage", "_drawReplyEdit", "_drawCommentBlock", "_drawReplyBlock", "_drawNewComment", "_updateSendTimer", "_sendNew", "_doSendNew", "_sendReply", "_doSendReply", "_delete", "_undoDelete", "_toggle"],
    options: {
        urls: {
            load: "json/conversation/load",
            save: "json/conversation/save"
        },
        minTimeBetweenSend: 5e3,
        autoRefresh: 9e4,
        context: null,
        context_id: -1
    },
    _joData: null,
    _conversationID: null,
    _elNewMessage: null,
    _elNewMessageC: null,
    _elComments: null,
    mComments: null,
    _canDelete: !1,
    _canDeleteAny: !1,
    _timer: null,
    _timerSendDelay: null,
    _startSendDelay: null,
    _lastSentTime: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._conversationID = b,
        this._canDelete = "staff" === user.type,
        this._canDeleteAny = seqta && seqta.auth && seqta.auth.check("portals.manage"),
        this._element = new Element("div",{
            class: "conversation"
        }),
        this._draw(),
        this.options.autoRefresh && (this._timer = this.update.periodical(this.options.autoRefresh))
    },
    cleanup: function() {
        this._timer && window.clearInterval(this._timer)
    },
    toElement: function() {
        return $(this._element)
    },
    _getData: function() {
        this._conversationID && ajax.send(this.options.urls.load, {
            id: this._conversationID,
            context: this.options.context,
            context_id: this.options.context_id
        }, function(a) {
            this._joData = a,
            this._draw(),
            this.fireEvent("onLoad")
        }
        .bind(this))
    },
    update: function() {
        this._conversationID && ajax.send(this.options.urls.load, {
            id: this._conversationID,
            context: this.options.context,
            context_id: this.options.context_id,
            since_ts: this._joData.max_ts
        }, function(a) {
            if (a.items) {
                for (var b, c = 0, d = 0; d < a.items.length; d++) {
                    b = a.items[d],
                    c += 1;
                    for (var e = 0; e < this._joData.length; e++)
                        if (b.id === this._joData[e].id) {
                            this._joData[e] = a.items[d];
                            break
                        }
                    var f = this._elComments.getElement("div[data-id=" + b.id + "]");
                    if (f)
                        this._drawMessage(b, f);
                    else if (b.parent_id && this._mComments[b.parent_id]) {
                        this._mComments[b.parent_id].getElement(".reply.edit").grab(this._drawReplyBlock(b), "before")
                    } else
                        this._mComments[b.id] = this._drawCommentBlock(b),
                        this._elComments.grab(this._mComments[b.id], "top")
                }
                c && audio.play("chatReceive"),
                a.max_ts && (this._joData.max_ts = a.max_ts),
                this._joData.items.append(a.items)
            }
        }
        .bind(this))
    },
    _draw: function() {
        return this._joData ? (this._elComments = new Element("div",{
            class: "comments"
        }),
        this._mComments = {},
        this._joData.items && this._joData.items.each(function(a) {
            a.parent_id && this._mComments[a.parent_id] ? this._mComments[a.parent_id].getElement(".reply.edit").grab(this._drawReplyBlock(a), "before") : (this._mComments[a.id] = this._drawCommentBlock(a),
            this._elComments.grab(this._mComments[a.id], "top"))
        }
        .bind(this)),
        this._toggler = new seqta.ui.Button({
            defaultValue: tools.getIcon("keyboard_arrow_right"),
            extraClass: "toggler",
            onClick: this._toggle
        }),
        void this._element.adopt(this._toggler, this._drawNewComment(), this._elComments)) : void this._getData()
    },
    _drawMessage: function(a, b) {
        var c = this._canDeleteAny || this._canDelete && (a.self || a.contact || a.student);
        if (c && b.addClass("deletable"),
        b.getChildren().dispose(),
        a.deleted)
            b.addClass("deleted"),
            b.adopt(new Element("span",{
                html: Locale.get("conversation.deleted")
            })),
            c && b.adopt(new seqta.ui.Button({
                defaultValue: tools.getIcon("undo"),
                title: Locale.get("conversation.undo"),
                onClick: this._undoDelete.pass(a.id, b)
            }));
        else {
            b.removeClass("deleted");
            var d = new Element("div",{
                class: "name",
                html: Locale.get("conversation.author", [a.salutation, !!a.self])
            })
              , e = new Element("div",{
                class: "age",
                html: a.date.toDate().fuzzyPrint()
            })
              , f = new Element("div",{
                class: "content",
                text: a.contents
            });
            let g = [d, e];
            c && g.push(new seqta.ui.Button({
                defaultValue: tools.getIcon("delete"),
                title: Locale.get("conversation.delete"),
                onClick: this._delete.pass(a.id, b)
            })),
            g.push(f),
            b.adopt(g)
        }
    },
    _drawCommentBlock: function(a) {
        var b = new Element("div",{
            class: "parent" + (a.self ? " self" : ""),
            "data-id": a.id
        });
        this._drawMessage(a, b);
        var c = new Element("div",{
            class: "comment"
        }).adopt(b);
        return c.adopt(this._drawReplyEdit(a)),
        c
    },
    _drawReplyBlock: function(a) {
        var b = new Element("div",{
            class: "reply" + (a.self ? " self" : ""),
            "data-id": a.id
        });
        return this._drawMessage(a, b),
        b
    },
    _drawReplyEdit: function(a) {
        var b = new seqta.ui.LongText({
            autocomplete: "off",
            placeholder: Locale.get("conversation.newReplyPlaceholder")
        });
        return $(b).set("data-id", a.id),
        $(b).addEvents({
            "keydown:keys(enter)": this._sendReply
        }),
        new Element("div",{
            class: "reply edit self"
        }).adopt(b)
    },
    _drawNewComment: function() {
        return this._elNewMessage = new seqta.ui.LongText({
            autocomplete: "off",
            placeholder: Locale.get("conversation.newMessagePlaceholder")
        }),
        $(this._elNewMessage).addEvents({
            "keydown:keys(enter)": this._sendNew
        }),
        this._elNewMessageC = new Element("div",{
            class: "comment new"
        }).adopt(this._elNewMessage),
        this._elNewMessageC
    },
    _sendNew: function(a) {
        if ("enter" === a.key) {
            a.stop();
            var b = this._elNewMessage.get().trim();
            if (this._elNewMessage.set(b),
            b) {
                if (!this._startSendDelay && this._lastSentTime && new Date - this._lastSentTime < this.options.minTimeBetweenSend) {
                    $alertSubtle(Locale.get("conversation.tooSoonT"), Locale.get("conversation.tooSoon")),
                    $(this._element).getElements("textarea").set("disabled", !0),
                    this._startSendDelay = Date.now();
                    var c = new Element("div",{
                        class: "timer",
                        html: Locale.get("conversation.timer", this.options.minTimeBetweenSend)
                    }).inject(this._elNewMessage, "after")
                      , d = this._doSendNew.pass(b);
                    return void (this._timerSendDelay = this._updateSendTimer.delay(1e3, this, [d, c]))
                }
                this._doSendNew(b)
            }
        }
    },
    _doSendNew: function(a) {
        this._lastSentTime = new Date,
        ajax.send(this.options.urls.save, {
            id: this._conversationID,
            context: this.options.context,
            context_id: this.options.context_id,
            mode: "save",
            contents: a
        }, function(a) {
            this._elNewMessage.set(""),
            audio.play("chatSend"),
            this._mComments[a.id] = this._drawCommentBlock(a),
            this._elComments.grab(this._mComments[a.id], "top")
        }
        .bind(this))
    },
    _sendReply: function(a) {
        if ("enter" === a.key) {
            a.stop();
            var b = $(a.target)
              , c = b.get("value").trim()
              , d = b.get("data-id").toInt();
            if (b.set("value", c),
            c) {
                if (!this._startSendDelay && this._lastSentTime && new Date - this._lastSentTime < this.options.minTimeBetweenSend) {
                    $alertSubtle(Locale.get("conversation.tooSoonT"), Locale.get("conversation.tooSoon")),
                    this._startSendDelay = Date.now(),
                    $(this._element).getElements("textarea").set("disabled", !0);
                    var e = new Element("div",{
                        class: "timer",
                        html: Locale.get("conversation.timer", this.options.minTimeBetweenSend)
                    }).inject(b, "after")
                      , f = this._doSendReply.pass([b, d, c]);
                    return void (this._timerSendDelay = this._updateSendTimer.delay(1e3, this, [f, e]))
                }
                this._doSendReply(b, d, c)
            }
        }
    },
    _doSendReply: function(a, b, c) {
        this._lastSentTime = new Date,
        a.blur(),
        ajax.send(this.options.urls.save, {
            id: this._conversationID,
            context: this.options.context,
            context_id: this.options.context_id,
            mode: "save",
            parent_id: b,
            contents: c
        }, function(b) {
            a.set("value", ""),
            audio.play("chatSend"),
            a.getParent().grab(this._drawReplyBlock(b), "before")
        }
        .bind(this))
    },
    _updateSendTimer: function(a, b) {
        clearTimeout(this._timerSendDelay);
        var c = Date.now() - this._startSendDelay;
        c >= this.options.minTimeBetweenSend ? ($(this._element).getElements("textarea").removeProperty("disabled"),
        this._startSendDelay = null,
        this._timerSendDelay = null,
        b.dispose(),
        a()) : (b.set("html", Locale.get("conversation.timer", this.options.minTimeBetweenSend - c)),
        this._timerSendDelay = this._updateSendTimer.delay(1e3, this, [a, b]))
    },
    _delete: function(a) {
        ajax.send(this.options.urls.save, {
            id: this._conversationID,
            item_id: a,
            context: this.options.context,
            context_id: this.options.context_id,
            mode: "delete"
        }, function(b) {
            for (var d = 0; d < this._joData.items.length; d++)
                if (this._joData.items[d].id === b.id) {
                    this._joData.items[d] = b;
                    break
                }
            var e = this._elComments.getElement("div[data-id=" + a + "]");
            this._drawMessage(b, e)
        }
        .bind(this))
    },
    _undoDelete: function(a) {
        ajax.send(this.options.urls.save, {
            id: this._conversationID,
            item_id: a,
            context: this.options.context,
            context_id: this.options.context_id,
            mode: "undelete"
        }, function(b) {
            for (var d = 0; d < this._joData.items.length; d++)
                if (this._joData.items[d].id === b.id) {
                    this._joData.items[d] = b;
                    break
                }
            var e = this._elComments.getElement("div[data-id=" + a + "]");
            this._drawMessage(b, e)
        }
        .bind(this))
    },
    _toggle: function() {
        this._element.toggleClass("collapsed")
    }
}),
seqta.base.part.FolioView = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "setID", "cleanup", "_retrieveList", "_receiveList", "_retrieveFolio", "_receiveFolio", "_draw", "_drawFilters", "_drawList", "_drawListItem", "_drawFolio", "_drawFolioHeader", "_drawFolioContent", "_drawFolioForum", "_checkListScroll", "_selectItem", "_applyFilters", "_addAuthorFilter", "_removeAuthorFilter", "_addTagToFilter", "_removeTagFromFilter"],
    options: {
        urls: {
            load: "",
            forum: {
                load: "",
                save: ""
            }
        },
        replacePath: null
    },
    _joFolio: null,
    _folioID: null,
    _joList: null,
    _pageNumber: 0,
    _listLoading: !1,
    _listScrollLoad: !0,
    _stylesheets: null,
    _element: null,
    _pane: null,
    _filters: null,
    _list: null,
    _current: null,
    _joFilters: null,
    _filterSearch: null,
    _filterTags: null,
    _filterAuthor: null,
    _forum: null,
    _iframeC: null,
    _currentUserName: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "folioViewer"
        }),
        this._draw(),
        this._retrieveList(),
        b && this.setID(b)
    },
    toElement: function() {
        return $(this._element)
    },
    setID: function(a) {
        this.cleanup(),
        this._folioID = a;
        var b = this._list.getElement(".current");
        b && b.removeClass("current");
        var c = this._list.getElement('[data-id = "' + a + '"]');
        c && c.addClass("current"),
        this._retrieveFolio()
    },
    cleanup: function() {
        this._forum && this._forum.cleanup(),
        this._iframeC && this._iframeC.cleanup()
    },
    _retrieveList: function() {
        this._listLoading = !0,
        this._list.addClass("busy"),
        ajax.send(this.options.urls.load, {
            mode: "list",
            page: this._pageNumber,
            filters: this._joFilters
        }, this._receiveList)
    },
    _receiveList: function(a) {
        this._currentUserName = a.me,
        this._joList = this._joList || [],
        this._joList.append(a.list),
        this._drawList(a.list),
        this._listLoading = !1,
        this._list.removeClass("busy"),
        this._listScrollLoad = !!a.list.length
    },
    _retrieveFolio: function() {
        this._folioID && ajax.send(this.options.urls.load, {
            mode: "load",
            id: this._folioID
        }, this._receiveFolio)
    },
    _receiveFolio: function(a) {
        this._joFolio = a,
        this._drawFolio()
    },
    _draw: function() {
        this._current ? this._current.getChildren().dispose() : this._current = new Element("div",{
            class: "current",
            events: {
                "click:relay(.header > .author)": this._addAuthorFilter,
                "click:relay(.header > .tags > li)": this._addTagToFilter
            }
        }).inject(this._element),
        this._pane || (this._pane = new Element("div",{
            class: "pane"
        }).inject(this._element)),
        this._filters ? this._filters.getChildren().dispose() : this._filters = new Element("div",{
            class: "filters"
        }).inject(this._pane),
        this._list ? this._list.getChildren().dispose() : this._list = new Element("div",{
            class: "list",
            events: {
                "click:relay(.item:not(.current))": this._selectItem,
                "scroll:throttle": this._checkListScroll
            }
        }).inject(this._pane),
        this._drawFilters()
    },
    _drawFilters: function() {
        this._joFilters = this._joFilters || {},
        this._filterSearch || (this._filterSearch = new seqta.ui.ShortText({
            onPause: this._applyFilters,
            className: "search",
            placeholder: Locale.get("folios.viewer.filters.search")
        }),
        this._filterTags = this._filterTags || new Element("ul",{
            class: "tags",
            events: {
                "click:relay(.delete)": this._removeTagFromFilter
            }
        }).grab(new Element("span",{
            class: "note",
            html: Locale.get("folios.viewer.filters.tags")
        })),
        this._filterAuthor = new Element("div",{
            class: "author",
            events: {
                "click:relay(.delete)": this._removeAuthorFilter
            }
        }),
        this._filters.adopt(this._filterSearch, this._filterTags, this._filterAuthor))
    },
    _drawList: function(a) {
        a = a || this._joList,
        this._list.adopt(a.map(this._drawListItem))
    },
    _drawListItem: function(a) {
        var b = new Element("div",{
            class: "title",
            text: a.title
        })
          , c = new Element("div",{
            class: "author",
            text: a.student
        })
          , d = new Element("div",{
            class: "time",
            html: a.published.toDate().print(Locale.get("date.dateTimeFormat"))
        })
          , e = new Element("div",{
            class: "item",
            "data-id": a.id
        }).adopt(b, c, d);
        return this._joFolio && a.id === this._joFolio.id && e.addClass("current"),
        e
    },
    _drawFolio: function() {
        this._current.getChildren().dispose(),
        this._drawFolioHeader(),
        this._drawFolioContent(),
        this._drawFolioForum()
    },
    _drawFolioHeader: function() {
        if (this._joFolio) {
            var a = new Element("div",{
                class: "header"
            })
              , b = new Element("div",{
                class: "title",
                text: this._joFolio.title
            })
              , c = new Element("div",{
                class: "time",
                html: this._joFolio.published.toDate().print(Locale.get("date.dateTimeFormat"))
            })
              , d = new Element("div",{
                class: "author",
                text: this._joFolio.author.name
            })
              , e = null;
            this._joFolio.tags && this._joFolio.tags.length && (e = new Element("ul",{
                class: "tags"
            }).adopt(this._joFolio.tags.map(function(a) {
                return new Element("li",{
                    text: a
                })
            }))),
            a.adopt(b, c, d, e),
            this._current.grab(a)
        }
    },
    _drawFolioContent: function() {
        this._joFolio && (this._joFolio.files = this._joFolio.files || [],
        this._iframeC = new seqta.ui.Frame({
            extraClass: "content",
            macro: {
                browser: {
                    fileDefaults: {
                        type: "folio"
                    }
                }
            }
        },this._joFolio.contents,this._joFolio.files),
        this._current.grab(this._iframeC))
    },
    _drawFolioForum: function() {
        this._forum && (this._forum.cleanup(),
        $(this._forum).destroy()),
        this._joFolio && (this._forum = new seqta.base.part.ForumView({
            autoscroll: !1,
            suppressSiteGreeting: !0,
            reverseSort: !1,
            urls: this.options.urls.forum,
            verticalFill: !1,
            currentUserName: this._currentUserName
        },this._joFolio.forum,!this._joFolio.allow_comments),
        this._current.grab(this._forum),
        this._forum && this._joFolio.allow_comments && this._forum.ready())
    },
    _checkListScroll: function() {
        this._listLoading || !this._listScrollLoad || this._list.scrollTop + this._list.clientHeight >= this._list.scrollHeight - 300 && (this._pageNumber += 1,
        this._retrieveList())
    },
    _selectItem: function(a, b) {
        var c = b.get("data-id");
        c && ((c = c.toInt()) === this._folioID || (this.setID(c),
        this.options.replacePath && c && this.options.replacePath({
            pathname: `/folios/${c}`
        })))
    },
    _applyFilters: function() {
        this._joFilters.search = this._filterSearch.get().trim(),
        this._pageNumber = 0,
        this._list.getChildren().dispose(),
        this._retrieveList()
    },
    _addAuthorFilter: function() {
        this._joFolio && this._joFolio.author && this._joFilters.author !== this._joFolio.author.id && (this._joFilters.author = this._joFolio.author.id,
        this._filterAuthor.getChildren().dispose(),
        this._filterAuthor.adopt(new Element("span",{
            class: "name",
            text: this._joFolio.author.name
        }), new seqta.ui.Button({
            extraClass: "delete",
            defaultValue: "&times;"
        })),
        this._filterAuthor.addClass("visible"),
        this._applyFilters())
    },
    _removeAuthorFilter: function() {
        this._filterAuthor.removeClass("visible"),
        this._filterAuthor.getChildren().dispose(),
        delete this._joFilters.author,
        this._applyFilters()
    },
    _addTagToFilter: function(a, b) {
        var c = b.get("text");
        if (this._joFilters.tags = this._joFilters.tags || [],
        !this._joFilters.tags.contains(c)) {
            this._joFilters.tags.push(c);
            var d = new Element("li",{
                "data-tag": c,
                text: c
            }).grab(new seqta.ui.Button({
                extraClass: "delete",
                defaultValue: "&times;"
            }));
            this._filterTags.grab(d, "top"),
            this._applyFilters()
        }
    },
    _removeTagFromFilter: function(a, b) {
        if (this._joFilters.tags && (b = b.getParent("li"))) {
            var c = b.get("data-tag");
            this._joFilters.tags.erase(c),
            b.dispose(),
            this._applyFilters()
        }
    }
}),
seqta.base.part.ForumList = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "cleanup", "refresh", "_getData", "_draw", "_drawForum", "_selectForum", "_editForum", "_closeForum", "_reopenForum", "_triggerEmpty", "getReadOnlyStatus"],
    options: {
        urls: {
            load: "json/forum/load"
        },
        admin: !1,
        autoRefresh: 9e5
    },
    joData: null,
    _element: null,
    _elForums: null,
    _elClosedForums: null,
    _elROClosedForums: null,
    _elDivider: null,
    _enableManagement: !1,
    _drawClosedForums: !1,
    _drawROClosedForums: !1,
    _selectedID: null,
    _timer: null,
    _defaultSelected: !1,
    initialize: function(a) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "forum forumList",
            events: {
                "click:relay(.item)": this._selectForum,
                "click:relay(.edit)": this._editForum,
                "click:relay(.close)": this._closeForum,
                "click:relay(.reopen)": this._reopenForum
            }
        }),
        this._elForums = new Element("div",{
            class: "forums"
        }).inject(this._element),
        msg.register("user.settings.loaded", function() {
            this._enableManagement = "staff" === user.type,
            this.refresh()
        }
        .bind(this)),
        this.options.autoRefresh && (this._timer = window.setInterval(this.refresh, this.options.autoRefresh)),
        a.defaultForumID && (this._selectedID = a.defaultForumID)
    },
    toElement: function() {
        return $(this._element)
    },
    cleanup: function() {
        this._timer && window.clearInterval(this._timer)
    },
    refresh: function() {
        this._getData()
    },
    _getData: function() {
        ajax.send(this.options.urls.load, {
            mode: "list"
        }, function(a) {
            this.joData = a,
            0 !== this.joData.forums.length || this.joData.roforums || this._triggerEmpty(),
            this._draw()
        }
        .bind(this))
    },
    _draw: function() {
        var a, b = [], c = null;
        this._drawClosedForums && this._elClosedForums && (this._elClosedForums.destroy(),
        this._elClosedForums = null),
        this._elForums.empty();
        for (var d = 0, e = 0; e < this.joData.forums.length; e++)
            (c = this.joData.forums[e]).closed || b.push(this._drawForum(c));
        for (e = 0; e < this.joData.forums.length; e++)
            (c = this.joData.forums[e]).closed && (d += 1,
            b.push(this._drawForum(c)));
        if (d && (this._elClosedForums ? this._elClosedForums.set("html", Locale.get("forum.closedForums").substitute({
            n: d
        })) : this._elClosedForums = $(new seqta.ui.Button({
            defaultValue: Locale.get("forum.closedForums").substitute({
                n: d
            }),
            extraClass: "closedToggle",
            onClick: function() {
                this._elClosedForums.destroy(),
                this._elClosedForums = null,
                this._elForums.addClass("show-closed")
            }
            .bind(this)
        }))),
        (b.length || d) && this._elForums.adopt(b, this._elClosedForums),
        this.joData.roforums && this.joData.roforums.length) {
            var f = [];
            this._elDivider || (this._elDivider = new Element("div",{
                class: "divider"
            }),
            this._elDivider.grab(new Element("div",{
                class: "name",
                text: this.joData.roforums[0].editonly ? Locale.get("forum.editOnly") : Locale.get("forum.readOnly")
            }))),
            this._elForums.adopt(this._elDivider);
            var g = 0;
            for (e = 0; e < this.joData.roforums.length; e++)
                (c = this.joData.roforums[e]).closed || f.push(this._drawForum(c));
            for (e = 0; e < this.joData.roforums.length; e++)
                (c = this.joData.roforums[e]).closed && (g += 1,
                f.push(this._drawForum(c)));
            g && (this._elROClosedForums ? this._elROClosedForums.set("html", Locale.get("forum.closedForums").substitute({
                n: g
            })) : this._elROClosedForums = $(new seqta.ui.Button({
                defaultValue: Locale.get("forum.closedForums").substitute({
                    n: g
                }),
                extraClass: "closedToggle",
                onClick: function() {
                    this._elROClosedForums.destroy(),
                    this._elROClosedForums = null,
                    this._elForums.addClass("show-ro-closed")
                }
                .bind(this)
            }))),
            (f.length || g) && (this._elForums.removeClass("show-closed"),
            this._elForums.removeClass("show-ro-closed"),
            this._elForums.adopt(f, this._elROClosedForums))
        }
        (a = this._elForums.getElement(".selected")) && (!this._defaultSelected || this._selectedID !== a.get("data-id").toInt()) && this._selectForum(null, a)
    },
    _drawForum: function(a) {
        var b = new Element("div",{
            class: "item",
            "data-id": a.id
        });
        a.id === this._selectedID && b.addClass("selected"),
        a.closed && b.addClass("closed"),
        a.editonly ? b.addClass("editonly") : a.readonly && b.addClass("readonly"),
        b.grab(new Element("div",{
            class: "name",
            text: a.title
        }));
        var c = new Element("div",{
            class: "meta"
        }).inject(b);
        if (a.readonly ? c.adopt(new Element("div",{
            class: "stat",
            html: Locale.get("forum.participantCount").substitute({
                n: a.participants
            })
        }), new Element("div",{
            class: "stat",
            html: Locale.get("forum.messageCount").substitute({
                n: a.total || 0
            })
        })) : c.adopt(new Element("div",{
            class: "stat",
            html: Locale.get("forum.participantCount").substitute({
                n: a.participants
            })
        }), new Element("div",{
            class: "stat",
            html: Locale.get("forum.unreadCount").substitute({
                n: (a.unread || 0) + (a.unread_comments || 0)
            })
        }), new Element("div",{
            class: "stat",
            html: Locale.get("forum.messageCount").substitute({
                n: (a.unread || 0) + (a.read || 0) + (a.unread_comments || 0) + (a.read_comments || 0)
            })
        })),
        (a.unread || a.unread_comments) && b.addClass("unread"),
        this._enableManagement) {
            var d = new Element("div",{
                class: "actions"
            }).inject(b);
            a.readonly || (a.closed ? (a.is_owner || this.options.admin) && d.adopt(new seqta.ui.Button({
                extraClass: "reopen",
                title: Locale.get("forum.reopenForum"),
                defaultValue: tools.getIcon("undo")
            })) : (a.is_owner || this.options.admin) && d.adopt(new seqta.ui.Button({
                extraClass: "edit",
                title: Locale.get("forum.editForum"),
                defaultValue: tools.getIcon("edit")
            }), new seqta.ui.Button({
                extraClass: "close",
                title: Locale.get("forum.closeForum"),
                defaultValue: tools.getIcon("close")
            })))
        }
        return b
    },
    _selectForum: function(a, b) {
        if (!a || !a.target.match("button") && !a.target.match("button *")) {
            b.hasClass("closed") && (b.hasClass("editonly") || b.hasClass("readonly") ? (this._elROClosedForums && this._elROClosedForums.destroy(),
            this._elROClosedForums = null,
            this._elForums.addClass("show-ro-closed")) : (this._elClosedForums && this._elClosedForums.destroy(),
            this._elClosedForums = null,
            this._elForums.addClass("show-closed"))),
            this._defaultSelected || (this._defaultSelected = !0);
            var c = b.get("data-id").toInt();
            this._elForums.getChildren(".selected").removeClass("selected"),
            b.addClass("selected").removeClass("unread"),
            this._selectedID = c,
            this.fireEvent("onSelect", c)
        }
    },
    _editForum: function(a, b) {
        a.stop();
        var c = (b = b.getParent(".item")).get("data-id").toInt();
        this.fireEvent("onEdit", c)
    },
    _closeForum: function(a, b) {
        a.stop(),
        (b = b.getParent(".item")).getElement(".actions").getChildren().dispose(),
        b.getElement(".actions").adopt(new seqta.ui.Button({
            extraClass: "reopen",
            title: Locale.get("forum.reopenForum"),
            defaultValue: tools.getIcon("undo")
        }));
        var c = b.get("data-id").toInt();
        this.fireEvent("onClose", c)
    },
    _reopenForum: function(a, b) {
        a.stop(),
        (b = b.getParent(".item")).hasClass("closed") && b.removeClass("closed"),
        b.getElement(".actions").getChildren().dispose(),
        b.getElement(".actions").adopt(new seqta.ui.Button({
            extraClass: "edit",
            title: Locale.get("forum.editForum"),
            defaultValue: tools.getIcon("edit")
        }), new seqta.ui.Button({
            extraClass: "close",
            title: Locale.get("forum.closeForum"),
            defaultValue: tools.getIcon("close")
        }));
        var c = b.get("data-id").toInt();
        this.fireEvent("onReopen", c)
    },
    _triggerEmpty: function() {
        this.fireEvent("onEmpty")
    },
    getReadOnlyStatus: function(a) {
        var b = this._elForums.getElement("div[data-id=" + a + "]");
        return b.hasClass("editonly") || b.hasClass("readonly")
    },
    getCurrentUserName: function() {
        return this.joData && this.joData.me
    }
}),
seqta.base.part.ForumView = new Class({
    Implements: [Options, Events],
    Binds: ["cleanup", "toElement", "getTitle", "ready", "_getData", "_retrievedSettings", "reload", "_loadedData", "update", "_postUpdate", "_draw", "_drawMessages", "_drawDeletedThreadPlaceholder", "_drawThread", "_drawMessage", "_drawComments", "_getMessageActions", "_drawComment", "_drawDeletedCommentPlaceholder", "_drawReadCommentPlaceholder", "_drawMeta", "_scrollToLatest", "_showDeletedThreads", "_showExtraComments", "_drawNewComment", "_drawAddMessage", "_postMessage", "_donePostMessage", "_postComment", "_direqtmessage", "_ban", "_processBan", "_banned", "_delete", "_processDelete", "_deleted", "_showLightbox", "_printAssessment", "printTranscript", "toggleSort", "_mute", "getMuteButton", "_setSendButtonStatus"],
    options: {
        urls: {
            load: "json/forum/load",
            save: "json/forum/save",
            pastoral: "pastoral/save",
            assPrint: "reports/assessment/print"
        },
        reverseSort: void 0,
        autoscroll: !0,
        autoRefresh: 3e5,
        drawPhotos: !0,
        suppressSiteGreeting: !1,
        currentUserName: ""
    },
    joData: null,
    _joTypes: null,
    _siteGreeting: null,
    _element: null,
    _elMessages: null,
    _elAddMessage: null,
    _elEditor: null,
    _elEditorC: null,
    _elFileUpload: null,
    _elFileList: null,
    _elSaveButton: null,
    _lightbox: null,
    _enableManagement: !1,
    _elBanReason: null,
    _elBanPastoral: null,
    _elBanDelete: null,
    _elComments: {},
    _elCommentInputs: {},
    _elMoreCommentButtons: {},
    _elAssessment: null,
    _elForumGreeting: null,
    _elSiteGreeting: null,
    _elMuteButton: null,
    _messageStudents: !1,
    _messageStaff: !1,
    forumID: null,
    _readonly: null,
    _drawDeleted: !1,
    _timer: null,
    _reverseSort: !1,
    initialize: function(a, b, c) {
        this.setOptions(a),
        this.forumID = b,
        this._readonly = c,
        this._lightbox = new seqta.ui.Lightbox,
        this._element = new Element("div",{
            class: "forum forumView"
        }),
        this._getData(),
        this.options.autoRefresh && (this._timer = this.update.periodical(this.options.autoRefresh))
    },
    cleanup: function() {
        this._timer && window.clearInterval(this._timer)
    },
    toElement: function() {
        return $(this._element)
    },
    getTitle: function() {
        return this.joData && this.joData.title || Locale.get("forum.title")
    },
    ready: function() {
        this._elAddMessage && this._elAddMessage.destroy(),
        this._drawAddMessage(),
        this._element.grab(this._elAddMessage, this._reverseSort ? "top" : "bottom"),
        this._elEditor = new seqta.ui.FormattedText({
            onChange: this._setSendButtonStatus.bind(this)
        }),
        this._elEditorC.grab(this._elEditor),
        this._elEditor.ready()
    },
    _getData: function() {
        this.joData = null,
        this._siteGreeting || dataStore.retrieve("siteSettings", this._retrievedSettings)
    },
    _retrievedSettings: function(a) {
        var b, c;
        b = a["forum.greeting"] || a["coneqt-s.forum.greeting"],
        this._siteGreeting = b && b.value,
        this._messageStudents = !0,
        this._messageStaff = !0,
        c = ["messages.students.enabled", "coneqt-s.messages.enabled", "coneqt-s.messages.students.enabled"];
        for (var d = 0; d < c.length; d++)
            a[c[d]] && "disabled" === a[c[d]].value && (this._messageStudents = !1);
        c = ["coneqt-s.messages.staff.enabled", "coneqt-s.messages.enabled"];
        for (d = 0; d < c.length; d++)
            a[c[d]] && "disabled" === a[c[d]].value && (this._messageStaff = !1);
        this.forumID && ajax.send(this.options.urls.load, {
            mode: "normal",
            id: this.forumID
        }, this._loadedData)
    },
    reload: function() {
        this.forumID && ajax.send(this.options.urls.load, {
            mode: "normal",
            id: this.forumID
        }, this._loadedData)
    },
    _loadedData: function(a) {
        this.joData = a;
        var b = seqta.auth.check("forum.edit.all")
          , c = this.joData.owner_id === user.userID.toInt() || a.folio_owner
          , d = "staff" === user.type && this.joData && this.joData.staff && this.joData.staff.contains(user.userID);
        this._enableManagement = b || c || d,
        this._elMuteButton && this._elMuteButton.setToggled(!!this.joData.muted),
        this._elMuteButton && (this._readonly || this.joData.closed) && this._elMuteButton.disable(),
        void 0 === this.options.reverseSort ? msg.register("user.settings.loaded", function() {
            this._reverseSort = user.getPreference("forum.reverseSort"),
            this._reverseSort = this._reverseSort && "enabled" === this._reverseSort.value,
            this._draw(),
            this._drawMessages(this.joData.messages),
            this.fireEvent("onLoad"),
            this.options.autoscroll && this._scrollToLatest.delay(100)
        }
        .bind(this)) : (this._draw(),
        this._drawMessages(this.joData.messages),
        this.fireEvent("onLoad"),
        this.options.autoscroll && this._scrollToLatest.delay(100))
    },
    update: function() {
        this.forumID && ajax.send(this.options.urls.load, {
            mode: "update",
            ts: this.joData && this.joData.ts.toDate().print("sqlTimestamp"),
            id: this.forumID
        }, this._postUpdate)
    },
    _postUpdate: function(a) {
        var b = []
          , c = []
          , d = []
          , e = []
          , f = null
          , g = null
          , h = null
          , k = null
          , l = null
          , m = 0
          , n = 0;
        if (this.joData.ts = a.ts || this.joData.ts,
        a.comments)
            for (m = 0; m < a.comments.length; m++)
                (g = a.comments[m]).deleted ? e.push(g) : d.push(g);
        for (m = 0; m < e.length; m++)
            g = e[m],
            (l = this._elMessages.getElement(".thread[data-id=" + g.message + "] > .comments > .comment[data-id=" + g.id + "]")) && l.addClass("deleted");
        for (m = 0; m < d.length; m++) {
            for (g = d[m],
            f = null,
            n = 0; n < this.joData.messages.length && !f; n++)
                this.joData.messages[n].id === g.message && (f = this.joData.messages[n]);
            if (f && (f.comments = f.comments || [],
            f.comments.push(g),
            !(h = this._elMessages.getElement(".thread[data-id=" + f.id + "]")).getElement(".comment[data-id=" + g.id + "]")))
                if (k = h.getElement(".comments")) {
                    var o = k.getElement(".new");
                    o ? this._reverseSort ? o.grab(this._drawComment(g), "after") : o.grab(this._drawComment(g), "before") : k.grab(this._drawComment(g), this._reverseSort ? "top" : "bottom")
                } else
                    h.grab(this._drawComments(f))
        }
        if (a.messages)
            for (m = 0; m < a.messages.length; m++)
                if ((f = a.messages[m]).deleted)
                    c.push(f);
                else {
                    if (this._elMessages.getElement(".thread[data-id=" + f.id + "]"))
                        continue;
                    b.push(f),
                    this.joData.messages.push(f)
                }
        for (m = 0; m < c.length; m++)
            f = c[m],
            (l = this._elMessages.getElement(".thread[data-id=" + f.id + "]")) && l.addClass("deleted");
        this._drawMessages(b)
    },
    _draw: function() {
        if (this._elMessages = this._elMessages || new Element("div",{
            class: "messages",
            events: {
                "click:relay(.deletedPlaceholder[data-messages])": this._showDeletedThreads,
                "click:relay(.comments > .deletedPlaceholder[data-comments])": this._showExtraComments,
                "click:relay(.comments > .readPlaceholder[data-comments])": this._showExtraComments,
                "click:relay(.actions > .direqtmessage, .message > .name, .comment > .name, .photo)": this._direqtmessage,
                "click:relay(.actions > .ban)": this._ban,
                "click:relay(.actions > .delete)": this._delete,
                "click:relay(.thread > .message > .resources > .item.image)": this._showLightbox
            }
        }),
        this._elMessages.getChildren().dispose(),
        this._elMessages.inject(this._element, this._reverseSort ? "bottom" : "top"),
        this.joData.assessment && (!this._elAssessment && (this._elAssessment = new Element("div",{
            class: "assessment"
        }),
        this._elAssessment.grab($(new seqta.ui.Button({
            defaultValue: Locale.get("forum.printAssessment"),
            onClick: this._printAssessment
        })))),
        this._elAssessment.inject(this._element, "top")),
        !this.options.suppressSiteGreeting && (this.joData.greeting || this.joData.assessment)) {
            for (var a = this._element.getChildren(), b = 0; b < a.length; b++)
                a[b].hasClass("forumGreeting") && a[b].dispose();
            this._elForumGreeting = new seqta.ui.Frame({
                extraClass: "forumGreetingWrapper"
            },this.joData.greeting),
            this._element.grab(new Element("div",{
                class: "greeting forumGreeting"
            }).adopt(this._elForumGreeting), "top")
        }
        !this.options.suppressSiteGreeting && this._siteGreeting && (this._elSiteGreeting = this._elSiteGreeting || new Element("div",{
            class: "greeting siteGreeting"
        }),
        this._elSiteGreeting.set("html", this._siteGreeting),
        this._elSiteGreeting.inject(this._element, "top")),
        this.joData.closed && this._elAddMessage && this._elAddMessage.destroy()
    },
    _drawMessages: function(a) {
        for (var b, c = [], d = [], e = 0; e < a.length; e++)
            (b = a[e]).deleted ? d.push(b.id) : (d.length && (c.push(this._drawDeletedThreadPlaceholder(d)),
            d = []),
            c.push(this._drawThread(b)));
        d.length && c.push(this._drawDeletedThreadPlaceholder(d));
        for (e = 0; e < c.length; e++)
            this._elMessages.grab(c[e], this._reverseSort ? "top" : "bottom")
    },
    _drawDeletedThreadPlaceholder: function(a) {
        return new Element("div",{
            class: "deletedPlaceholder",
            "data-messages": JSON.stringify(a),
            html: Locale.get("forum.deletedMessages", a.length)
        })
    },
    _drawThread: function(a) {
        var b = new Element("div",{
            class: "thread",
            "data-id": a.id,
            "data-partID": a.part
        });
        return a.deleted && b.addClass("deleted"),
        a.banned && b.addClass("banned"),
        b.adopt(this._drawMessage(a), this._drawComments(a)),
        b
    },
    _getMessageActions: function(a) {
        if (!a || a.add)
            return null;
        const b = new Element("div",{
            class: "actions"
        });
        return a.id && (a.staffID && this._messageStaff || a.student && this._messageStudents) && a.inCampus && b.grab(new seqta.ui.Button({
            defaultValue: tools.getIcon("direqt_message"),
            extraClass: "direqtmessage",
            title: Locale.get("direqtmessage.newMessage")
        })),
        this._enableManagement && ("staff" === user.type && a.student && !a.banned && b.grab(new seqta.ui.Button({
            defaultValue: tools.getIcon("block"),
            extraClass: "ban",
            title: Locale.get("forum.banParticipant")
        })),
        b.grab(new seqta.ui.Button({
            defaultValue: a.deleted ? tools.getIcon("undo") : tools.getIcon("delete"),
            extraClass: "delete",
            title: a.deleted ? Locale.get("forum.undeleteMessage") : Locale.get("forum.deleteMessage")
        }))),
        b
    },
    _drawMessage: function(a) {
        var b = a.studentID || a.student
          , c = a.staffID || a.staff
          , d = new Element("div",{
            class: "message " + (a.staff ? "staff" : "student"),
            "data-partID": a.participantID,
            "data-student": b,
            "data-staff": c
        });
        a.read || this._readonly || d.addClass("unread"),
        b && b.toInt() === user.userID.toInt() && "student" === user.type && d.addClass("me"),
        c && c.toInt() === user.userID.toInt() && "staff" === user.type && d.addClass("me");
        var e = new Element("div",{
            class: "name",
            text: a.name || a.student || a.staff
        })
          , f = null;
        a.sent && a.sent.toDate && (f = new Element("div",{
            class: "time",
            html: a.sent.toDate().print(Locale.get("date.dateTimeFormat"))
        }));
        var g = new seqta.ui.Frame({
            extraClass: "contents"
        },a.contents)
          , h = null;
        return a.resources && (h = new seqta.ui.FileList({
            listClass: "inline",
            actions: {
                delete: !1
            },
            iconSize: 16,
            fileDefaults: {
                type: "forum"
            }
        },a.resources)),
        d.adopt(new Element("div",{
            class: "header"
        }).adopt(this._drawMeta(a), e, f, this._getMessageActions(a)), g, h),
        d
    },
    _drawComments: function(a) {
        var b = new Element("div",{
            class: "comments"
        })
          , c = []
          , d = []
          , e = [];
        if (a.comments) {
            for (var f, g = 0; g < a.comments.length; g++)
                (f = a.comments[g]).deleted ? d.push(f.id) : f.read ? e.push(f.id) : (d.length && (c.push(this._drawDeletedCommentPlaceholder(d, a.id)),
                d = []),
                c.push(this._drawComment(f)));
            d.length && c.push(this._drawDeletedCommentPlaceholder(d, a.id)),
            e.length && c.splice(0, 0, this._drawReadCommentPlaceholder(e, a.id))
        }
        var h = null;
        if (!this._readonly && !this.joData.closed) {
            var j = new seqta.ui.Button({
                defaultValue: Locale.get("forum.sendComment"),
                onClick: function(b, c) {
                    this._postComment(a.id),
                    c.disable()
                }
                .bind(this)
            })
              , k = new Element("div",{
                class: "compose"
            });
            this._elCommentInputs[a.id] = new seqta.ui.LongText({
                "data-id": a.id,
                autocomplete: "off",
                placeholder: Locale.get("forum.newComment"),
                onKeyup: function() {
                    "" === this._elCommentInputs[a.id].get().trim() ? j.disable() : j.enable()
                }
                .bind(this)
            },k);
            var l = new Element("div",{
                class: "actions"
            }).grab(j);
            h = new Element("div",{
                class: "new"
            }).adopt(k, l),
            j.disable()
        }
        return c.push(h),
        this._reverseSort && c.reverse(),
        b.adopt(c),
        b
    },
    _drawComment: function(a) {
        var b = a.studentID || a.student
          , c = a.staffID || a.staff
          , d = new Element("div",{
            class: "comment " + (a.staff ? "staff" : "student"),
            "data-id": a.id,
            "data-partID": a.participantID,
            "data-student": b,
            "data-staff": c
        });
        a.read || this._readonly || d.addClass("unread"),
        a.deleted && d.addClass("deleted"),
        a.banned && d.addClass("banned"),
        b && b.toInt() === user.userID.toInt() && "student" === user.type && d.addClass("me"),
        c && c.toInt() === user.userID.toInt() && "staff" === user.type && d.addClass("me");
        var e = new Element("div",{
            class: "name",
            text: a.name || a.student || a.staff
        })
          , f = null;
        a.sent && a.sent.toDate && (f = new Element("div",{
            class: "time",
            html: a.sent.toDate().print(Locale.get("date.dateTimeFormat"))
        }));
        var g = new Element("div",{
            class: "contents",
            text: a.contents
        });
        return d.adopt(new Element("div",{
            class: "header"
        }).adopt(this._drawMeta(a, !0), e, f, this._getMessageActions(a)), g),
        d
    },
    _drawDeletedCommentPlaceholder: function(a, b) {
        return new Element("div",{
            class: "deletedPlaceholder",
            "data-message": b,
            "data-comments": JSON.stringify(a),
            html: Locale.get("forum.deletedComments", a.length)
        })
    },
    _drawReadCommentPlaceholder: function(a, b) {
        return new Element("div",{
            class: "readPlaceholder",
            "data-message": b,
            "data-comments": JSON.stringify(a),
            html: Locale.get("forum.readComments", a.length)
        })
    },
    _drawMeta: function(a, b) {
        var c = new Element("div",{
            class: "meta" + (a.inCampus ? "" : " differentCampus")
        })
          , d = null;
        return this.options.drawPhotos && (d = new seqta.base.ComponentWrapper({
            component: SEQTATeachModules.widgets.Avatar,
            className: "photo",
            props: {
                className: "forumAvatar",
                person: Object.merge({}, a, {
                    salutation: a.add ? this.options.currentUserName : a.name
                }),
                type: a.staff ? "staff" : a.student ? "student" : a.contact ? "contact" : "",
                size: b ? 24 : 32
            }
        })),
        c.adopt(d),
        c
    },
    _scrollToLatest: function() {
        if (this._elMessages && this.options.autoscroll) {
            var a = this._elMessages.getElements(".unread");
            a.length ? a = this._reverseSort ? a[a.length - 1] : a[0] : a = (a = this._elMessages.getElements(".message")).length ? this._reverseSort ? a[0] : a[a.length - 1] : this._elMessages.getElement(".new"),
            a && a.scrollIntoView({
                block: "nearest",
                inline: "center"
            })
        }
    },
    _showDeletedThreads: function(a, b) {
        if (b = document.id(b)) {
            var c = JSON.parse.attempt(b.get("data-messages"));
            if (null !== c) {
                for (var d, e = [], f = 0; f < this.joData.messages.length; f++)
                    d = this.joData.messages[f],
                    c.contains(d.id) && e.push(this._drawThread(d));
                for (f = 0; f < e.length; f++)
                    b.grab(e[f], this._reverseSort ? "after" : "before");
                b.dispose()
            }
        }
    },
    _showExtraComments: function(a, b) {
        if (b = document.id(b)) {
            var c = b.get("data-message").toInt()
              , d = JSON.parse.attempt(b.get("data-comments"));
            if (!isNaN(c) && null !== d) {
                for (var e = null, f = 0; f < this.joData.messages.length && !e; f++)
                    c === this.joData.messages[f].id && (e = this.joData.messages[f]);
                if (e && e.comments && e.comments.length) {
                    var g, h = [];
                    for (f = 0; f < e.comments.length; f++)
                        g = e.comments[f],
                        d.contains(g.id) && h.push(this._drawComment(g));
                    this._reverseSort && h.reverse();
                    for (f = 0; f < h.length; f++)
                        b.grab(h[f], "before");
                    b.dispose()
                }
            }
        }
    },
    _drawNewComment: function(a) {
        for (var b, c, d = null, e = a.message, f = 0; f < this.joData.messages.length && !d; f++)
            e === this.joData.messages[f].id && (d = this.joData.messages[f]);
        d && (d.comments = d.comments || [],
        d.comments.push(a),
        b = this._drawComment(a),
        (c = this._element.getFirst(".messages > .thread[data-id=" + e + "] > .comments > .new")) && c.grab(b, this._reverseSort ? "after" : "before"))
    },
    _drawAddMessage: function() {
        this._elAddMessage = new Element("div",{
            class: "message addMessage"
        });
        let a = new Element("div",{
            class: "header"
        }).inject(this._elAddMessage);
        var b = {
            name: user.userDesc,
            add: !0,
            uuid: user.userUUID,
            photo: !0,
            staff: "staff" === user.type,
            student: "student" === user.type,
            contact: "contact" === user.type
        }
          , c = this._drawMeta(b);
        return this._elSaveButton = new seqta.ui.Button({
            defaultValue: Locale.get("forum.sendMessage"),
            onClick: this._postMessage
        }),
        this._elSaveButton.disable(),
        a.adopt(c, new Element("div",{
            class: "name",
            text: b.name || b.student || b.staff
        }), new Element("div",{
            class: "actions"
        }).grab(this._elSaveButton)),
        this._elEditorC = new Element("div",{
            class: "contents"
        }).inject(this._elAddMessage),
        this._elFileList = new seqta.ui.FileList({
            listClass: "inline",
            actions: {
                delete: !0
            },
            iconSize: 16,
            showLink: !1,
            showMeta: !1,
            fileDefaults: {
                type: "forum"
            }
        }),
        this._elFileUpload = new seqta.ui.FileHandler({
            callback: function(a) {
                this._elFileList.add(a),
                this._setSendButtonStatus()
            }
            .bind(this),
            browser: {}
        }),
        this._elFileList.addEvent("onDelete", this._setSendButtonStatus.bind(this)),
        this._elFileList.addEvent("onUndelete", this._setSendButtonStatus.bind(this)),
        this._elNewResources = new Element("div",{
            class: "resources newResources"
        }).adopt(this._elFileList, this._elFileUpload).inject(this._elAddMessage),
        this._elAddMessage
    },
    _postMessage: function() {
        ajax.send(this.options.urls.save, {
            mode: "message",
            forum: this.forumID,
            contents: this._elEditor.get(),
            resources: this._elFileList.getIDs(!0)
        }, this._donePostMessage)
    },
    _donePostMessage: function(a) {
        this._elFileList.set(),
        this._elEditor.set(""),
        this._elSaveButton.disable(),
        this.joData.messages.push(a);
        var b = this._drawThread(a);
        this._elMessages.grab(b, this._reverseSort ? "top" : "bottom"),
        this.fireEvent("onPost")
    },
    _postComment: function(a) {
        var b = this._elCommentInputs[a]
          , c = b.get();
        b.set(""),
        b.toElement().removeClass("expanded"),
        "" != c.trim() && ajax.send(this.options.urls.save, {
            mode: "comment",
            forum: this.forumID,
            message: a,
            contents: c
        }, this._drawNewComment)
    },
    _direqtmessage: function(a, b) {
        var c = b.getParent("[data-staff]");
        if (c || (c = b.getParent("[data-student]")),
        c) {
            var d = {};
            c.get("data-staff") && c.get("data-staff").toInt() ? d.staff = [c.get("data-staff").toInt()] : c.get("data-student") && c.get("data-student").toInt() && (d.students = [c.get("data-student").toInt()]),
            msg.send("coneqtmessage.global.compose", d)
        }
    },
    _ban: function(a, b) {
        var c = b.getParent("[data-student]");
        if (c) {
            var d = b.getParent("[data-partID]");
            if (d) {
                var e = d.get("data-partID").toInt();
                if (e) {
                    var f = c.get("data-student").toInt();
                    if (f) {
                        var g = c.hasClass("differentCampus")
                          , h = new seqta.ui.SlidePane({
                            compact: !0,
                            enableKeys: !1,
                            extraClass: "narrow",
                            onOk: this._processBan.pass([e, f])
                        });
                        this._elBanReason = new seqta.ui.LongText,
                        this._elBanReason.set(""),
                        this._elBanPastoral = new seqta.ui.Checkbox({
                            label: Locale.get("forum.recordBanPastoral")
                        }),
                        this._elBanDelete = new seqta.ui.Checkbox({
                            label: Locale.get("forum.deleteBannedMessages")
                        });
                        var i = new Element("div",{
                            class: "forum ban",
                            html: Locale.get("forum.reallyBan")
                        });
                        i.grab(this._elBanReason),
                        g || i.grab(this._elBanPastoral.getBox()),
                        i.grab(this._elBanDelete.getBox()),
                        h.show(Locale.get("forum.reallyBanT"), i, ["ok", "cancel"])
                    }
                }
            }
        }
    },
    _processBan: function(a, b) {
        var c = this._elBanDelete.get()
          , d = this._elBanPastoral.get()
          , e = this._elBanReason.get();
        ajax.send(this.options.urls.save, {
            mode: "ban",
            forum: this.forumID,
            id: a,
            reason: e,
            deleteAll: c
        }, this._banned.pass([a, c])),
        d && ajax.send(this.options.urls.pastoral, {
            student: b,
            from: (new Date).print("sqlTimestamp"),
            details: e,
            forumInfringement: 1
        })
    },
    _banned: function(a, b) {
        for (var c = "[data-partID=" + a + "]", d = this._elMessages.getElements(".thread" + c + ", .thread > .comments > .comment" + c), e = 0; e < d.length; e++)
            d[e].addClass("banned"),
            b && d[e].addClass("deleted");
        if ((d = this._elMessages.getElements(".thread" + c + " > .message > .actions > .ban, .thread > .comments > .comment" + c + " > .actions > .ban")).dispose(),
        b) {
            d = this._elMessages.getElements(".thread" + c + " > .message > .actions > .delete, .thread > .comments > .comment" + c + " > .actions > .delete");
            var f = tools.getIcon("undo")
              , g = Locale.get("forum.undeleteMessage");
            for (e = 0; e < d.length; e++)
                d[e].set("html", f).set("title", g)
        }
        var h;
        for (e = 0; e < this.joData.messages.length; e++)
            if ((h = this.joData.messages[e]).student && h.part === a && (h.banned = !0,
            b && (h.deleted = !0)),
            h.comments)
                for (var k, l = 0; l < h.comments.length; l++)
                    (k = h.comments[l]).student && k.participantID === a && (k.banned = !0,
                    b && (k.deleted = !0))
    },
    _delete: function(a, b) {
        var c = b.getParent("[data-id]");
        if (c) {
            var d = c.get("data-id").toInt()
              , e = null;
            if (c.hasClass("comment")) {
                var f = c.getParent(".thread[data-id]");
                if (!f)
                    return;
                e = f.get("data-id").toInt()
            }
            c.hasClass("deleted") ? new seqta.ui.SlidePane({
                compact: !0,
                onYes: this._processDelete.pass([d, e, !0])
            }).showConfirm(Locale.get("forum.reallyRestoreT"), Locale.get("forum.reallyRestore"), ["yes", "no"]) : new seqta.ui.SlidePane({
                compact: !0,
                onYes: this._processDelete.pass([d, e, !1])
            }).showConfirm(Locale.get("forum.reallyDeleteT"), Locale.get("forum.reallyDelete"), ["yes", "no"])
        }
    },
    _processDelete: function(a, b, c) {
        var d = {
            mode: (c ? "restore" : "delete") + (b ? "Comment" : ""),
            forum: this.forumID
        };
        b ? (d.message = b,
        d.comment = a) : d.id = a,
        ajax.send(this.options.urls.save, d, this._deleted.pass([a, b, c]))
    },
    _deleted: function(a, b, c) {
        var d = null;
        if ((d = b ? this._elMessages.getElement(".thread > .comments > .comment[data-id=" + a + "]") : this._elMessages.getElement(".thread[data-id=" + a + "]")) && (c ? d.removeClass("deleted") : d.addClass("deleted"),
        d = d.getElement(".actions > .delete"))) {
            d.set("html", c ? tools.getIcon("delete") : tools.getIcon("undo")),
            d.set("title", c ? Locale.get("forum.deleteMessage") : Locale.get("forum.undeleteMessage"));
            for (var e, f = 0; f < this.joData.messages.length; f++)
                if (e = this.joData.messages[f],
                b) {
                    if (e.id !== b)
                        continue;
                    if (e.comments)
                        for (var g, h = 0; h < e.comments.length; h++)
                            if ((g = e.comments[h]).id === a)
                                return void (g.deleted = !0)
                } else if (e.id === a)
                    return void (e.deleted = !0)
        }
    },
    _showLightbox: function(a, b) {
        if (b.hasClass("image")) {
            a.stop();
            var d = b.getParent().getChildren(".item.image");
            this._lightbox.light(d.get("href"), d.indexOf(b))
        }
    },
    _printAssessment: function() {
        this.joData.assessment && ajax.print(this.options.urls.assPrint, {
            id: this.joData.assessment
        })
    },
    printTranscript: function() {
        var a = [];
        a.push("<block>"),
        a.push("<meta>"),
        a.push("<title><![CDATA[" + this.joData.title + "]]></title>"),
        this.joData.greeting && a.push("<greeting><![CDATA[" + this.joData.greeting + "]]></greeting>"),
        this.joData.closed && a.push("<closed><![CDATA[" + this.joData.closed.toDate().print(Locale.get("date.dateTimeFormat")) + "]]></closed>"),
        a.push("<owner><![CDATA[" + this.joData.owner + "]]></owner>"),
        a.push("</meta>"),
        a.push("<messages>");
        for (var b, c = 0; c < this.joData.messages.length; c++)
            if (!(b = this.joData.messages[c]).deleted) {
                if (a.push("<message>"),
                a.push("<photo><![CDATA[" + b.photo + "]]></photo>"),
                a.push("<poster><![CDATA[" + b.name + "]]></poster>"),
                a.push("<student><![CDATA[" + b.student + "]]></student>"),
                a.push("<submitted><![CDATA[" + b.sent.toDate().print(Locale.get("date.dateTimeFormat")) + "]]></submitted>"),
                a.push("<contents><![CDATA[" + b.contents + "]]></contents>"),
                a.push("<comments>"),
                b.comments)
                    for (var d, e = 0; e < b.comments.length; e++)
                        (d = b.comments[e]).deleted || (a.push("<comment>"),
                        a.push("<photo><![CDATA[" + d.photo + "]]></photo>"),
                        a.push("<poster><![CDATA[" + d.name + "]]></poster>"),
                        a.push("<student><![CDATA[" + d.student + "]]></student>"),
                        a.push("<submitted><![CDATA[" + d.sent.toDate().print(Locale.get("date.dateTimeFormat")) + "]]></submitted>"),
                        a.push("<contents><![CDATA[" + d.contents + "]]></contents>"),
                        a.push("</comment>"));
                a.push("</comments>"),
                a.push("</message>")
            }
        a.push("</messages>"),
        a.push("</block>"),
        ajax.print("reports/generic", {
            weasy: !0,
            data: a.join("\n"),
            xslt: "forumTranscript"
        })
    },
    toggleSort: function(a) {
        this._elAddMessage || this._drawAddMessage();
        var b = this._reverseSort;
        this._reverseSort = a,
        b === this._reverseSort || (this._elMessages.getChildren().dispose(),
        this._reverseSort ? this._elMessages.inject(this._elAddMessage, "after") : this._elMessages.inject(this._elAddMessage, "before"),
        this._drawMessages(this.joData.messages))
    },
    _mute: function(a) {
        this._readonly || ajax.send(this.options.urls.save, {
            mode: "mute",
            forum: this.forumID,
            mute: !!a
        })
    },
    getMuteButton: function() {
        return this._elMuteButton = this._elMuteButton || new seqta.ui.ButtonToggle({
            defaultValue: Locale.get("forum.muteToggle"),
            onToggle: this._mute
        }),
        this.joData && this._elMuteButton.setToggled(!!this.joData.muted),
        (this._readonly || this.joData && this.joData.closed) && this._elMuteButton.disable(),
        this._elMuteButton
    },
    _setSendButtonStatus: function() {
        "" !== this._elEditor.get().unescapeHTML().trim() || 0 < this._elFileList.getIDs(!0) ? this._elSaveButton.enable() : this._elSaveButton.disable()
    }
}),
seqta.base.part.ProgramNavigator = new Class({
    Implements: [Options, Events],
    options: {
        orderable: !0,
        showCover: !0,
        searchable: !0,
        prefname: "programNavigator.oldestFirst"
    },
    Binds: ["toElement", "setData", "draw", "drawUnitplansChart", "updateUnitplanChart", "getSelected", "setSelected", "scrollTo", "selectToday", "redrawLesson", "toggleDirection", "_render", "_select", "_search"],
    joData: null,
    _element: null,
    _root: null,
    _unitplansChart: null,
    _elSearch: null,
    _selected: null,
    _oldestFirst: void 0,
    initialize: function(a) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "programmeNavigator"
        })
    },
    toElement: function() {
        return this._element
    },
    setData: function(a) {
        this.joData = a;
        var b = user.getPreference(this.options.prefname);
        b && (this._oldestFirst = "disabled" !== b.value),
        this.draw()
    },
    draw: function() {
        if (this.joData && this.joData.w) {
            var a = "";
            if (this.options.searchable && this._elSearch && (a = this._elSearch.get()),
            this._root ? this._root.getChildren().destroy() : (this._root = new Element("ul",{
                class: "navigator",
                events: {
                    "click:relay(.lesson, .cover)": this._select
                }
            }),
            this.joData.seqs && this.joData.seqs.length && (this._unitplansChart = new seqta.ui.UnitplansChart,
            this._element.grab(this._unitplansChart)),
            this._element.grab(this._root)),
            this._render(),
            this._selected)
                this.setSelected(this._selected.id, !0);
            else {
                var b = this._root.getFirst(".cover");
                b && this._select({}, b)
            }
            a && this._elSearch && (this._elSearch.set(a),
            this._search())
        }
    },
    drawUnitplansChart: function() {
        if (!(!this._unitplansChart && this.joData.seqs && 0 < this.joData.seqs.length)) {
            var a = this.joData.seqs.first(function(a) {
                return a.active
            });
            this._unitplansChart.set(this.joData, a.id, this._root, this._oldestFirst),
            this._unitplansChart.draw(),
            this._unitplansChart.updateHeight()
        }
    },
    updateUnitplanChart: function() {
        this._unitplansChart.updateHeight()
    },
    getSelected: function() {
        return this._selected
    },
    setSelected: function(a, b) {
        var c = this._root.getElement("[data-id=" + a + "]");
        c && this._select({}, c, b)
    },
    scrollTo: function(a) {
        var b = this._root.getElement("[data-id=" + a + "]");
        b && b.getParent(".week").scrollIntoView({
            block: "nearest",
            inline: "center"
        })
    },
    selectToday: function() {
        if (this.joData.d && this.joData.w) {
            for (var a = new Date, b = null, c = null, d = null, e = null, f = null, g = null, h = null, k = 0; k < this.joData.d.length; k++)
                if (b = this.joData.d[k],
                c = this.joData.w[k],
                b.l && b.l.length && c && c.length)
                    for (var l = 0; l < b.l.length; l++)
                        if (d = b.l[l],
                        e = c[l]) {
                            if (g = d.d.toDate(),
                            0 === (h = a.compareDatePart(g)))
                                return this.setSelected(e.i),
                                void this.scrollTo(e.i);
                            if (0 > h)
                                return void (f ? (this.setSelected(f.i),
                                this.scrollTo(f.i)) : (this.setSelected(e.i),
                                this.scrollTo(e.i)));
                            f = e
                        }
            f && (this.setSelected(f.i),
            this.scrollTo(f.i))
        }
    },
    redrawLesson: function(a) {
        var b = this._root.getFirst(".week > .lessons > [data-id=" + a + "]");
        if (b) {
            var c = b.get("data-week").toInt()
              , d = b.get("data-number").toInt()
              , e = this.joData.w[c][d];
            if (e) {
                var f = this.joData.d ? this.joData.d.first(function(a) {
                    return a.n === c
                }) : null
                  , g = !!(f && f.l && f.l[d]) && f.l[d]
                  , h = new Element("li",{
                    class: "lesson",
                    "data-id": e.i,
                    "data-week": c,
                    "data-number": d
                }).adopt(new Element("div",{
                    class: "meta"
                }).adopt(new Element("div",{
                    class: "sequence"
                }).adopt(new Element("div",{
                    class: "number",
                    text: e.n + 1
                }), new Element("div",{
                    class: "period",
                    text: g && g.p ? g.p : ""
                }), new Element("div",{
                    class: "date",
                    text: g && g.d ? g.d.toDate().print(Locale.get("date.dayMonth")) : ""
                })), new Element("div",{
                    class: "topic",
                    text: e.t || ""
                })));
                e.l && e.l.unescapeHTML().trim() || e.document ? h.grab(tools.getIcon("wisp", !0, "wisp").set("title", Locale.get("programme.lessonHasWisp")), "top") : e.r && e.r.length && h.grab(tools.getIcon("attachment", !0, "resource").set("title", Locale.get("programme.lessonHasResource")), "top"),
                this._selected.element === $(b) && (h.addClass("selected"),
                this._selected.element = $(h)),
                h.replaces(b)
            }
        }
    },
    toggleDirection: function() {
        this._oldestFirst = !this._oldestFirst,
        user.savePreference(this.options.prefname, this._oldestFirst ? "enabled" : "disabled"),
        this._selected && (this._selected.element = null),
        this.draw(),
        this._unitplansChart && this._unitplansChart.update(this._root, this._oldestFirst)
    },
    _render: function() {
        for (var a = this._oldestFirst ? "top" : "bottom", b = tools.getIcon("sort"), c = this.joData.w, d = this.joData.d, e = 0; e < c.length; e++)
            for (var f, g = d ? d.first(function(a) {
                return a.n === e
            }) : null, h = null, k = new Element("ul",{
                class: "lessons"
            }), l = 0; l < c[e].length; l++)
                if (!(f = c[e][l]).f) {
                    h || (h = new Element("li",{
                        class: "week",
                        "data-week": e
                    }).adopt(new Element("div",{
                        class: "meta"
                    }).adopt(new Element("div",{
                        class: "number",
                        text: e + 1
                    }), new Element("div",{
                        class: "term",
                        text: g && g.t ? "T" + g.t : ""
                    }), new Element("div",{
                        class: "week",
                        text: g && g.w ? "W" + g.w : ""
                    }))).inject(this._root, a),
                    k.inject(h));
                    var m = !!(g && g.l && g.l[l]) && g.l[l]
                      , n = new Element("li",{
                        class: "lesson",
                        "data-id": f.i,
                        "data-week": e,
                        "data-number": l
                    }).adopt(new Element("div",{
                        class: "meta"
                    }).adopt(new Element("div",{
                        class: "sequence"
                    }).adopt(new Element("div",{
                        class: "number",
                        text: f.n + 1
                    }), new Element("div",{
                        class: "period",
                        text: m && m.p ? m.p : ""
                    }), new Element("div",{
                        class: "date",
                        text: m && m.d ? m.d.toDate().print(Locale.get("date.dayMonth")) : ""
                    })), new Element("div",{
                        class: "topic",
                        text: f.t || ""
                    }))).inject(k, a);
                    f.l && f.l.unescapeHTML().trim() || f.document ? n.grab(tools.getIcon("wisp", !0, "wisp").set("title", Locale.get("programme.lessonHasWisp")), "top") : f.r && f.r.length && n.grab(tools.getIcon("attachment", !0, "resource").set("title", Locale.get("programme.lessonHasResource")), "top")
                }
        if (this.options.showCover && new Element("li",{
            class: "cover",
            "data-id": "cover",
            html: Locale.get("programme.cover")
        }).inject(this._root, "top"),
        this.options.searchable && (this._elSearch = new seqta.ui.ShortText({
            className: "search",
            placeholder: Locale.get("general.search"),
            onPause: this._search
        }),
        $(this._elSearch).inject(this._root, "top")),
        this.options.orderable) {
            var o = new Element("div",{
                class: "bar flat"
            }).inject(this._root, "top")
              , p = new seqta.ui.Button({
                defaultValue: b,
                extraClass: "labelled",
                onClick: this.toggleDirection
            });
            o.adopt(p)
        }
    },
    _select: function(a, b, c) {
        var d = !0;
        this._selected && this._selected.element && (d = this._selected.element !== $(b),
        this._selected.element.removeClass("selected"));
        var e = b.get("data-id")
          , f = null
          , g = null
          , h = null;
        b = $(b),
        "cover" === e ? this._selected = {
            id: e,
            element: b
        } : (e = e.toInt(),
        f = b.get("data-week").toInt(),
        g = b.get("data-number").toInt(),
        h = this.joData.w[f][g],
        this._selected = {
            week: f,
            number: g,
            id: e,
            element: b
        }),
        b.addClass("selected"),
        !0 !== c && (this.fireEvent("select", [e, f, g, h, this]),
        d && this.fireEvent("change", [e, f, g, h, this]))
    },
    _search: function() {
        for (var a = this._elSearch.get().toLowerCase().trim(), b = null, c = null, d = [], e = null, f = 0; f < this.joData.w.length; f++) {
            b = this.joData.w[f];
            for (var g = 0; g < b.length; g++) {
                if (c = b[g],
                !a) {
                    d.push(c.i);
                    break
                }
                e = [c.t, c.o, c.l, c.h, c.e];
                for (var h = 0; h < e.length; h++)
                    if (e[h] && e[h].toLowerCase().contains(a)) {
                        d.push(c.i);
                        break
                    }
            }
        }
        var l = this._root.getElements(".week > .lessons > .lesson")
          , m = null;
        for (f = 0; f < l.length; f++)
            (m = l[f]).hasClass("selected") || d.contains(m.get("data-id").toInt()) ? m.show() : m.hide();
        this._unitplansChart && this._unitplansChart.updateHeight()
    }
}),
seqta.base.part.ResourceBrowser = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "get", "setStudent", "show", "hide", "_done", "_draw", "_updateActiveFilters", "_toggleSearchConfig", "_showSearchConfig", "_hideSearchConfig", "_disposeSearchConfig", "_drawSearchConfig", "_changeSource", "_retrieveData", "_receiveData", "_retrieveMore", "_receiveMore", "_drawItem", "_selectItem"],
    options: {
        fileDefaults: {
            type: "student"
        },
        multiple: !0,
        sources: null,
        maxResults: 20,
        mode: null,
        urls: {
            list: null
        }
    },
    _element: null,
    _searchBar: null,
    _searchInput: null,
    _searchConfigButton: null,
    _searchConfig: null,
    _results: null,
    _pane: null,
    _gallery: null,
    _moreButton: null,
    _data: null,
    _searchOptions: null,
    initialize: function(a) {
        this.setOptions(a)
    },
    toElement: function() {
        return this._element
    },
    get: function() {
        return this._data ? this._gallery.get() : null
    },
    setStudent: function(a) {
        for (var b = 0; b < this.options.sources.length; b++)
            this.options.sources[b].request && this.options.sources[b].request.student && (this.options.sources[b].request.student = a)
    },
    show: function() {
        this._element || this._draw(),
        this._pane = this._pane || new seqta.ui.SlidePane({
            extraClass: "resourceBrowser",
            onOk: this._done
        }),
        this._pane.show(Locale.get("resourceBrowser.title"), this._element, ["ok", "cancel"]),
        this._retrieveData()
    },
    hide: function() {
        this._pane && this._pane.hide()
    },
    _done: function() {
        this.fireEvent("done", [this.get()])
    },
    _draw: function() {
        this._element || (this._element = new Element("div",{
            class: "browser"
        }),
        this._searchBar = new Element("div",{
            class: "search"
        }),
        this._searchInput = new seqta.ui.ShortText({
            placeholder: Locale.get("resourceBrowser.search"),
            onPause: this._retrieveData
        }),
        this.options.sources && (this._searchConfigButton = new seqta.ui.Button({
            onClick: this._toggleSearchConfig
        })),
        this._searchBar.adopt(this._searchInput, this._searchConfigButton),
        this._updateActiveFilters(),
        this._gallery = new seqta.ui.Gallery({
            fileDefaults: this.options.fileDefaults,
            showDownloadLink: !0,
            showMeta: !0,
            verticalFillItems: !1
        }),
        this._gallery.setMultiple(this.options.multiple),
        this._moreButton = new seqta.ui.Button({
            extraClass: "more",
            defaultValue: Locale.get("resourceBrowser.more"),
            onClick: this._retrieveMore
        }),
        $(this._moreButton).hide(),
        this._results = new Element("div",{
            class: "results"
        }).adopt(this._gallery, this._moreButton),
        this._element.adopt(this._searchBar, this._results))
    },
    _updateActiveFilters: function() {
        if (!this._searchOptions && (this._searchOptions = {},
        this.options.sources))
            for (var a = 0; a < this.options.sources.length; a++)
                this.options.sources[a].enabled && (this._searchOptions.source = Object.clone(this.options.sources[a]),
                delete this._searchOptions.source.enabled);
        this._searchOptions.source && this._searchConfigButton.setValue(this._searchOptions.source.name + tools.getIcon("arrow_drop_down"))
    },
    _toggleSearchConfig: function() {
        this._searchConfig && this._searchConfig.hasClass("visible") ? this._hideSearchConfig() : this._showSearchConfig()
    },
    _showSearchConfig: function() {
        this._searchConfig || this._drawSearchConfig(),
        this._searchConfig.inject(this._element),
        this._searchConfig.clientHeight,
        this._searchConfig.addClass("visible")
    },
    _hideSearchConfig: function() {
        this._searchConfig && (this._searchConfig.removeClass("visible"),
        this._searchConfig.addEventListener("transitionend", this._disposeSearchConfig, !1),
        this._searchConfig.addEventListener("webkitTransitionEnd", this._disposeSearchConfig, !1))
    },
    _disposeSearchConfig: function() {
        this._searchConfig && (this._searchConfig.removeEventListener("transitionend", this._disposeSearchConfig, !1),
        this._searchConfig.removeEventListener("webkitTransitionEnd", this._disposeSearchConfig, !1),
        !this._searchConfig.hasClass("visible") && this._searchConfig.dispose())
    },
    _drawSearchConfig: function() {
        var a = String.uniqueID;
        if (!this._searchConfig) {
            var b = [];
            if (this.options.sources) {
                for (var c = a(), d = [], e = 0; e < this.options.sources.length; e++) {
                    var f = this.options.sources[e]
                      , g = a()
                      , h = new Element("div",{
                        class: "source",
                        "data-index": e
                    }).adopt(new Element("input",{
                        type: "radio",
                        id: g,
                        name: c,
                        checked: !!f.enabled,
                        value: e
                    }), new Element("label",{
                        for: g,
                        html: f.name
                    }));
                    d.push(h)
                }
                var j = new Element("div",{
                    class: "sources",
                    events: {
                        "click:relay(input)": this._changeSource
                    }
                }).adopt(d);
                b.push(j)
            }
            this._searchConfig = new Element("div",{
                class: "searchConfig"
            }).adopt(b)
        }
    },
    _changeSource: function(a, b) {
        if (b && (b = b.getParent("[data-index]"))) {
            var c = b.get("data-index").toInt()
              , d = this.options.sources[c];
            d && (this._searchOptions.source = d,
            this._updateActiveFilters(),
            this._retrieveData())
        }
    },
    _retrieveData: function() {
        var a = this._searchOptions && this._searchOptions.source || null;
        a = Object.clone(a && a.request),
        Object.each(a, function(a, b, c) {
            "function" === typeOf(a) && (c[b] = a.attempt())
        });
        var b = Object.merge({
            mode: this.options.mode,
            search: this._searchInput.get().trim()
        }, a);
        ajax.send(this.options.urls.list, b, this._receiveData)
    },
    _receiveData: function(a) {
        this._data = a,
        this._gallery.set(a),
        a && a.length === this.options.maxResults ? $(this._moreButton).show() : $(this._moreButton).hide()
    },
    _retrieveMore: function() {
        var a = this._searchOptions && this._searchOptions.source || null;
        a = Object.clone(a && a.request),
        Object.each(a, function(a, b, c) {
            "function" === typeOf(a) && (c[b] = a.attempt())
        });
        var b = Object.merge({
            mode: this.options.mode,
            search: this._searchInput.get().trim(),
            offset: this._data.length - 1
        }, a);
        ajax.send(this.options.urls.list, b, this._receiveMore)
    },
    _receiveMore: function(a) {
        this._data.append(a),
        this._gallery.add(a),
        a && a.length === this.options.maxResults ? $(this._moreButton).show() : $(this._moreButton).hide()
    }
}),
seqta.base.part.StudentTimetable = new Class({
    Implements: [Options, Events],
    options: {
        urls: {
            info: null,
            events: "json/events/load",
            print: null
        },
        fop: !1,
        timetableDateFormat: Locale.get("date.shortDateFormat"),
        showPrintButton: !0,
        externalDateSelector: !1,
        showTimetabledClasses: !0,
        showCalendarClasses: !0,
        showEventsAppointments: !0
    },
    Binds: ["toElement", "_retrieveData", "_receiveData", "_draw", "addControl", "_selectTimetableMode", "_renderTimetable", "_renderEvents", "_renderClass", "_renderTimetableClasses", "_renderCalendarClasses", "_getCalendarDates", "_navigateTimetable", "selectStudent", "_clickEntry", "_drawQuickbar", "_hideQuickbar", "printTimetable", "_direqtMessageStaff", "restoreScroll", "setCalendarOptions", "_getSiteSettings"],
    _mode: null,
    _date: null,
    _element: null,
    _elTimetableContainer: null,
    _elTimetableTitle: null,
    _elTimetableControls: null,
    _elSettings: null,
    _timetableModes: null,
    _calendar: null,
    _joData: null,
    _events: null,
    _student: null,
    _authSipAttendance: null,
    _scale: null,
    initialize: function(a, b, c, d) {
        this.setOptions(a),
        this._student = b,
        this._date = c || new Date,
        this._mode = d || "day",
        this._authSipAttendance = "tutor" === user.type || seqta.auth.check("attendance.sip"),
        this._element = new Element("div",{
            class: "SIPTimetable"
        }),
        this._timetableModes = {
            day: Locale.get("timetable.dayMode"),
            full: Locale.get("timetable.fullMode")
        },
        this._scale = 0,
        user.getPreference("calendar.scale") && (this._scale = user.getPreference("calendar.scale").value),
        this._retrieveData()
    },
    toElement: function() {
        return this._element
    },
    _retrieveData: function() {
        var a = tools.func.createConcurrentHandler(["timetable", "events"], this._receiveData);
        this._getSiteSettings(),
        ajax.send(this.options.urls.info, {
            id: this._student,
            timetable: !0,
            daily: "day" === this._mode,
            date: this._date.toDate().print("sqlDate")
        }, a.timetable);
        var b = "day" === this._mode ? this._date : new Date(this._date).startOfWeek();
        ajax.send(this.options.urls.events, {
            dateFrom: b.toDate().print("sqlDate"),
            dateTo: "day" === this._mode ? b.toDate().print("sqlDate") : new Date(b).addDays(7).print("sqlDate"),
            person: this._student,
            personType: "student"
        }, a.events)
    },
    _receiveData: function(a, b) {
        var c = !this._joData;
        this._joData = a,
        this._events = b,
        this._draw(),
        c && this.fireEvent("ready")
    },
    setCalendarOptions: function(a) {
        a && a.contains && (this.options.showTimetabledClasses = a.contains("timetabled"),
        this.options.showCalendarClasses = a.contains("calendar"),
        this.options.showEventsAppointments = a.contains("events"))
    },
    _draw: function() {
        if (!this._elTimetableControls && !this._elTimetableContainer) {
            if (this._elTimetableControls = new Element("div",{
                class: "timetableControls"
            }),
            this.options.showPrintButton) {
                var a = new seqta.ui.Button({
                    defaultValue: Locale.get("timetable.print"),
                    extraClass: "print",
                    onClick: this.printTimetable
                });
                this._elTimetableControls.grab(a)
            }
            if (!this.options.externalDateSelector) {
                var b = new Element("div",{
                    class: "navigation"
                });
                this._elTimetableTitle = new Element("div",{
                    class: "title",
                    html: this._date.print(this.options.timetableDateFormat)
                });
                var c = new seqta.ui.Button({
                    defaultValue: tools.getIcon("arrow_back"),
                    title: Locale.get("general.previous"),
                    onClick: this._navigateTimetable.pass(-1),
                    extraClass: "flat"
                })
                  , d = new seqta.ui.Button({
                    defaultValue: tools.getIcon("event_note"),
                    title: Locale.get("general.selectDate"),
                    extraClass: "flat"
                })
                  , f = (new seqta.ui.Calendar({
                    onSelect: this._navigateTimetable,
                    position: "bottomRight",
                    edge: "topRight"
                },d),
                new seqta.ui.Button({
                    defaultValue: tools.getIcon("arrow_forward"),
                    title: Locale.get("general.next"),
                    onClick: this._navigateTimetable.pass(1),
                    extraClass: "flat"
                }));
                b.adopt(this._elTimetableTitle, c, d, f),
                this._elTimetableControls.grab(b)
            }
            this._elTimetableContainer = new Element("div",{
                class: "timetableContainer"
            }),
            this._element.adopt(this._elTimetableControls, this._elTimetableContainer)
        }
        this._selectTimetableMode(this._mode)
    },
    addControl: function(a, b) {
        b || (b = "bottom"),
        this._elTimetableControls.grab(a, b)
    },
    _renderTimetable: function() {
        return this._hideQuickbar(),
        this._calendar ? (this._calendar.setDays(this._getCalendarDates(this._date, this._mode)),
        this._calendar.clearEntries(),
        this._calendar.restoreScroll()) : (this._calendar = new seqta.ui.DailyCalendar({
            idField: "calendarid",
            addColumnSpace: !1,
            addSpacer: !1,
            onEditEntry: this._clickEntry,
            onNavigate: function(a) {
                "back" === a ? this._navigateTimetable(-1) : this._navigateTimetable(1)
            }
            .bind(this),
            onScale: this._renderTimetable,
            highlightWeekends: !0,
            showCurrentTime: !0,
            hideDisabledButtons: !0,
            readonly: !0,
            dateFormat: this.options.timetableDateFormat,
            currentScale: this._scale.toInt()
        },this._getCalendarDates(this._date, this._mode)),
        this._calendar.scrollToDefault(),
        this.options.externalDateSelector ? this._calendar.enableNavigation() : this._calendar.disableNavigation(),
        this._elTimetableContainer.grab(this._calendar)),
        this.options.showTimetabledClasses && this._renderTimetableClasses(),
        this.options.showCalendarClasses && this._renderCalendarClasses(),
        this.options.showEventsAppointments && this._renderEvents(),
        this._calendar
    },
    _getSiteSettings: function() {
        var a = dataStore.retrieve("siteSettings")
          , b = !1
          , c = null;
        dataStore.has("siteSettings") && a["studentInfo.timetable.email"] && "enabled" === a["studentInfo.timetable.email"].value && (b = !0,
        c = (dataStore.has("siteSettings") && a.mailto ? a.mailto.value : null) || "mailto:?bcc=",
        c = "object" === typeOf(c) ? c.value : c),
        this._elSettings = {
            showEmail: b,
            mailTo: c
        }
    },
    _renderTimetableClasses: function() {
        var a = this._joData.timetable
          , b = null;
        if (a.periods)
            for (var c, d = 0; d < a.periods.length; d++) {
                c = a.periods[d].id;
                for (var e = 0; e < a.dates.length; e++) {
                    var f = a.dates[e].cycle
                      , g = a[c][f];
                    if (g) {
                        g = Array.convert(g);
                        for (var h = 0; h < g.length; h++)
                            b = g[h],
                            this._renderClass(b, this._elSettings.showEmail, this._elSettings.mailTo)
                    }
                }
            }
    },
    _renderCalendarClasses: function() {
        var a = this._joData.timetable
          , b = null;
        if (a.adhoc)
            for (var c = 0; c < a.adhoc.length; c++)
                b = a.adhoc[c],
                this._renderClass(b, this._elSettings.showEmail, this._elSettings.mailTo)
    },
    _renderEvents: function() {
        this._events.map(function(a) {
            return new seqta.base.part.calendar.entry.Event({
                dateRange: [this._date.print("sqlDate"), new Date(this._date).addDays(7).print("sqlDate")],
                mutable: !1,
                person: {
                    id: this._student,
                    type: "student"
                }
            },this._calendar,a)
        }
        .bind(this))
    },
    _renderClass: function(a, b, c) {
        var d = {}
          , e = null;
        d.calendarid = String.uniqueID(),
        d.code = a.subject,
        d.title = a.title,
        d.classnumber = a.classnumber,
        d.staff = a.teacher,
        d.staff_id = a.teacher_id,
        d.date = a.date,
        d.from = a.start,
        d.until = a.end,
        d.room = a.room,
        a.moved && a.movedTo && (d.moved = a.moved,
        d.movedTo = a.movedTo),
        a.period_name && (d.period = a.period_name),
        this._authSipAttendance && (d.attendance_icon = a.attendance_icon,
        d.attendance_label = a.attendance_label),
        b && (d.mailto = c,
        d.email = a.teacher_email);
        var f = new Element("div",{
            class: "actions"
        });
        this._authSipAttendance && (e = new Element("div",{
            class: "attendance",
            html: tools.getIcon(d.attendance_icon || "attendance/blank")
        })),
        d.extraElements = [e, f, new Element("div",{
            class: "room" + (d.moved ? " changed " : ""),
            html: Locale.get("timetable.currentRoom", [d.room, d.movedTo])
        })];
        var g = new Element("div",{
            class: "staff",
            html: a.teacher
        });
        f.grab(g);
        var h = this._calendar.addEntry(d);
        h && h.set("data-instance", d.id)
    },
    _selectTimetableMode: function(a) {
        (a = a ? Array.convert(a)[0] : this._mode) === this._mode ? this._renderTimetable() : (user.savePreference("studentInfo.timetable.mode", a, function() {}),
        this._mode = a,
        msg.send("student.update.timetableMode", a),
        this.retrieveData())
    },
    _clickEntry: function(a, b, c) {
        c && c.stop && c.stop(),
        this._quickbarEntry === a && this._hideQuickbar() || (this._drawQuickbar(a),
        !b && this._quickbarEntry && (b = this._elTimetableContainer.getElement("[data-calendarid=" + this._quickbarEntry.calendarid + "]")),
        this._quickbar.position(this._elTimetableContainer, b),
        this._calendar.addEvent("scroll:pause", this._quickbar.reposition))
    },
    _drawQuickbar: function(a) {
        a && (this._quickbarEntry = a,
        this._quickbar = this._quickbar || new seqta.ui.Quickbar,
        this._quickbar.toElement().dispose().empty(),
        "event" === a.type ? this._drawEventQuickbar(a) : this._drawClassQuickbar(a))
    },
    _drawEventQuickbar: function(a) {
        var b = a.handler.getContext();
        this._quickbar.toElement().grab(new seqta.base.part.calendar.quickbar.Event({
            showGutter: !1,
            disallowNotes: !0,
            disallowGutter: !0,
            canEditAll: !1,
            canEdit: !1
        },a.handler.getContext()));
        var c = $(this._quickbar);
        c.set("data-type", "event"),
        b.colour && b.colour.code && b.colour.obj ? (c.setStyle("background-color", b.colour.code),
        c.style.setProperty("--quickbar-bg", b.colour.code),
        c.set("data-yiq", "#fff" === b.colour.obj.yiqContrast() ? "light" : "dark")) : (c.setStyle("background-color", ""),
        c.style.removeProperty("--quickbar-bg"),
        c.set("data-yiq", ""))
    },
    _drawClassQuickbar: function(a) {
        var b = $(this._calendar).getElement('.entry[data-calendarid="' + a.calendarid + '"]');
        if (b) {
            var c = b.getStyle("background-color");
            this._quickbar.set("background-color", c, "style"),
            $(this._quickbar).style.setProperty("--quickbar-bg", c),
            this._quickbar.set("data-mode", "view"),
            this._quickbar.set("data-staff", a.staff_id),
            this._quickbar.set("data-yiq", "#fff" === new Color(c).yiqContrast() ? "light" : "dark");
            var d = new Element("div",{
                class: "title",
                text: a.title
            })
              , e = new Element("div",{
                class: "meta"
            })
              , f = null
              , g = null;
            if (this._authSipAttendance && (g = new Element("div",{
                class: "attendance",
                html: tools.getIcon(a.attendance_icon || "attendance/blank")
            })),
            e.adopt(new Element("div",{
                class: "times",
                html: a.from.toDate().print("H:i") + "&ndash;" + a.until.toDate().print("H:i") + (a.period ? " (" + a.period + ")" : "")
            }), new Element("div",{
                class: "room" + (a.moved ? " changed " : ""),
                html: Locale.get("timetable.currentRoom", [a.room, a.movedTo])
            }), new Element("div",{
                class: "staff",
                text: a.staff || ""
            }), g),
            "staff" === user.type) {
                f = new Element("div",{
                    class: "gutter"
                });
                var h = [];
                a.mailto && a.email && h.push(new Element("a",{
                    href: a.mailto + a.email,
                    target: "_blank",
                    class: "email flat",
                    html: tools.getIcon("mail_outline") + Locale.get("timetable.email")
                })),
                h.push(new seqta.ui.Button({
                    defaultValue: tools.getIcon("direqt_message") + Locale.get("direqtmessage.abbreviation"),
                    extraClass: "direqtmessage",
                    onClick: this._direqtMessageStaff
                })),
                f.adopt(h)
            }
            this._quickbar.toElement().grab(new Element("div",{
                class: "wrapper"
            }).adopt(d, e, f))
        }
    },
    _hideQuickbar: function() {
        return !(!this._quickbar || !this._quickbar.isVisible() || (this._quickbar.hide(),
        0))
    },
    _getCalendarDates: function(a, b) {
        var c = [];
        if ("day" === b)
            c.push({
                date: new Date(a),
                label: Locale.get("timetable.dayTitle", [a.print("D j M")])
            });
        else
            for (var d = new Date(a).startOfWeek(), e = 0; 7 > e; e++)
                c.push({
                    date: new Date(d),
                    label: Locale.get("timetable.dayTitle", [d.print("D j M")])
                }),
                d.addDays(1);
        return c
    },
    _navigateTimetable: function(a, b) {
        const c = new Date(this._date);
        switch (typeOf(a)) {
        case "date":
        case "string":
            this._date = a.toDate();
            break;
        default:
            this._date.addDays(a * ("full" === this._mode ? 7 : 1))
        }
        0 !== c.compareDatePart(this._date) && (b || (this.fireEvent("navigate", [a, this._date]),
        this._elTimetableTitle && this._elTimetableTitle.set("html", this._date.print(this.options.timetableDateFormat)),
        this._retrieveData()))
    },
    selectStudent: function(a) {
        this._student !== a && (this._student = a,
        this._retrieveData())
    },
    printTimetable: function() {
        if (!(this._joData && this._joData.timetable && this._joData.timetable.periods.length))
            return void $alertSubtle(Locale.get("timetable.noData"), Locale.get("timetable.messageEmpty"));
        var a = this._joData.timetable;
        let b = (new Date).valueOf().toString(36);
        var c = Locale.get("timetable.timetable") + "-" + this._joData.surname + "_" + this._joData.firstname + "-" + b + ".pdf";
        c = c.replace(/\s/g, "_");
        for (var d = ["<data>", "<meta>", "<student>", "<surname><![CDATA[" + this._joData.surname + "]]></surname>", "<firstname><![CDATA[" + this._joData.firstname + "]]></firstname>", "<prefname><![CDATA[" + (this._joData.prefname || "") + "]]></prefname>", "</student>", "<date>" + this._date.print(this.options.timetableDateFormat) + "</date>", "</meta>", "<cycles>"], e = 0; e < a.cycles.length; e++)
            d.push("<cycle id='" + a.cycles[e].id + "' sort_order='" + a.cycles[e].sort_order + "'><![CDATA["),
            d.push(a.cycles[e].name),
            d.push("]]></cycle>");
        d.push("</cycles>"),
        d.push("<periods>");
        for (e = 0; e < a.periods.length; e++)
            d.push("<period id='" + a.periods[e].id + "' sort_order='" + a.periods[e].sort_order + "'><![CDATA["),
            d.push(a.periods[e].name),
            d.push("]]></period>");
        d.push("</periods>"),
        d.push("<body>");
        var f;
        for (e = 0; e < a.periods.length; e++) {
            f = a.periods[e].id,
            d.push("<period ref='" + f + "'>");
            for (var g, h = 0; h < a.cycles.length; h++) {
                g = a.cycles[h].id,
                d.push("<cycle ref='" + g + "'>");
                var l = a[f][g];
                if (l) {
                    l = Array.convert(l),
                    d.push("<lessons>");
                    for (var m, n = 0; n < l.length; n++)
                        m = l[n],
                        d.push("<lesson>"),
                        d.push("<room><![CDATA[" + (Locale.get("timetable.currentRoom", [m.room, m.movedTo]) || "") + "]]></room>"),
                        d.push("<subject><![CDATA[" + m.subject + "]]></subject>"),
                        d.push("<teacher><![CDATA[" + m.teacher + "]]></teacher>"),
                        d.push("<title><![CDATA[" + m.title + "]]></title>"),
                        d.push("</lesson>");
                    d.push("</lessons>")
                }
                d.push("</cycle>")
            }
            d.push("</period>")
        }
        d.push("</body>"),
        d.push("</data>"),
        ajax.print(this.options.urls.print, {
            data: d.join("\n"),
            xslt: "studentTimetable",
            fileName: c,
            fop: this.options.fop
        })
    },
    _direqtMessageStaff: function(a) {
        var b = $(a.target).getParent(".quickbar");
        if (b) {
            var c = b.get("data-staff").toInt();
            msg.send("coneqtmessage.global.compose", {
                staff: [c]
            })
        }
    },
    restoreScroll: function() {
        this._calendar && this._calendar.restoreScroll()
    }
}),
seqta.base.part.NoticesWallboard = new Class({
    Implements: [Options, Events],
    Binds: ["toElement", "draw", "show", "_redrawNotices", "cleanup", "update", "_updateReceived", "_onBodyClick", "_nextNotice", "_previousNotice", "_drawToolbar", "_drawNavigation", "_drawNotice", "_toggle", "_filter", "_toggleUpdate"],
    options: {
        empty: null,
        scrollTime: 2e4,
        maxVisible: 3,
        clickDivider: .3,
        updateFrequency: 3e5,
        defaultAutoUpdate: !0,
        attemptFullScreen: !0,
        autoAdvance: !1,
        showToolbar: !0,
        showNavigation: !1,
        useFileDomain: null,
        domainURL: null
    },
    _element: null,
    _joData: null,
    _joFilteredData: null,
    _currentIndex: 0,
    _scrollTimer: null,
    _elToolbar: null,
    _elPlay: null,
    _elStudents: null,
    _elStaff: null,
    _elUpdate: null,
    _elClose: null,
    _elEmpty: null,
    initialize: function(a, b) {
        this.setOptions(a),
        this._element = new Element("div",{
            class: "noticeWallboard legacy-root",
            events: {
                click: this._onBodyClick
            }
        }),
        this._joData = b,
        this._joFilteredData = (this._joData || []).slice(0),
        this.options.autoAdvance && this._toggle()
    },
    toElement: function() {
        return this._element
    },
    show: function() {
        this.options.showToolbar && this._drawToolbar(),
        this.options.showNavigation && this._drawNavigation(),
        this._filter(),
        this._element.injectToDocument(),
        this.options.attemptFullScreen && this._element.showFullScreen(this.cleanup),
        global.keyboard.addEvents({
            left: this._previousNotice,
            up: this._previousNotice,
            right: this._nextNotice,
            down: this._nextNotice,
            enter: this._nextNotice,
            space: this._nextNotice,
            esc: this.cleanup
        }),
        this._toggleUpdate()
    },
    _redrawNotices: function() {
        this._element.getChildren(".notice").dispose(),
        this._currentIndex = null,
        this._joFilteredData && this._joFilteredData.length ? (this._elEmpty && this._elEmpty.dispose(),
        this._nextNotice()) : (this._elEmpty = this._elEmpty || new Element("div",{
            class: "empty",
            html: this.options.empty || Locale.get("general.empty")
        }),
        this._elEmpty.inject(this._element))
    },
    cleanup: function() {
        this._element.getChildren().dispose(),
        this._element.dispose(),
        this._scrollTimer && window.clearInterval(this._scrollTimer),
        this._updateTimer && window.clearInterval(this._updateTimer),
        global.keyboard.removeEvents({
            left: this._previousNotice,
            up: this._previousNotice,
            right: this._nextNotice,
            down: this._nextNotice,
            enter: this._nextNotice,
            space: this._nextNotice,
            esc: this.cleanup
        })
    },
    update: function() {
        this.fireEvent("update", [this._updateReceived])
    },
    _updateReceived: function(a) {
        if (a && a.length)
            if (this._joData = a,
            this._elStudents && this._elStaff) {
                var b = this._elStudents.get()
                  , c = this._elStaff.get();
                this._joFilteredData = [];
                for (var d = 0; d < this._joData.length; d++)
                    (b && this._joData[d].student || c && !this._joData[d].student) && this._joFilteredData.push(this._joData[d])
            } else
                this._joFilteredData = this._joData
    },
    _onBodyClick: function(a) {
        var b = $(a.target);
        b.getParent(".toolbar") || b.getParent(".navigation") || (a.client.x / $(this._element).offsetWidth > this.options.clickDivider ? this._nextNotice(a) : this._previousNotice(a))
    },
    _nextNotice: function(a) {
        a && a.stop && a.stop(),
        this._currentIndex = null === this._currentIndex ? 0 : (this._currentIndex + 1).modulo(this._joFilteredData.length);
        var b = Math.min(this.options.maxVisible, this._joFilteredData.length)
          , c = this._drawNotice(this._joFilteredData[this._currentIndex]);
        if (c) {
            this._element.grab(c, "top"),
            c.clientHeight,
            c.addClass("shown");
            var d = this._element.getChildren(".notice:not(.disposed)");
            if (d.length > b)
                for (var e = b; e < d.length; e++)
                    d[e].dispose();
            else
                for (e = 0; e < b - d.length; e++)
                    c = this._drawNotice(this._joFilteredData[(this._currentIndex - d.length - e).modulo(this._joFilteredData.length)]),
                    this._element.grab(c),
                    c.addClass("shown")
        }
    },
    _previousNotice: function(a) {
        a && a.stop && a.stop();
        var b = Math.min(this.options.maxVisible, this._joFilteredData.length);
        this._currentIndex = null === this._currentIndex ? 0 : (this._currentIndex - 1).modulo(this._joFilteredData.length);
        var c = this._element.getChildren(".notice:not(.disposed)")
          , d = c.length && c[0];
        d && (d.removeClass("shown"),
        d.addClass("disposed"),
        function() {
            d.dispose()
        }
        .delay(400));
        for (var e, f = (c = this._element.getChildren(".notice:not(.disposed)")).length, g = 0; g < b - f; g++)
            (e = this._drawNotice(this._joFilteredData[(this._currentIndex - f - g).modulo(this._joFilteredData.length)])) && (this._element.grab(e),
            e.addClass("shown"))
    },
    _drawToolbar: function() {
        this._elToolbar = this._elToolbar || new Element("div",{
            class: "toolbar"
        }),
        this._elPlay = this._elPlay || new seqta.ui.Button({
            extraClass: "play",
            onClick: this._toggle
        }),
        this._elPlay.setValue(tools.getIcon("play_arrow")),
        this._elStudents = this._elStudents || new seqta.ui.Checkbox({
            label: Locale.get("notices.showStudentNotices"),
            boxClass: "students",
            onChange: this._filter,
            defaultValue: !0
        }),
        this._elStaff = this._elStaff || new seqta.ui.Checkbox({
            label: Locale.get("notices.showStaffNotices"),
            boxClass: "staff",
            onChange: this._filter,
            defaultValue: !1
        }),
        this._elUpdate = this._elUpdate || new seqta.ui.Checkbox({
            label: Locale.get("notices.autoUpdate"),
            boxClass: "autoUpdate",
            onChange: this._toggleUpdate,
            defaultValue: this.options.defaultAutoUpdate
        }),
        this._elClose = this._elClose || new seqta.ui.Button({
            onClick: this.cleanup,
            extraClass: "close",
            defaultValue: tools.getIcon("close")
        }),
        this._elToolbar.adopt(this._elClose, this._elPlay, this._elStudents.getBox(), this._elStaff.getBox(), this._elUpdate.getBox()),
        this._elToolbar.inject(this._element)
    },
    _drawNavigation: function() {
        new Element("div",{
            class: "navigation"
        }).adopt(new Element("div",{
            class: "left",
            events: {
                click: this._previousNotice
            }
        }), new Element("div",{
            class: "right",
            events: {
                click: this._nextNotice
            }
        })).inject(this._element)
    },
    _drawNotice: function(a) {
        if (!a)
            return null;
        var b = new Element("div",{
            class: "heading"
        }).adopt(new Element("div",{
            class: "title"
        }).adopt(new Element("h1",{
            text: a.title
        }), new Element("div",{
            class: "staff",
            html: a.staff
        })), new Element("div",{
            class: "meta"
        }).grab(new Element("div",{
            class: "label"
        }).adopt(a.label_title ? new Element("div",{
            class: "name",
            text: a.label_title
        }) : null, new Element("div",{
            class: "parties",
            html: a.student ? Locale.get("notices.studentNotice") : Locale.get("notices.staffNotice")
        }))))
          , c = new seqta.ui.Frame({
            extraClass: "content",
            bodyClass: "wallboard",
            useFileDomain: this.options.useFileDomain,
            domainURL: this.options.domainURL
        },a.contents)
          , d = new Element("div",{
            class: "notice",
            "data-id": a.id
        }).adopt(b, c);
        return a.colour && (d.addClass("#fff" === new Color(a.colour).yiqContrast() ? "light" : "dark"),
        d.setStyle("background-color", a.colour)),
        d
    },
    _toggle: function() {
        this._scrollTimer ? (this._elPlay && this._elPlay.setValue(tools.getIcon("play_arrow")),
        window.clearInterval(this._scrollTimer),
        this._scrollTimer = null) : (this._elPlay && this._elPlay.setValue(tools.getIcon("pause")),
        this._scrollTimer = this._nextNotice.periodical(this.options.scrollTime))
    },
    _filter: function() {
        if (this._elStudents && this._elStaff) {
            var a = this._elStudents.get()
              , b = this._elStaff.get();
            this._joFilteredData = [];
            for (var c = 0; c < this._joData.length; c++)
                (a && this._joData[c].student || b && !this._joData[c].student) && this._joFilteredData.push(this._joData[c]);
            this._redrawNotices()
        }
    },
    _toggleUpdate: function() {
        this._elUpdate ? this._elUpdate.get() ? this._updateTimer = this._updateTimer || this.update.periodical(this.options.updateFrequency) : (window.clearInterval(this._updateTimer),
        this._updateTimer = null) : this.options.autoAdvance && (this._updateTimer = this._updateTimer || this.update.periodical(this.options.updateFrequency))
    }
});
